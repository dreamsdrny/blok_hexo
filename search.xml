<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>win10系统怎样设置定时关机</title>
      <link href="/2023/03/02/post-win10%E7%B3%BB%E7%BB%9F%E6%80%8E%E6%A0%B7%E8%AE%BE%E7%BD%AE%E5%AE%9A%E6%97%B6%E5%85%B3%E6%9C%BA/"/>
      <url>/2023/03/02/post-win10%E7%B3%BB%E7%BB%9F%E6%80%8E%E6%A0%B7%E8%AE%BE%E7%BD%AE%E5%AE%9A%E6%97%B6%E5%85%B3%E6%9C%BA/</url>
      
        <content type="html"><![CDATA[<p>win10系统怎样设置定时关机 win10有定时关机设置吗<br>2019-09-06 16:22 出处：其他 作者：佚名<br>弥补手机拍摄短板，视频博主离不开它：联想无线麦克风MC550体验<br>去看看<br>　　很多小伙伴们都给小编反馈，说是win10系统有没有自带的定时关机设置？网上下载的定时关机软件都不是很好用，就跟分享网络的软件一样，还不如win10自带的。既然可以通过软件对win10系统进行自动关机，那系统总应该带有相应的命令可以使用吧？对于小伙伴们的这一疑问，小编义不容辞的写下了这一篇教程，为的就是帮助小伙伴们解决定时关机的问题。</p><p>　　win10系统怎样设置定时关机</p><p>　　方法一：设置每天定时关机，可以设置一个星期的任意一天。</p><p>　　点击开始菜单→运行→输入 at 22:00 &#x2F;every:M,T,W,Th,F,S,Su shutdown -s -t 100 命令→确定，电脑就会在每天的22:00分提示你电脑将于100秒之后关机了。</p><p>　　1、22:00可以改成你想定时关机的时间。</p><p>　　2、M－Su分别对应星期一到星期天，如果你星期六星期天不想要定时关机，就把S和Su去掉。</p><p>　　3、100（秒）是定时关机倒计时的时间。</p><p>　　如何取消设置好的定时关机命令。</p><p>　　如果想取消定时关机，可以输入 shutdown -a 命令，win7右下角就会提示”计划的关闭已取消”，</p><p>　　方法二：设置整点定时关机，只能设置24小时内的。</p><p>　　比如想要设置在18:50定时关机，点击开始菜单→运行→输入at 18:50 shutdown -s 命令→确定。</p><p>　　到点了就会提示还有一分钟内关闭电脑</p><p>　　方法三：设置任意时间定时关机，精确到秒。</p><p>　　比如想要设置电脑在一个小时三十分钟后自动关机，换算成秒也就是1800，点击开始菜单→运行→输入Shutdown.exe -s -t 1800 →确定，</p><p>　　右下角就会提示windows将在30分钟内关闭了。</p><p>　　Shutdown.exe的参数，每个都具有特定的用途，执行每一个都会产生不同的效果。</p><p>　　shutdown -s ：表示关闭本地计算机</p><p>　　shutdown -a ：表示取消关机操作，</p><p>　　shutdown -f ：强行关闭应用程序</p><p>　　shutdown -m \计算机名：控制远程计算机</p><p>　　shutdown -i ：显示图形用户界面，但必须是Shutdown的第一个选项</p><p>　　shutdown -l ：注销当前用户</p><p>　　shutdown -r ：关机并重启</p><p>　　shutdown -t 时间：设置关机倒计时</p><p>　　shutdown -c “消息内容”：输入关机对话框中的消息内容</p><p>　　好了，以上就是本期小编带来的，关于win10系统如何使用自动关机命令的教程</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>如何监控别人的网站</title>
      <link href="/2023/02/26/post-%E5%A6%82%E4%BD%95%E7%9B%91%E6%8E%A7%E5%88%AB%E4%BA%BA%E7%9A%84%E7%BD%91%E7%AB%99/"/>
      <url>/2023/02/26/post-%E5%A6%82%E4%BD%95%E7%9B%91%E6%8E%A7%E5%88%AB%E4%BA%BA%E7%9A%84%E7%BD%91%E7%AB%99/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="https://iweec.com/category/skill/">技术</a></li><li><a href="https://iweec.com/category/project/">项目</a></li><li><a href="https://iweec.com/category/res/">资源</a></li><li><a href="https://iweec.com/category/pay/">收付款</a></li><li></li></ul><p><a href="https://iweec.com/">首页</a>&#x2F; <a href="https://iweec.com/category/skill/">技术</a>&#x2F; 正文</p><h1 id="如何监控别人的网站"><a href="#如何监控别人的网站" class="headerlink" title="如何监控别人的网站"></a>如何监控别人的网站</h1><p><em></em> 梅塔沃克 <em></em> 2023-02-16 PM <em></em> 593℃</p><h1 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h1><p>可能是你用不到，但是我遇到了这样一个问题，就是我想详细了解我的竞争对手的网站（电商类）销售情况和新品上架情况，但是我总不至于像盯盘一样，在电脑或者手机上一直看着这个站吧！</p><p>于是我想到用一个脚本来检测，脚本的功能是如果发现对手出售了商品，就发送我售出商品的名称，价格；如果是新上线了商品，就要邮件告诉我新品的名称，价格，这对于我分析对手的销量和趋势，然后在我的店铺中择优上货是有一定帮助作用的。</p><p>另外，这个脚本作用不仅仅如此，你也可以修改一下，包括但不限于监控自己的抖音粉丝上升趋势、其他事件新闻进展、甚至是当前热点等等。</p><h1 id="现成的产品"><a href="#现成的产品" class="headerlink" title="现成的产品"></a>现成的产品</h1><p>当然，我前面的想法在现实中每个公司、店铺都用得到，而且有人专门开发程序为此而服务，比方说比较好的网页监控工具：Visualping、Distill Web Monitor、Wachete等，他们都是做这个的也都很专业，但是要想深度使用，就要收费了；</p><p>国内也有类似的产品，我尝试过。不过也有限制，每天1个网页变化只给10封邮件，申请再多也要收费！</p><p>所以吧，自己写来自己用吧！</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> smtplib</span><br><span class="line"><span class="keyword">from</span> email.mime.text <span class="keyword">import</span> MIMEText</span><br><span class="line"></span><br><span class="line"><span class="comment"># 网站 URL</span></span><br><span class="line">url = <span class="string">&quot;https://&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 发送邮件的参数</span></span><br><span class="line">sender = <span class="string">&#x27;你的发件人邮箱&#x27;</span></span><br><span class="line">receiver = <span class="string">&#x27;你的收件人邮箱&#x27;</span></span><br><span class="line">smtp_server = <span class="string">&#x27;smtp.xxx.com&#x27;</span> <span class="comment"># 发件人邮箱的 SMTP 服务器地址</span></span><br><span class="line">smtp_port = <span class="number">465</span> <span class="comment"># 发件人邮箱的 SMTP 端口</span></span><br><span class="line">username = <span class="string">&#x27;你的发件人邮箱&#x27;</span></span><br><span class="line">password = <span class="string">&#x27;你的发件人邮箱密码&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">send_email</span>(<span class="params">subject, body</span>):</span><br><span class="line">    <span class="comment"># 创建 MIMEText 邮件</span></span><br><span class="line">    msg = MIMEText(body)</span><br><span class="line">    msg[<span class="string">&#x27;Subject&#x27;</span>] = subject</span><br><span class="line">    msg[<span class="string">&#x27;From&#x27;</span>] = sender</span><br><span class="line">    msg[<span class="string">&#x27;To&#x27;</span>] = receiver</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 发送邮件</span></span><br><span class="line">    <span class="keyword">with</span> smtplib.SMTP_SSL(smtp_server, smtp_port) <span class="keyword">as</span> server:</span><br><span class="line">        server.login(username, password)</span><br><span class="line">        server.sendmail(sender, receiver, msg.as_string())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_product_info</span>(<span class="params">product_url</span>):</span><br><span class="line">    <span class="comment"># 获取商品信息</span></span><br><span class="line">    response = requests.get(product_url)</span><br><span class="line">    soup = BeautifulSoup(response.text, <span class="string">&#x27;html.parser&#x27;</span>)</span><br><span class="line">    title = soup.find(<span class="string">&#x27;h1&#x27;</span>, class_=<span class="string">&#x27;h3&#x27;</span>).text</span><br><span class="line">    price = soup.find(<span class="string">&#x27;span&#x27;</span>, class_=<span class="string">&#x27;h2&#x27;</span>).text</span><br><span class="line">    stock = soup.find(<span class="string">&#x27;span&#x27;</span>, class_=<span class="string">&#x27;js-product-stock&#x27;</span>).text</span><br><span class="line">    <span class="keyword">return</span> (title, price, stock)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check_product_sold_out</span>(<span class="params">product_url</span>):</span><br><span class="line">    <span class="comment"># 检查商品是否已售出</span></span><br><span class="line">    response = requests.get(product_url)</span><br><span class="line">    soup = BeautifulSoup(response.text, <span class="string">&#x27;html.parser&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> soup.find(<span class="string">&#x27;div&#x27;</span>, class_=<span class="string">&#x27;product-sold-out&#x27;</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定期检查商品</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="comment"># 获取网页内容</span></span><br><span class="line">    response = requests.get(url)</span><br><span class="line">    soup = BeautifulSoup(response.text, <span class="string">&#x27;html.parser&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 查找商品列表</span></span><br><span class="line">    product_list = soup.find(<span class="string">&#x27;div&#x27;</span>, class_=<span class="string">&#x27;js-product-list&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 检查每个商品是否售出</span></span><br><span class="line">    <span class="keyword">for</span> product <span class="keyword">in</span> product_list.find_all(<span class="string">&#x27;a&#x27;</span>, class_=<span class="string">&#x27;product-card&#x27;</span>):</span><br><span class="line">        product_url = product[<span class="string">&#x27;href&#x27;</span>]</span><br><span class="line">        product_title = product.find(<span class="string">&#x27;h2&#x27;</span>).text</span><br><span class="line">        <span class="keyword">if</span> check_product_sold_out(product_url):</span><br><span class="line">            <span class="comment"># 商品已售出，发送邮件通知</span></span><br><span class="line">            subject = <span class="string">f&#x27;商品已售出：<span class="subst">&#123;product_title&#125;</span>&#x27;</span></span><br><span class="line">            body = <span class="string">f&#x27;商品名称：<span class="subst">&#123;product_title&#125;</span>\n&#x27;</span></span><br><span class="line">            send_email(subject, body)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 商品未售出，检查是否为新商品</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="comment"># 尝试获取商品信息，如果获取失败则说明是新商品</span></span><br><span class="line">                product_title, product_price, product_stock = get_product_info(product_url)</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                <span class="comment"># 新商品，发送邮件通知</span></span><br><span class="line">                subject = <span class="string">f&#x27;新商品上架：<span class="subst">&#123;product_title&#125;</span>&#x27;</span></span><br><span class="line">                body = <span class="string">f&#x27;商品名称：<span class="subst">&#123;product_title&#125;</span>\n库存：<span class="subst">&#123;product_stock&#125;</span>\n价格：<span class="subst">&#123;product_price&#125;</span>\n&#x27;</span></span><br><span class="line">                send_email(subject, body)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 等待一段时间后再次检查</span></span><br><span class="line">    time.sleep(<span class="number">300</span>)</span><br></pre></td></tr></table></figure><p>解释：这个就是网店的监控程序，新品上架，商品售出会像间谍一样及时通知你！</p><p>再赠送一个：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> smtplib</span><br><span class="line"><span class="keyword">from</span> email.mime.text <span class="keyword">import</span> MIMEText</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;https://&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_hash</span>(<span class="params">url</span>):</span><br><span class="line">    response = requests.get(url)</span><br><span class="line">    <span class="keyword">return</span> hashlib.sha256(response.content).hexdigest()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">send_email</span>(<span class="params">content</span>):</span><br><span class="line">    sender = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    receiver = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    password = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    smtp_server = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    smtp_port = <span class="number">465</span></span><br><span class="line"></span><br><span class="line">    message = MIMEText(content)</span><br><span class="line">    message[<span class="string">&#x27;From&#x27;</span>] = sender</span><br><span class="line">    message[<span class="string">&#x27;To&#x27;</span>] = receiver</span><br><span class="line">    message[<span class="string">&#x27;Subject&#x27;</span>] = <span class="string">&#x27;Website Change Alert&#x27;</span></span><br><span class="line"></span><br><span class="line">    server = smtplib.SMTP_SSL(smtp_server, smtp_port)</span><br><span class="line">    server.login(sender, password)</span><br><span class="line">    server.sendmail(sender, receiver, message.as_string())</span><br><span class="line">    server.quit()</span><br><span class="line"></span><br><span class="line">current_hash = get_hash(url)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    new_hash = get_hash(url)</span><br><span class="line">    <span class="keyword">if</span> new_hash != current_hash:</span><br><span class="line">        send_email(<span class="string">&#x27;Website content has changed.&#x27;</span>)</span><br><span class="line">        current_hash = new_hash</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        time.sleep(<span class="number">30</span>)</span><br></pre></td></tr></table></figure><p>解释：这个代码很简单，比较的是网页哈希，只要有变化就会邮件通知，可用于任何场景！</p><h1 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h1><p>上面的代码是python的，修改后可以直接使用。后台运行的方法：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup python3 jiankong.py &gt; <span class="built_in">output</span>.<span class="built_in">log</span> <span class="number">2</span>&gt;&amp;<span class="number">1</span> &amp;</span><br></pre></td></tr></table></figure><p><em></em>标签: <a href="https://iweec.com/tag/%E7%9B%91%E6%8E%A7%E5%88%AB%E4%BA%BA%E7%BD%91%E7%AB%99/">监控别人网站</a>, <a href="https://iweec.com/tag/%E7%BD%91%E9%A1%B5%E7%9B%91%E6%8E%A7/">网页监控</a></p><p>如若转载，请注明出处：<a href="https://iweec.com/729.html">https://iweec.com/729.html</a></p><p>上一篇 <a href="https://iweec.com/727.html">搭建一个telegram翻译机器人</a></p><p>下一篇 <a href="https://iweec.com/731.html">拯救圣保罗：甲骨文实例netboot重装系统详细教程</a></p><h4 id="精彩内容："><a href="#精彩内容：" class="headerlink" title="精彩内容："></a>精彩内容：</h4><p><em></em></p><h3 id="-栏目分类"><a href="#-栏目分类" class="headerlink" title=" 栏目分类"></a><em></em> 栏目分类</h3><ul><li><a href="https://iweec.com/category/skill/"><em></em> 技术94</a></li><li><a href="https://iweec.com/category/project/"><em></em> 项目42</a></li><li><a href="https://iweec.com/category/res/"><em></em> 资源119</a></li><li><a href="https://iweec.com/category/pay/"><em></em> 收付款22</a></li></ul><h3 id="标签云"><a href="#标签云" class="headerlink" title="标签云"></a><em></em>标签云</h3><p><a href="https://iweec.com/tag/%E6%8C%96%E7%9F%BF/">挖矿</a><a href="https://iweec.com/tag/%E5%B9%BF%E5%91%8A%E8%81%94%E7%9B%9F/">广告联盟</a><a href="https://iweec.com/tag/UP/">UP</a><a href="https://iweec.com/tag/Netflix/">Netflix</a><a href="https://iweec.com/tag/vpn/">vpn</a><a href="https://iweec.com/tag/1%E5%85%83vps/">1元vps</a><a href="https://iweec.com/tag/%E6%98%93%E6%94%AF%E4%BB%98/">易支付</a><a href="https://iweec.com/tag/%E6%B4%BE%E5%AE%89%E7%9B%88/">派安盈</a><a href="https://iweec.com/tag/%E5%85%8D%E8%B4%B9%E7%A9%BA%E9%97%B4/">免费空间</a><a href="https://iweec.com/tag/ghithub/">ghithub</a><a href="https://iweec.com/tag/%E9%82%AE%E4%BB%B6/">邮件</a><a href="https://iweec.com/tag/%E9%9F%A9%E6%9C%8D/">韩服</a><a href="https://iweec.com/tag/%E7%94%B2%E9%AA%A8%E6%96%87%E9%87%8D%E8%A3%85%E7%B3%BB%E7%BB%9F/">甲骨文重装系统</a><a href="https://iweec.com/tag/%E7%94%B5%E5%AD%90%E4%B9%A6/">电子书</a><a href="https://iweec.com/tag/Replit/">Replit</a><a href="https://iweec.com/tag/v2ray/">v2ray</a><a href="https://iweec.com/tag/%E6%9C%8D%E5%8A%A1%E5%99%A8/">服务器</a><a href="https://iweec.com/tag/%E6%8C%87%E7%BA%B9%E6%B5%8F%E8%A7%88%E5%99%A8/">指纹浏览器</a><a href="https://iweec.com/tag/Ubuntu/">Ubuntu</a><a href="https://iweec.com/tag/%E5%85%8D%E8%B4%B9CDN/">免费CDN</a><a href="https://iweec.com/tag/%E5%BE%AE%E4%BF%A1%E6%94%B6%E6%AC%BE/">微信收款</a><a href="https://iweec.com/tag/%E7%BE%8E%E5%9B%BD%E4%B8%BB%E6%9C%BA/">美国主机</a><a href="https://iweec.com/tag/free-domain/">free domain</a><a href="https://iweec.com/tag/socket5/">socket5</a><a href="https://iweec.com/tag/x-ray/">x-ray</a><a href="https://iweec.com/tag/%E6%89%B9%E9%87%8F%E6%B3%A8%E5%86%8C/">批量注册</a><a href="https://iweec.com/tag/pias5/">pias5</a><a href="https://iweec.com/tag/%E4%BD%8F%E5%AE%85ip/">住宅ip</a><a href="https://iweec.com/tag/%E8%B7%AF%E7%94%B1%E5%99%A8/">路由器</a><a href="https://iweec.com/tag/Payoneer/">Payoneer</a></p><h3 id="猜你喜欢"><a href="#猜你喜欢" class="headerlink" title="猜你喜欢"></a><em></em>猜你喜欢</h3><h3 id="友情链接"><a href="#友情链接" class="headerlink" title="友情链接"></a><em></em>友情链接</h3><p><a href="https://www.amazonaws.cn/">亚马逊云科技</a> <a href="https://www.vpnhub.eu.org/">原生IP大全</a></p><p>© 2023 <a href="https://iweec.com/">梅塔沃克 - 专注跨境</a>&#x2F; Powered by <a href="http://typecho.org/">Typecho</a>&#x2F; Theme by <a href="https://www.ncc.wang/">Echo</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>搭建人工智能对话机器人chatgpt-telegram</title>
      <link href="/2023/02/10/post-%E6%90%AD%E5%BB%BA%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AF%B9%E8%AF%9D%E6%9C%BA%E5%99%A8%E4%BA%BAchatgpt-telegram/"/>
      <url>/2023/02/10/post-%E6%90%AD%E5%BB%BA%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AF%B9%E8%AF%9D%E6%9C%BA%E5%99%A8%E4%BA%BAchatgpt-telegram/</url>
      
        <content type="html"><![CDATA[<h1 id="搭建人工智能对话机器人chatgpt-telegram"><a href="#搭建人工智能对话机器人chatgpt-telegram" class="headerlink" title="搭建人工智能对话机器人chatgpt-telegram"></a>搭建人工智能对话机器人chatgpt-telegram</h1><p>早些时候，我给大家简单介绍了ChatGPT的注册方法，因为使用网页版真的是很不方便，于是来给大家写写这东西如何接入我们常用的即时通讯软件，查找了一番，有接入QQ的，有接入微信的，都很好！</p><p>我也说了，接入微信有一定难度，搭建之前要看看自己的微信（或者小号）可否登陆网页版，一般是不可以的。</p><p>所以，咱直接来接入telegram bot，我有点着急因为是首发，期待大家的点赞和订阅。</p><h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><p>1、ChatGPT账号并登陆；</p><p>2、telegram账号；</p><p>3、海外服务器，国内的不行，腾讯阿里的话也要买国外！</p><p><code>推荐一个小内存的vps</code>：<a href="https://my.racknerd.com/aff.php?aff=3684&pid=695">RN的1核768M $10.28&#x2F;年</a></p><p>4、项目地址：<a href="https://github.com/m1guelpf/chatgpt-telegram">https://github.com/m1guelpf/chatgpt-telegram</a></p><h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><p>1、下载chatgpt-telegram文件到服务器，git也行，我使用的是sftp的方法，为了简便，我直接把文件夹改名为：chatgpt 了；</p><p>小提示：<code>下载的文件要与系统相符，腾讯阿里等服务器是amd64，我用的甲骨文是arm64的</code></p><p>2、进入到<code>chatgpt</code>目录，修改文件<code>env.example</code></p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">TELEGRAM_ID= <span class="comment">#这里边填写使用者的telegramID，如果这里不写，机器人提示你无权使用，获得ID需要@userinfobot；</span></span><br><span class="line">TELEGRAM_TOKEN= <span class="comment">#这里是写机器人token，创建机器人使用@botfather；</span></span><br><span class="line">EDIT_WAIT_SECONDS=1 <span class="comment">#这里就默认1秒，出错的话改成2秒；</span></span><br></pre></td></tr></table></figure><p>3、保存文件<code>env.example</code>,然后改名为<code>.env</code>;<br>4、服务器端执行此步骤：在登陆ChatGPT的浏览器中，F12进入开发者工具——application——Cookis——网址是chat openai——Secure-next-auth.session-token，复制全部token。然后在服务器中写入到文件<code>~/.config/chatgpt.json</code>，chatgpt.json文件格式如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span> <span class="attr">&quot;openaisession&quot;</span><span class="punctuation">:</span> <span class="string">&quot;这里是你的token&quot;</span> <span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>5、执行 .&#x2F;chatgpt-telegram，pc端需要在跳出的浏览器里登陆ChatGPT；服务器就不用了，直接运行即可！<br>6、现在，你就可以与你的专属机器人沟通了！</p><h1 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h1><p>ChatGPT注册参考：<a href="https://iweec.com/663.html">https://iweec.com/663.html</a></p><h1 id="搭建视频教程"><a href="#搭建视频教程" class="headerlink" title="搭建视频教程"></a>搭建视频教程</h1><p>Bilibili：<a href="https://www.bilibili.com/video/BV1b84y1t74N/">https://www.bilibili.com/video/BV1b84y1t74N/</a><br>YouTube：<a href="https://www.youtube.com/watch?v=ZV9t64xTqlU">https://www.youtube.com/watch?v=ZV9t64xTqlU</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>TG Bot接入OpenAI API，</title>
      <link href="/2023/02/10/post-TG-Bot%E6%8E%A5%E5%85%A5OpenAI-API%EF%BC%8C%E7%94%A8%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%B9%9F%E8%83%BD%E4%B8%8EAI%E5%AF%B9%E8%AF%9D/"/>
      <url>/2023/02/10/post-TG-Bot%E6%8E%A5%E5%85%A5OpenAI-API%EF%BC%8C%E7%94%A8%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%B9%9F%E8%83%BD%E4%B8%8EAI%E5%AF%B9%E8%AF%9D/</url>
      
        <content type="html"><![CDATA[<h1 id="TG-Bot接入OpenAI-API，用命令行也能与AI对话"><a href="#TG-Bot接入OpenAI-API，用命令行也能与AI对话" class="headerlink" title="TG Bot接入OpenAI API，用命令行也能与AI对话"></a>TG Bot接入OpenAI API，用命令行也能与AI对话</h1><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>我所遇到的问题相信大家也都遇到了，有时候与chatGPT对话时经常出现1小时内请求过多的情况，心情不好就不跟你聊了。</p><h1 id="于是"><a href="#于是" class="headerlink" title="于是"></a>于是</h1><p>我为了测试text模型到底怎么样，有没有大家说的那么神奇，我与GPT的交互陷入了一个死循环。原因是我想让它帮我写用tg bot接入OpenAI，然后用和bot交互，你猜怎么着，GPT模型不支持API调用，目前只能用post请求，这就把GPT给难坏了，4小时这代码也没写明白，一个劲儿说我请求次数太多！最后我给它一个60分吧，感觉嗷，用AI取代程序员还有待时日。</p><p>本文内容一共分为两个部分，第一部分是在一台linux服务器，直接用python命令行的方式与最新的模型 Davinci-003交互；第二部分是与已经接入API的telegram bot交互，实现的方法也很简单，主要命令和代码如下：</p><h1 id="第一部分"><a href="#第一部分" class="headerlink" title="第一部分"></a>第一部分</h1><p>首先我们需要在服务器上安装pip和openai库：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">apt <span class="keyword">update</span></span><br><span class="line">apt install pip vim <span class="operator">-</span>y</span><br><span class="line">pip install openai</span><br></pre></td></tr></table></figure><p>然后，需要申请OpenAI的api，在这里申请：<a href="https://platform.openai.com/account/api-keys">https://platform.openai.com/account/api-keys</a><br>顺便说一下，申请api需要先绑定信用卡，不支持中国卡，哇咔咔！推荐使用：<a href="https://iweec.com/709.html">https://iweec.com/709.html</a><br>绑卡后两个月送$18，随便造；参考费用是750个单词算1000tokens，费用$0.02。为了测试不超标，我把消费限制在每月最多$1。设置限额的方法就是在 <a href="https://platform.openai.com/account/billing/limits">https://platform.openai.com/account/billing/limits</a> 看条件设置吧！</p><p>然后，就是在vps上创建 main.py,内容如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> openai</span><br><span class="line"></span><br><span class="line">openai.api_key = <span class="string">&quot;这里是你申请到的API-key&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">chat_with_gpt3</span>(<span class="params">prompt</span>):</span><br><span class="line">    response = openai.Completion.create(</span><br><span class="line">        engine=<span class="string">&quot;text-davinci-003&quot;</span>,</span><br><span class="line">        prompt=prompt,</span><br><span class="line">        max_tokens=<span class="number">104</span>,</span><br><span class="line">        n=<span class="number">1</span>,</span><br><span class="line">        stop=<span class="literal">None</span>,</span><br><span class="line">        temperature=<span class="number">0.5</span>,</span><br><span class="line">    )</span><br><span class="line">    message = response.choices[<span class="number">0</span>].text</span><br><span class="line">    <span class="keyword">return</span> message</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        message = <span class="built_in">input</span>(<span class="string">&quot;You: &quot;</span>)</span><br><span class="line">        response_message = chat_with_gpt3(message)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Bot: <span class="subst">&#123;response_message&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>最后执行 python3 chat.py，即可实现交互问答：<br><img src="https://iweec.com/usr/uploads/2023/02/3196401153.png" alt="截屏2023-02-02 21.54.27.png"></p><h1 id="第二部分"><a href="#第二部分" class="headerlink" title="第二部分"></a>第二部分</h1><p>首先还是要申请OpenAI的apikey，方法上面说了；<br>然后这个vps也必须是海外的嗷，因为我们要用bot；</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">apt <span class="keyword">update</span></span><br><span class="line">apt install pip vim <span class="operator">-</span>y</span><br><span class="line">pip install openai aiogram </span><br></pre></td></tr></table></figure><p>下一步就是新建main.py，内容如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> openai</span><br><span class="line"><span class="keyword">from</span> aiogram <span class="keyword">import</span> Bot, types</span><br><span class="line"><span class="keyword">from</span> aiogram.dispatcher <span class="keyword">import</span> Dispatcher</span><br><span class="line"><span class="keyword">from</span> aiogram.utils <span class="keyword">import</span> executor</span><br><span class="line"></span><br><span class="line">token = <span class="string">&#x27;这里是你的bot token&#x27;</span></span><br><span class="line">openai.api_key = <span class="string">&#x27;这里是你的api-key&#x27;</span></span><br><span class="line"></span><br><span class="line">bot = Bot(token)</span><br><span class="line">dp = Dispatcher(bot)</span><br><span class="line"></span><br><span class="line"><span class="meta">@dp.message_handler()</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">send</span>(<span class="params">message : types.Message</span>):</span><br><span class="line">    response = openai.Completion.create(</span><br><span class="line">    model=<span class="string">&quot;text-davinci-003&quot;</span>,</span><br><span class="line">    prompt=message.text,</span><br><span class="line">    temperature=<span class="number">0.9</span>,</span><br><span class="line">    max_tokens=<span class="number">1000</span>,</span><br><span class="line">    top_p=<span class="number">1.0</span>,</span><br><span class="line">    frequency_penalty=<span class="number">0.0</span>,</span><br><span class="line">    presence_penalty=<span class="number">0.6</span>,</span><br><span class="line">    stop=[<span class="string">&quot;You:&quot;</span>]</span><br><span class="line">)</span><br><span class="line">    <span class="keyword">await</span> message.answer(response[<span class="string">&#x27;choices&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;text&#x27;</span>])</span><br><span class="line"></span><br><span class="line">executor.start_polling(dp, skip_updates=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>最后，就是执行 python3 main.py，提示：Updates were skipped successfully.就可以到你的bot当中，跟他聊一下！</p><p><img src="https://iweec.com/usr/uploads/2023/02/2371290845.png" alt="截屏2023-02-02 20.58.06.png"></p><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>切记：不要暴露API和token！！</p><p>我在上面用例当中引用的text-davinci-003模型，虽然快，但是有点傻：<br><img src="https://iweec.com/usr/uploads/2023/02/3863399923.png" alt="截屏2023-02-02 22.43.26.png"></p><h1 id="视频教程"><a href="#视频教程" class="headerlink" title="视频教程"></a>视频教程</h1><p>Y：<a href="https://www.youtube.com/watch?v=7H0lYvfoghs">https://www.youtube.com/watch?v=7H0lYvfoghs</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Doprax搭建免费的v2ray</title>
      <link href="/2023/02/09/post-%E6%AF%8F%E6%9C%885%E5%85%83%EF%BC%8C%E4%BE%BF%E5%AE%9C%E4%BD%86%E9%80%9F%E5%BA%A6%E9%A3%9E%E5%BF%AB%E7%9A%84%E7%BE%8E%E5%9B%BDVPS-6%E6%9C%BA%E6%88%BF%E5%8F%AF%E9%80%89-%E4%BD%8E%E8%87%B3-9-89%E5%B9%B4/"/>
      <url>/2023/02/09/post-%E6%AF%8F%E6%9C%885%E5%85%83%EF%BC%8C%E4%BE%BF%E5%AE%9C%E4%BD%86%E9%80%9F%E5%BA%A6%E9%A3%9E%E5%BF%AB%E7%9A%84%E7%BE%8E%E5%9B%BDVPS-6%E6%9C%BA%E6%88%BF%E5%8F%AF%E9%80%89-%E4%BD%8E%E8%87%B3-9-89%E5%B9%B4/</url>
      
        <content type="html"><![CDATA[<h1 id="每月-5-元，便宜但速度飞快的美国-VPS-6-机房可选-低至-9-89-x2F-年"><a href="#每月-5-元，便宜但速度飞快的美国-VPS-6-机房可选-低至-9-89-x2F-年" class="headerlink" title="每月 5 元，便宜但速度飞快的美国 VPS(6 机房可选)低至$9.89&#x2F;年"></a>每月 5 元，便宜但速度飞快的美国 VPS(6 机房可选)低至$9.89&#x2F;年</h1><p><em></em> 梅塔沃克 <em></em> 2022-12-22 PM <em></em> 63086℃</p><p>racknerd 发布了 2022 年新年 VPS 优惠促销活动，年付不到 10 美元！美国 VPS 有 6 个可选数据中心分别是：洛杉矶、圣何塞、西雅图、达拉斯、芝加哥、纽约。支持 PayPal 和支付宝付款，默认 1Gbps 带宽，KVM 虚拟，纯 SSD raid10，solusvm 面板…</p><p><img src="https://iweec.com/usr/uploads/2022/04/3403454246.png" alt="unnamed.png"></p><p>2022 年黑五促销 VPS,注意：这个活动不是总有，若链接失效只能购买别的了</p><table><thead><tr><th>内存</th><th>CPU</th><th>SSD</th><th>流量</th><th>价格</th><th>购买</th></tr></thead><tbody><tr><td>768M</td><td>1 核</td><td>10G</td><td>1T&#x2F;月</td><td>$10.28&#x2F;年</td><td><a href="https://my.racknerd.com/aff.php?aff=3684&pid=695">购买</a></td></tr><tr><td>1.5G</td><td>1 核</td><td>30G</td><td>3T&#x2F;月</td><td>$16.88</td><td><a href="https://my.racknerd.com/aff.php?aff=3684&pid=696">购买</a></td></tr><tr><td>2G</td><td>2.5 核</td><td>60G</td><td>7T&#x2F;月</td><td>$28.55</td><td><a href="https://my.racknerd.com/aff.php?aff=3684&pid=697">购买</a></td></tr><tr><td>3.5G</td><td>2 核</td><td>80G</td><td>10T&#x2F;月</td><td>$38.88</td><td><a href="https://my.racknerd.com/aff.php?aff=3684&pid=698">购买</a></td></tr><tr><td>4.5G</td><td>3 核</td><td>100G</td><td>12TB</td><td>$48.77&#x2F;年</td><td><a href="https://my.racknerd.com/aff.php?aff=3684&pid=699">购买</a></td></tr></tbody></table><p>这里是 dc-02 图片演示站，可以体验一下 vps 的速度 <a href="http://204.13.154.10/">http://204.13.154.10/</a></p><p>512M 内存比较适合个人代理用,直接搭建 v2ray,1G 以上内存 2-3 人合租或者是建站很合适。</p><p>黑色星期五-促销(与新年促销有些区别,注意比较 SSD 大小和流量，按需购买):</p><table><thead><tr><th>内存</th><th>CPU</th><th>SSD</th><th>流量</th><th>价格</th><th>购买</th></tr></thead><tbody><tr><td>768M</td><td>1 核</td><td>12G</td><td>1T&#x2F;月</td><td>$10.88&#x2F;年</td><td><a href="https://my.racknerd.com/aff.php?aff=3684&pid=587">购买链接</a></td></tr><tr><td>1G</td><td>1 核</td><td>25G</td><td>4T&#x2F;月</td><td>$14.88&#x2F;年</td><td><a href="https://my.racknerd.com/aff.php?aff=3684&pid=588">购买链接</a></td></tr><tr><td>2.5G</td><td>2 核</td><td>50G</td><td>6T&#x2F;月</td><td>$27.88&#x2F;年</td><td><a href="https://my.racknerd.com/aff.php?aff=3684&pid=589">购买链接</a></td></tr><tr><td>3G</td><td>2 核</td><td>60G</td><td>8T&#x2F;月</td><td>$34.88&#x2F;年</td><td><a href="https://my.racknerd.com/aff.php?aff=3684&pid=590">购买链接</a></td></tr><tr><td>4G</td><td>3 核</td><td>75G</td><td>10T&#x2F;月</td><td>$43.39&#x2F;年</td><td><a href="https://my.racknerd.com/aff.php?aff=3684&pid=591">购买链接</a></td></tr></tbody></table><p>推荐理由：便宜，好用，速度飞快，建站或者代理都能胜任。购买后您需要通过您注册的邮箱和密码来进行登录。</p><p>登录后，请在导航栏寻找 “view email log” 的按钮，点击进去。</p><p>进去后查找标题为 “KVM VPS LOGIN Information” 的邮件，点击。</p><p>现在您可以在这个邮件里找到服务器登录信息，VPS 控制面板的登录信息等，请详细阅读，所有信息都包含在这个邮件里。</p><p>如需重装，改密，请点击右侧的 Manage 进入查看 VPS 信息，然后点击 Manage 就可以看到：重启 VPS 关机、重装系统 reinstall，VNC 密码、修改 root 密码等功能。</p><p>关于 VPS 用途：</p><p>1、建站 推荐使用 宝塔+WordPress 或者手动；</p><p>2、科学上网 推荐：ws+tls+cdn</p><p>具体文章：<a href="https://iweec.com/5.html">https://iweec.com/5.html</a></p><p>视频参考：<a href="https://www.youtube.com/watch?v=DlHPV8Q_4K0">https://www.youtube.com/watch?v=DlHPV8Q_4K0</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Replit免费服务器搭建超高速节点</title>
      <link href="/2023/02/09/post-Replit%E5%85%8D%E8%B4%B9%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA%E8%B6%85%E9%AB%98%E9%80%9F%E8%8A%82%E7%82%B9/"/>
      <url>/2023/02/09/post-Replit%E5%85%8D%E8%B4%B9%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA%E8%B6%85%E9%AB%98%E9%80%9F%E8%8A%82%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<h1 id="Replit免费服务器搭建超高速节点"><a href="#Replit免费服务器搭建超高速节点" class="headerlink" title="Replit免费服务器搭建超高速节点"></a>Replit免费服务器搭建超高速节点</h1><p>Replit（<a href="https://repl.it/">https://repl.it</a>）是一个基于浏览器的云端协同开发平台，可用于构建开发环境、实时协作、托管网络应用等。Replit提供可创建动态或者静态网站的容器，并会自动生成免费https域名（格式为：项目名.用户名.repl.co）。这代表着任何人都可以试用Replit的云服务器创建自己的网站，或者是其他的服务，例如v2ray，而且这一切，都是免费的。</p><p>Replit官方文档：<a href="https://docs.replit.com/">https://docs.replit.com/</a></p><h1 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h1><p>注册地址 <a href="https://repl.it/">https://repl.it</a><br>可选谷歌账号、苹果账号、fb或者GitHub账号一键登录，或者自己用邮箱注册也行，邮箱注册的需要收信验证一下。</p><p>其他的没什么说的，就是跳过，或者随便选择吧；</p><h1 id="Replit测试"><a href="#Replit测试" class="headerlink" title="Replit测试"></a>Replit测试</h1><p>注册后，我随便弄了个Repl，经测试Repl项目是在谷歌云中运行的，主服务器8核64G，当然了这不可能都给你用，所有Repl项目会共用这台服务器，直到它到了负荷，会自动切换到下一台。</p><p>随便开一个Repl，然后shell进入，查看当前主机状态，负载蛮高的。<br><img src="https://iweec.com/usr/uploads/2022/12/1695379248.png" alt="截屏2022-12-17 14.29.06.png"></p><p>每个免费的项目会得到0.2-0.5个CPU512M内存1GB的硬盘空间，想提高性能就要充值！</p><p>另外就是replit.nix，需要自己集成；最后，Replit的项目就叫：repl；</p><h1 id="创建repl"><a href="#创建repl" class="headerlink" title="创建repl"></a>创建repl</h1><h2 id="静态或动态网站"><a href="#静态或动态网站" class="headerlink" title="静态或动态网站"></a>静态或动态网站</h2><p>在<code>home</code>中，点击<code>Create</code>，然后选择<code>HTML, CSS, JS</code>（静态），<code>PHP Web Server</code>(动态)，然后<code>Create Repl</code>即可。</p><p>倘若网站的文件比较少，可以直接写代码，如果文件比较多用git之前先要把Replit连接到你的github。</p><p>Replit虽然也提供了数据库，我看仅仅适合学习用途，动态网站所需的数据库还是自己找个免费的，例如：<a href="https://freedb.tech/">https://freedb.tech/</a></p><p>简单说，就是我们的内容托管在Replit，数据库还是需要用别人的，想尝试Replit自己的SQLite服务，也可以试试。</p><p>可能是我测试的时间比较短，并没有发现问题。Replit官方说：永远在线服务是要购买的，这说明，这个空间并不能永久在线！做站就要认真考虑一下了。</p><h2 id="为自己的网站绑定域名"><a href="#为自己的网站绑定域名" class="headerlink" title="为自己的网站绑定域名"></a>为自己的网站绑定域名</h2><p>在网站页面，点击<code>Domain Linking</code>，输入自己的域名，按照提示修改A记录或者使用CNAME，再添加TXT记录，然后检查通过即可绑定域名访问。</p><h2 id="创建其他repl"><a href="#创建其他repl" class="headerlink" title="创建其他repl"></a>创建其他repl</h2><p>这里没什么可说的，Python、C#、node.js、Java都可以随便尝试。</p><h2 id="共享自己的项目"><a href="#共享自己的项目" class="headerlink" title="共享自己的项目"></a>共享自己的项目</h2><p>在自己repl的右上角，点击<code>Invite</code>即可给项目生成一个URL，发给你的伙伴即可实现共享。</p><h2 id="其他功能"><a href="#其他功能" class="headerlink" title="其他功能"></a>其他功能</h2><p>Replit的其他功能都可以在文档中找到，够玩好几天了。</p><h2 id="搭建v2ray"><a href="#搭建v2ray" class="headerlink" title="搭建v2ray"></a>搭建v2ray</h2><p>我从今天才开始了解Replit，感谢热心网友提供的搭建方法。</p><p>1、浏览器登录自己的Replit账号，新窗口打开<a href="https://replit.com/@wanghanzhe/V2RAY?v=1">https://replit.com/@wanghanzhe/V2RAY?v=1</a><br>备用地址： <a href="https://replit.com/@oracleservice/V2RAY">https://replit.com/@oracleservice/V2RAY</a></p><p>2、fork这个项目，仅需点击<code>Use Template</code>，然后给项目取个名字，然后<code>Use Template</code>就行了。</p><p>3、点击<code>run</code>，Console会输出password和url，直接添加到app中即可使用；</p><p><img src="https://iweec.com/usr/uploads/2022/12/1673290034.png" alt="截屏2022-12-17 15.50.26.png"></p><p>4、速度如何呀？ 谷歌的服务器不用问，电脑上我都没测试，直接告诉你能跑满，而且现在用的人也不太多，白嫖党作为自己的主力线路好像也没压力。</p><p>5、个别伙伴扫描二维码不能直接导入v2客户端，请参考如下配置：<br><img src="https://iweec.com/usr/uploads/2022/12/2274539777.jpg" alt="photo_2022-12-17_20-55-12.jpg"></p><h2 id="搭建trojan，感谢热心网友提供的代码"><a href="#搭建trojan，感谢热心网友提供的代码" class="headerlink" title="搭建trojan，感谢热心网友提供的代码"></a>搭建trojan，感谢热心网友提供的代码</h2><p>非常简单，Fork <a href="https://replit.com/@sos801107/trojan?v=1">https://replit.com/@sos801107/trojan?v=1</a><br>备用地址： <a href="https://replit.com/@oracleservice/trojan">https://replit.com/@oracleservice/trojan</a><br>然后运行 bash main.sh<br>即可看到 trojan链接和二维码，实测路由器可用。<br><img src="https://iweec.com/usr/uploads/2022/12/3103210989.png" alt="截屏2022-12-25 12.33.03.png"></p><p>配置参考：<br><img src="https://iweec.com/usr/uploads/2022/12/2336471006.jpg" alt="photo_2022-12-25_11-58-18.jpg"></p><h1 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h1><p>伙伴们对这个貌似很感兴趣，今早我通过电脑测试一下，使用的是小火箭，确实我没说错，谷歌云轻松8k高清。截图如下：<br><img src="https://iweec.com/usr/uploads/2022/12/900207767.png" alt="截屏2022-12-18 11.54.25.png"></p><h2 id="另外就是有伙伴客户端不支持，咱的环境都不一样，我没法一个一个测试，大家参考一下已经成功的伙伴："><a href="#另外就是有伙伴客户端不支持，咱的环境都不一样，我没法一个一个测试，大家参考一下已经成功的伙伴：" class="headerlink" title="另外就是有伙伴客户端不支持，咱的环境都不一样，我没法一个一个测试，大家参考一下已经成功的伙伴："></a>另外就是有伙伴客户端不支持，咱的环境都不一样，我没法一个一个测试，大家参考一下已经成功的伙伴：</h2><p>1、这个节点放在手机matsuri可以使用；<br>2、手机小火箭完全支持，可以直接识别url自动添加；<br>3、电脑端可以用shadowsocks客户端+v2ray-plugin插件使用；<br>4、這是ss+v2ray-plugin 客戶端若選v2ray設置是連不了的；<br>5、用来打绝地求生延迟低，不卡；</p><h2 id="也是今天上午测试的，我本地是移动100M网络，fast测速45M，延迟80ms。"><a href="#也是今天上午测试的，我本地是移动100M网络，fast测速45M，延迟80ms。" class="headerlink" title="也是今天上午测试的，我本地是移动100M网络，fast测速45M，延迟80ms。"></a>也是今天上午测试的，我本地是移动100M网络，fast测速45M，延迟80ms。</h2><p><img src="https://iweec.com/usr/uploads/2022/12/2180763552.png" alt="截屏2022-12-18 12.09.50.png"></p><h2 id="Replit获得root权限的方法"><a href="#Replit获得root权限的方法" class="headerlink" title="Replit获得root权限的方法"></a>Replit获得root权限的方法</h2><p>首先，我们在Replit创建一个Bash；<br><img src="https://iweec.com/usr/uploads/2022/12/2381389884.png" alt="截屏2022-12-24 08.03.11.png"></p><p>然后我们在项目右侧Console窗口依次执行下列命令：<br><img src="https://iweec.com/usr/uploads/2022/12/4112899017.png" alt="截屏2022-12-24 08.03.37.png"></p><p>wget <a href="https://cdn.discordapp.com/attachments/853535040250970113/878590395611775016/yt.zip">https://cdn.discordapp.com/attachments/853535040250970113/878590395611775016/yt.zip</a> （需要回车一次）</p><p>unzip yt.zip （需要回车一次）</p><p>unzip root.zip</p><p>tar -xvf root.tar.xz</p><p>.&#x2F;dist&#x2F;proot -S . &#x2F;bin&#x2F;bash</p><p>以上的命令说明：首先下载yt.zip，然后解压文件，恢复文件，然后执行bash；</p><p>当我们执行完所有命令，你就会发现，已经是root啦～<br><img src="https://iweec.com/usr/uploads/2022/12/3399246345.png" alt="截屏2022-12-24 08.03.24.png"></p><p>获取了root权限，可玩性高多了！！</p><h2 id="视频教程："><a href="#视频教程：" class="headerlink" title="视频教程："></a>视频教程：</h2><p><a href="https://www.bilibili.com/video/BV1C8411p7xo/">https://www.bilibili.com/video/BV1C8411p7xo/</a><br><a href="https://www.youtube.com/watch?v=ZsQ6NEZeei0">https://www.youtube.com/watch?v=ZsQ6NEZeei0</a><br><a href="https://www.youtube.com/watch?v=t2jhaZMvWCE">https://www.youtube.com/watch?v=t2jhaZMvWCE</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux简教程</title>
      <link href="/2023/01/29/post-Linux%E7%AE%80%E6%95%99%E7%A8%8B/"/>
      <url>/2023/01/29/post-Linux%E7%AE%80%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux精简教程"><a href="#Linux精简教程" class="headerlink" title="Linux精简教程"></a>Linux精简教程</h1><p>ROS 依赖 Linux 提供底层支持，一般基于 Linux 系统开发，玩转 ROS 机器人操作系统需要具备基本的 Linux 知识。本篇对Linux 进行基本讲解，并讲解常用 Linux 操作命令。如果您对 Linux 熟练掌握，请自行跳过该篇。</p><h2 id="第一章-初识Linux"><a href="#第一章-初识Linux" class="headerlink" title="第一章 初识Linux"></a>第一章 初识Linux</h2><p>1 什么是Linux<br> Linux 是全球最受欢迎的开源操作系统。它是一个由 C 语言编写的，符合 POSIX 标准的类 UNIX 系统。POSIX 是 Portable Operating System Interface 的缩写，表示可移植操作系统接口，它规定了操作系统应该为应用编程提供的接口标准。UNIX 是一个强大的多用户、多任务分时操作系统，支持多种处理器架构，于 1969 年在 AT&amp;T 的贝尔实验室开发。UNIX 是商业操作系统，需要收费。获取 Linux 内核源码的网址为：<a href="http://www.kernel.org/">http://www.kernel.org</a> ，在这里能够下载各版本的内核源码，包括测试版和最新稳定版。</p><p> 和Windows操作系统软件一样，Linux也是一个操作系统软件。但是和Windows不同的是，Linux是一套开放源代码程序的、并可以自由传播的类Unix操作系统软件（Unix系统是Linux系统的前身，具备很多优秀特性）。其在设计之初，就是基于Intel x86系列CPU架构的计算机的。它是一个基于POSIX的多用户、多任务并且支持多线程和多CPU的操作系统。</p><p> Linux是由世界各地成千上万的程序员设计和开发实现的。当初开发Linux系统的目的就是建立不受任何商业化软件版权制约的、全世界都能自由使用的类Unix操作系统兼容产品。在过去的20年里，Linux系统主要应用于服务器端、嵌入式开发和个人PC桌面三大领域，其中服务器端领域是重中之重。</p><p> 大型、超大型互联网企业（百度、Sina、淘宝等）都在使用Linux系统作为其服务器端的程序运行平台，全球及国内排名前十的网站使用的主流系统几乎都是Linux系统。</p><p>2 Linux 系统特点<br>Linux 是一个开放自由的操作系统内核，具有一些鲜明的特点。</p><p>（1） 开放性。遵循世界标准规范。凡遵循国际标准所开发的硬件和软件，都能彼此兼容，可方便地实现互连。</p><p>（2） 多用户。Linux 操作系统是一个真正的多用户操作系统；系统资源可以被不同用户各自拥有使用，即每个用户对自己的资源有特定的权限，互不影响。</p><p>（3） 多任务。多任务是现代计算机的最主要的一个特点。它是指计算机同时执行多个程序，而且各个程序的运行互相独立。Linux 系统调度每一个进程平等地访问处理器。</p><p>（4） 良好的用户界面。Linux 向用户提供了两种界面：用户界面和系统调用。Linux 的传统用户界面是基于文本的命令行界面，即 Shell，它既可以联机使用，又可存在文件上脱机使用。Shell 有很强的程序设计能力，用户可方便地用它编制程序，从而为用户扩充系统功能提供了更高级的手段。</p><p>（5） 设备独立性。Linux 操作系统把所有外部设备统一当作成文件来看待，只要安装它们的驱动程序，任何用户都可以像使用文件一样，操纵、使用这些设备，而不必知道它们的具体存在形式。</p><p>（6） 完善的网络功能。Linux 内置完整的 POSIX 网络协议栈，在通信和网络功能方面优于其它操作系统。Linux 为用户提供了完善的、强大的网络功能。支持 Internet。网络文件传输。用户能通过一些 Linux 命令完成内部信息或文件的传输。远程访问功能。</p><p>（7） 可靠的系统安全。Linux 采取了许多安全技术措施，为网络多用户环境中的用户提供了必要的安全保障。</p><p>（8） 模块化。运行时可以根据系统的需要加载程序而无需重启系统。Linux 的模块化极大地提高了 Linux 的可裁剪性和灵活性。</p><p>（9） 良好的可移植性。Linux 是一种可移植的操作系统，能够在从微型计算机到大型计算机的任何环境和任何平台上运行。目前已经成为支持平台最广泛的操作系统。</p><p>3 嵌入式Linux<br> 嵌入式 Linux 是对运行在嵌入式设备上的 Linux 的统称。嵌入式 Linux 往往针对于某个特殊领域，专门为实现某些特定的功能而开发，一般说来，嵌入式 Linux 所运行的程序相对来说比较单一，功能定位也比较明确，如嵌入式网关、路由器等。由 Linus 主持开发的 Linux 与其它嵌入式系统产品一样，嵌入式 Linux 产品在物理形态上与普通Linux 设备有很大差异，不同产品之间物理形态也是各不相同。与桌面 Linux 相比，嵌入式 Linux 产品往往没有硕大的显示器，或者鼠标键盘这样的外设。</p><p>4 Linux 发行版<br> 从技术上来说，李纳斯•托瓦兹开发的 Linux 只是一个内核。内核指的是一个提供设备驱动、文件系统、进程管理、网络通信等功能的系统软件，内核并不是一套完整的操作系统，它只是操作系统的核心。一些组织或厂商将 Linux 内核与各种软件和文档包装起来，并提供系统安装界面和系统配置、设定与管理工具，就构成了 Linux 的发行版本。</p><p> 在 Linux 内核的发展过程中，各种 Linux 发行版本起了巨大的作用，正是它们推动了 Linux 的应用，从而让更多的人开始关注 Linux。因此，把 Red Hat、Ubuntu、SUSE 等直接说成 Linux 其实是不确切的，它们是 Linux 的发行版本， 更确切地说，应该叫做“以 Linux 为核心的操作系统软件包”。</p><p> Linux 的各个发行版本使用的是同一个 Linux 内核，因此在内核层不存在什么兼容性问题，每个版本有不一样的感觉，只是在发行版本的最外层（由发行商整合开发的应用）才有所体现。</p><p>Linux 的发行版本可以大体分为两类：</p><p>商业公司维护的发行版本，以著名的 Red Hat 为代表；</p><p>社区组织维护的发行版本，以 Debian 为代表。</p><p>很难说大量 Linux 版本中哪一款更好，每个版本都有自己的特点。下面为大家介绍几款常用的 Linux 发行版本。</p><p>4.1 Red Hat Linux<br>Red Hat（红帽公司）创建于 1993 年，是目前世界上资深的 Linux 厂商，也是最获认可的 Linux 品牌。</p><p>Red Hat 公司的产品主要包括 RHEL（Red Hat Enterprise Linux，收费版本）和 CentOS（RHEL 的社区克隆版本，免费版本）、Fedora Core（由 RedHat 桌面版发展而来，免费版本）。</p><p>Red Hat 是在我国国内使用人群最多的 Linux 版本，资料丰富，如果你有什么不明白的地方，则容易找到人来请教，而且大多数 Linux 教程是以 Red Hat 为例来讲解的。</p><p>CentOS ，它是基于 Red Hat Enterprise Linux 源代码重新编译、去除 RedHat 商标的产物，各种操作使用和付费版本没有区别，且完全免费。缺点是不向用户提供技术支持，也不负任何商业责任。有实力的公司可以选择付费版本。</p><p>4.2 Ubuntu Linux<br>Ubuntu 基于知名的 Debian Linux 发展而来，界面友好，容易上手，对硬件的支持非常全面，是目前最适合做桌面系统的 Linux 发行版本，而且 Ubuntu 的所有发行版本都免费提供。</p><p>Ubuntu 的创始人 Mark Shuttleworth 是非常具有传奇色彩的人物。他在大学毕业后创建了一家安全咨询公司，1999 年以 5.75 亿美元被收购，由此一跃成为南非最年轻有为的本土富翁。作为一名狂热的天文爱好者，Mark Shuttleworth 于2002 年自费乘坐俄罗斯联盟号飞船，在国际空间站中度过了 8 天的时光。之后，Mark Shuttleworth 创立了 Ubuntu 社区，2005 年 7 月 1 日建立了 Ubuntu 基金会，并为该基金会投资 1000 万美元。他说，太空的所见正是他创立 Ubuntu 的精神之所在。如今，他最热衷的事情就是到处为自由开源的 Ubuntu 进行宣传演讲。</p><p>4.3 SuSE Linux<br>SuSE Linux 以 Slackware Linux 为基础，原来是德国的 SuSE Linux AG 公司发布的 Linux 版本，1994 年发行了第一版，早期只有商业版本，2004 年被Novell 公司收购后，成立了 OpenSUSE 社区，推出了自己的社区版本OpenSUSE。</p><p>SuSE Linux 在欧洲较为流行，在我国国内也有较多应用。值得一提的是，它吸取了 Red Hat Linux 的很多特质。</p><p>SuSE Linux 可以非常方便地实现与 Windows 的交互，硬件检测非常优秀，拥有界面友好的安装过程、图形管理工具，对于终端用户和管理员来说使用非常方便。</p><p>4.4 Gentoo Linux<br>Gentoo 最初由 Daniel Robbins（FreeBSD 的开发者之一）创建，首个稳定版本发布于 2002 年。Gentoo 是所有 Linux 发行版本里安装最复杂的，到目前为止仍采用源码包编译安装操作系统。</p><p>不过，它是安装完成后最便于管理的版本，也是在相同硬件环境下运行最快的版本。自从 Gentoo 1.0 面世后，它就像一场风暴，给 Linux 世界带来了巨大的惊喜，同时也吸引了大量的用户和开发者投入 Gentoo Linux 的怀抱。</p><p>有人这样评价 Gentoo：快速、设计干净而有弹性，它的出名是因为其高度的自定制性（基于源代码的发行版）。尽管安装时可以选择预先编译好的软件包，但是大部分使用 Gentoo 的用户都选择自己手动编译。这也是为什么 Gentoo 适合比较有Linux 使用经验的老手使用。</p><p>4.5 其他 Linux 发行版<br>除以上 4 种 Linux 发行版外，还有很多其他版本，下表罗列了几种常见的Linux 发行版以及它们各自的特点：</p><p>版本名称网 址特 点软件包管理器<br>Debian<a href="http://www.debian.org/">www.debian.org</a>开放的开发模式，且易于进行软件包升级apt<br>Fedora Core<a href="http://www.redhat.com/">www.redhat.com</a>拥有数量庞人的用户，优秀的社区技术支持. 并且有许多创新up2date（rpm），yum （rpm），dnf<br>CentOS<a href="http://www.centos.org/">www.centos.org</a>CentOS 是一种对 RHEL（Red Hat EnterpriseLinux）源代码再编译的产物，由于 Linux 是开发源代码的操作系统，并不排斥样基于源代码的再分发，CentOS 就是将商业的 Linux 操作系统RHEL 进行源代码再编译后分发，并在 RHEL 的基础上修正了不少已知的漏洞rpm<br>**SUSE<a href="http://www.suse.com/">www.suse.com</a>专业的操作系统，易用的 YaST 软件包管理系统YaST（rpm），第三 方 apt（rpm）软件库（repository）<br>Mandriva<a href="http://www.mandriva.com/">www.mandriva.com</a>操作界面友好，使用图形配置工具，有庞大的社区进行技术支持，支持 NTFS 分区的大小变更rpm<br>KNOPPIX<a href="http://www.knoppix.com/">www.knoppix.com</a>可以直接在 CD 上运行，具有优秀的硬件检测和适配能力，可作为系统的急救盘使用apt<br>Gentoo<a href="http://www.gentoo.org/">www.gentoo.org</a>高度的可定制性，使用手册完整portage<br>Ubuntu<a href="http://www.ubuntu.com/">www.ubuntu.com</a>优秀易用的桌面环境，基于 Debian 构建apt<br>4.6 Linux 发行版本选择<br>如果你需要的是一个服务器系统，而且已经厌烦了各种 Linux 的配置，只是想要一个比较稳定的服务器系统，那么建议你选择 CentOS 或 RHEL。</p><p>如果你只是需要一个桌面系统，而且既不想使用盗版，又不想花大价钱购买商业软件，不想自己定制，也不想在系统上浪费太多时间，则可以选择 Ubuntu。</p><p>如果你想深入摸索一下 Linux 各个方面的知识，而且还想非常灵活地定制自己的Linux 系统，那就选择 Gentoo 吧，尽情享受 Gentoo 带来的自由快感。如果你对系统稳定性要求很高，则可以考虑 FreeBSD。</p><p>如果你需要使用数据库高级服务和电子邮件网络应用，则可以选择 SuSE。</p><h2 id="第二章-Linux-文件系统"><a href="#第二章-Linux-文件系统" class="headerlink" title="第二章 Linux 文件系统"></a>第二章 Linux 文件系统</h2><h3 id="1-文件系统基础知识"><a href="#1-文件系统基础知识" class="headerlink" title="1 文件系统基础知识"></a>1 文件系统基础知识</h3><p>文件系统的最顶层是由根目录开始的，系统使用“&#x2F;”来表示根目录，在根目录之下的既可以是目录，也可以是文件，而每一个目录中又可以包含（子）目录或文件。如此反复就可以构成一个庞大的文件系统。</p><p>为了避免诸多Linux发行版使用各部相同的文件系统结构，Linux基金会发布了FHS标准，多数Linux发行版系统都遵循这一标准。</p><p><strong>说明：</strong>FHS（Filesystem Hierarchy Standard），文件系统层次化标准，该标准规定了 Linux 系统中所有一级目录以及部分二级目录（&#x2F;usr 和 &#x2F;var）的用途。发布此标准的主要目的就是为了让用户清楚地了解每个目录应该存放什么类型的文件。</p><p>注意，目录名或文件名都是区分大小写的。比如Abc和abc是不同的目录或文件。完整的目录或文件路径是由一连串的目录名所组成的，其中每一个目录由“&#x2F;”来分隔。如bin的完整路径是 &#x2F;home&#x2F;bin。</p><p>在文件系统中，有两个比较特殊的目录，一个是用户所在的工作目录，即当前目录，可用一个点“.”表示；另一个是当前目录的上一层目录，也叫父目录，用两个点“…”表示。</p><p>如果一个目录或文件名是以一个点开始（比如.local），就表示这个目录或文件是一个隐藏目录或文件。即以默认方式査找时，不显示该目录或文件。</p><h3 id="2-文件系统树形图"><a href="#2-文件系统树形图" class="headerlink" title="2 文件系统树形图"></a>2 文件系统树形图</h3><p>不同的Linux发行版可能文件系统树形图稍有不同，但大同小异，如下图所示。</p><h3 id="3-一级目录详细说明"><a href="#3-一级目录详细说明" class="headerlink" title="3 一级目录详细说明"></a>3 一级目录详细说明</h3><p>一级目录功能（作用）<br>&#x2F;bin&#x2F;存放系统命令，普通用户和 root 都可以执行。放在 &#x2F;bin 下的命令在单用户模式下也可以执行<br>&#x2F;boot&#x2F;系统启动目录，保存与系统启动相关的文件，如内核文件和启动引导程序（grub）文件等<br>&#x2F;dev&#x2F;设备文件保存位置<br>&#x2F;etc&#x2F;配置文件保存位置。系统内所有采用默认安装方式的服务配置文件全部保存在此目录中，如用户信息、服务的启动脚本、常用服务的配置文件等<br>&#x2F;home&#x2F;普通用户的主目录（也称为家目录）。在创建用户时，每个用户要有一个默认登录和保存自己数据的位置，就是用户的主目录，所有普通用户的主目录是在 &#x2F;home&#x2F; 下建立一个和用户名相同的目录。<br>&#x2F;lib&#x2F;系统调用的函数库保存位置<br>&#x2F;media&#x2F;挂载目录。系统建议用来挂载媒体设备，如软盘和光盘<br>&#x2F;mnt&#x2F;挂载目录。早期 Linux 中只有这一个挂载目录，并没有细分。系统建议这个目录用来挂载额外的设备，如 U 盘、移动硬盘和其他操作系统的分区<br>&#x2F;misc&#x2F;挂载目录。系统建议用来挂载 NFS 服务的共享目录。虽然系统准备了三个默认挂载目录 &#x2F;media&#x2F;、&#x2F;mnt&#x2F;、&#x2F;misc&#x2F;，但是到底在哪个目录中挂载什么设备可以由管理员自己决定。<br>&#x2F;opt&#x2F;第三方安装的软件保存位置。这个目录是放置和安装其他软件的位置，手工安装的源码包软件都可以安装到这个目录中。<br>&#x2F;root&#x2F;root 的主目录。普通用户主目录在 &#x2F;home&#x2F; 下，root 主目录直接在“&#x2F;”下<br>&#x2F;sbin&#x2F;保存与系统环境设置相关的命令，只有 root 可以使用这些命令进行系统环境设置，但也有些命令可以允许普通用户查看<br>&#x2F;srv&#x2F;服务数据目录。一些系统服务启动之后，可以在这个目录中保存所需要的数据<br>&#x2F;tmp&#x2F;临时目录。系统存放临时文件的目录，在该目录下，所有用户都可以访问和写入。建议此目录中不能保存重要数据，最好每次开机都把该目录清空<br>&#x2F;lost+found&#x2F;当系统意外崩溃或意外关机时，产生的一些文件碎片会存放在这里。在系统启动的过程中，fsck 工具会检查这里，并修复已经损坏的文件系统。这个目录只在每个分区中出现，例如，&#x2F;lost+found 就是根分区的备份恢复目录，&#x2F;boot&#x2F;lost+found 就是 &#x2F;boot 分区的备份恢复目录<br>&#x2F;proc&#x2F;虚拟文件系统。该目录中的数据并不保存在硬盘上，而是保存到内存中。主要保存系统的内核、进程、外部设备状态和网络状态等。如 &#x2F;proc&#x2F;cpuinfo 是保存 CPU 信息的，&#x2F;proc&#x2F;devices 是保存设备驱动的列表的，&#x2F;proc&#x2F;net 是保存网络协议信息的<br>&#x2F;sys&#x2F;虚拟文件系统。和 &#x2F;proc&#x2F; 目录相似，该目录中的数据都保存在内存中，主要保存与内核相关的信息</p><h3 id="4-二级目录详细说明"><a href="#4-二级目录详细说明" class="headerlink" title="4 二级目录详细说明"></a>4 二级目录详细说明</h3><p>还有一些比较重要的二级目录我们也是需要去了解的，具体的说明如下：</p><p>&#x2F;usr子目录功能（作用）<br>&#x2F;usr&#x2F;bin&#x2F;存放系统命令，普通用户和超级用户都可以执行。这些命令和系统启动无关，在单用户模式下不能执行<br>&#x2F;usr&#x2F;sbin&#x2F;存放根文件系统不必要的系统管理命令，如多数服务程序，只有 root 可以使用。<br>&#x2F;usr&#x2F;lib&#x2F;应用程序调用的函数库保存位置<br>&#x2F;usr&#x2F;XllR6&#x2F;图形界面系统保存位置<br>&#x2F;usr&#x2F;local&#x2F;手工安装的软件保存位置。我们一般建议源码包软件安装在这个位置<br>&#x2F;usr&#x2F;share&#x2F;应用程序的资源文件保存位置，如帮助文档、说明文档和字体目录<br>&#x2F;usr&#x2F;src&#x2F;源码包保存位置。我们手工下载的源码包和内核源码包都可以保存到这里。<br>&#x2F;usr&#x2F;includeC&#x2F;C++ 等编程语言头文件的放置目录<br>&#x2F;var子目录功能（作用）<br>&#x2F;var&#x2F;lib&#x2F;程序运行中需要调用或改变的数据保存位置。如 MySQL 的数据库保存在 &#x2F;var&#x2F;lib&#x2F;mysql&#x2F; 目录中<br>&#x2F;var&#x2F;log&#x2F;登陆文件放置的目录，其中所包含比较重要的文件如 &#x2F;var&#x2F;log&#x2F;messages, &#x2F;var&#x2F;log&#x2F;wtmp 等。<br>&#x2F;var&#x2F;run&#x2F;一些服务和程序运行后，它们的 PID（进程 ID）保存位置<br>&#x2F;var&#x2F;spool&#x2F;里面主要都是一些临时存放，随时会被用户所调用的数据，例如 &#x2F;var&#x2F;spool&#x2F;mail&#x2F; 存放新收到的邮件，&#x2F;var&#x2F;spool&#x2F;cron&#x2F; 存放系统定时任务。<br>&#x2F;var&#x2F;www&#x2F;RPM 包安装的 Apache 的网页主目录<br>&#x2F;var&#x2F;nis和&#x2F;var&#x2F;ypNIS 服务机制所使用的目录，nis 主要记录所有网络中每一个 client 的连接信息；yp 是 linux 的 nis 服务的日志文件存放的目录<br>&#x2F;var&#x2F;tmp一些应用程序在安装或执行时，需要在重启后使用的某些文件，此目录能将该类文件暂时存放起来，完成后再行删除</p><h2 id="第三章-常用linux命令"><a href="#第三章-常用linux命令" class="headerlink" title="第三章 常用linux命令"></a>第三章 常用linux命令</h2><p>1 ls命令<br>ls 命令是Linux下最常用的指令之一。ls命令为英文单词 list 的缩写，正如英文单词 list 的意思，其功能是列出指定目录下的内容及其相关属性信息。</p><p>ls [选项] [文件]</p><p>常用参数：</p><p>-a显示所有文件及目录 (包括以“.”开头的隐藏文件)<br>-l使用长格式列出文件及目录信息<br>-r将文件以相反次序显示(默认依英文字母次序)<br>-t根据最后的修改时间排序<br>-A同 -a ，但不列出 “.” (当前目录) 及 “…” (父目录)<br>-S根据文件大小排序<br>-R递归列出所有子目录<br>参考实例</p><p>列出所有文件(包括隐藏文件)：</p><p>[root@jubot ~]# ls -a<br>1<br>列出文件的详细信息：</p><p>[root@jubot ~]# ls -l<br>1<br>列出根目录(&#x2F;)下的所有目录：</p><p>[root@jubot ~]# ls &#x2F;<br>1<br>列出当前工作目录下所有名称是 “s” 开头的文件 :</p><p>[root@jubot ~]# ls -ltr s*<br>1<br>列出 &#x2F;bin 目录下的所有目录及文件的详细信息 :</p><p>[root@jubot ~]# ls -lR &#x2F;bin<br>1<br>列出当前工作目录下所有文件及目录并以文件的大小进行排序 :</p><p>[root@jubot ~]# ls -AS<br>1<br>2 mkdir命令<br>mkdir命令是“make directories”的缩写，用来创建目录。</p><p>注意：默认状态下，如果要创建的目录已经存在，则提示已存在，而不会继续创建目录。 所以在创建目录时，应保证新建的目录与它所在目录下的文件没有重名。</p><p>语法格式 : mkdir [参数] [目录]</p><p>常用参数：</p><p>-p递归创建多级目录<br>-m建立目录的同时设置目录的权限<br>-z设置安全上下文<br>-v显示目录的创建过程</p><h2 id="参考实例"><a href="#参考实例" class="headerlink" title="参考实例"></a>参考实例</h2><p>在工作目录下，建立一个名为 dir 的子目录：</p><p>[root@jubot ~]# mkdir dir<br>1<br>在目录&#x2F;usr&#x2F;jubot下建立子目录dir，并且设置文件属主有读、写和执行权限，其他人无权访问</p><p>[root@jubot ~]# mkdir -m 700 &#x2F;usr&#x2F;jubot&#x2F;dir<br>1<br>同时创建子目录dir1，dir2，dir3：</p><p>[root@jubot ~]# mkdir dir1 dir2 dir3<br>1<br>递归创建目录：</p><p>[root@jubot ~]# mkdir -p jubot&#x2F;dir<br>1<br>3 cd命令<br>cd命令是”change directory”中单词的首字母缩写，其英文释义是改变目录，所以该命令的功能是从当前目录切换到指定目录。</p><p>其中目录的路径可分为绝对路径和相对路径。若目录名称省略，则切换至使用者的用户目录(也就是刚登录时所在的目录)。</p><p>另外，“~”也表示为用户目录的意思，“.”则是表示目前所在的目录，“…”则表示当前目录位置的上一级目录。</p><p><strong>语法格式：</strong>cd [参数] [目录名]</p><p>常用参数：</p><p>-P如果切换的目标目录是一个符号链接，则直接切换到符号链接指向的目标目录<br>-L如果切换的目标目录是一个符号链接，则直接切换到符号链接名所在的目录<br>–仅使用”-“选项时，当前目录将被切换到环境变量”OLDPWD”对应值的目录<br>~切换至当前用户目录<br>…切换至当前目录位置的上一级目录<br>参考实例</p><p>将当前工作目录切换到dir目录，并使用pwd命令查看当前目录：</p><p>[root@jubot ~]# cd dir<br>[root@jubot dir]# pwd<br>&#x2F;root&#x2F;dir</p><p>使用“cd ~ ”和“cd … ”命令进行目录的切换操作，并使用pwd命令查看当前目录：</p><p>注意：使用“cd ~ ”命令可以直接切换到当前用户目录，而“cd … ”是切换到上一级目录。</p><p>[root@jubot dir]# pwd<br>&#x2F;root&#x2F;dir<br>[root@jubot dir]# cd ~<br>[root@jubot ~]# pwd<br>&#x2F;root<br>[root@jubot dir]# pwd<br>&#x2F;root&#x2F;dir<br>[root@jubot dir]# cd ..<br>[root@jubot dir]# pwd<br>&#x2F;root</p><p>使用“cd …&#x2F;…”命令返回上两级目录：</p><p>[root@jubot dir_2]# pwd<br>&#x2F;root&#x2F;dir&#x2F;dir_1&#x2F;dir_2<br>[root@jubot dir_2]# cd ..&#x2F;..<br>[root@jubot dir]# pwd<br>&#x2F;root&#x2F;dir</p><p>使用“cd”命令返回当前用户目录。“cd – ” 命令返回上一次所在目录：</p><p>[root@jubot dir_2]# pwd<br>&#x2F;root&#x2F;dir&#x2F;dir_1&#x2F;dir_2<br>[root@jubot dir_2]# cd<br>[root@jubot ~]# pwd<br>&#x2F;root<br>[root@jubot ~]# cd -<br>&#x2F;root&#x2F;dir&#x2F;dir_1&#x2F;dir_2<br>[root@jubot dir_2]# pwd<br>&#x2F;root&#x2F;dir&#x2F;dir_1&#x2F;dir_2</p><p>4 touch命令<br>touch命令有两个功能：一是创建新的空文件，二是改变已有文件的时间戳属性。</p><p>touch命令会根据当前的系统时间更新指定文件的访问时间和修改时间。如果文件不存在，将会创建新的空文件，除非指定了”-c”或”-h”选项。</p><p>注意：在修改文件的时间属性的时候，用户必须是文件的属主，或拥有写文件的访问权限。</p><p><strong>语法格式：</strong>touch [参数] [文件]</p><p>常用参数：</p><p>-a改变档案的读取时间记录<br>-m改变档案的修改时间记录<br>-r使用参考档的时间记录，与 –file 的效果一样<br>-c不创建新文件<br>-d设定时间与日期，可以使用各种不同的格式<br>-t设定档案的时间记录，格式与 date 命令相同<br>–no-create不创建新文件<br>–help显示帮助信息<br>–version列出版本讯息<br>参考实例</p><p>创建空文件：</p><p>[root@jubot ~]# touch file.txt<br>1<br>批量创建文件：</p><p>[root@jubot ~]# touch file{1..5}.txt<br>[root@jubot ~]# ls<br>file1.txt file2.txt file3.txt file4.txt file5.txt<br>1<br>2<br>3<br>修改文件的access(访问)时间：</p><p>[root@jubot ~]# stat file.txt<br>   File: file.txt<br>   Size: 0               Blocks: 0          IO Block: 512    regular empty file<br> Device: 2h&#x2F;2d   Inode: 87538717757135273  Links: 1<br> Access: (0666&#x2F;-rw-rw-rw-)  Uid: ( 1000&#x2F;  root)   Gid: ( 1000&#x2F;  root)<br> Access: 2019-04-07 00:25:34.729216500 +0800<br> Modify: 2019-04-07 00:25:34.729216500 +0800<br> Change: 2019-04-07 00:25:34.729216500 +0800<br>  Birth: -</p><p>[root@jubot ~]# touch -a file.txt</p><p>[root@jubot ~]# stat file.txt<br>   File: file.txt<br>   Size: 0               Blocks: 0          IO Block: 512    regular empty file<br> Device: 2h&#x2F;2d   Inode: 87538717757135273  Links: 1<br> Access: (0666&#x2F;-rw-rw-rw-)  Uid: ( 1000&#x2F;  root)   Gid: ( 1000&#x2F;  root)<br> Access: 2019-04-07 00:26:13.004116000 +0800<br> Modify: 2019-04-07 00:25:34.729216500 +0800<br> Change: 2019-04-07 00:26:13.004116000 +0800<br>  Birth: -</p><p>5 cat命令<br>Linux系统中有很多个用于查看文件内容的命令，每个命令又都有自己的特点，比如这个cat命令就是用于查看内容较少的纯文本文件的。cat这个命令也很好记，因为cat在英语中是“猫”的意思。</p><p>注意：当文件内容较大时，文本内容会在屏幕上快速闪动（滚屏），用户往往看不清所显示的具体内容。因此对于较长文件内容可以按Ctrl+S键，停止滚屏；以及Ctrl+Q键可以恢复滚屏；而按Ctrl+C（中断）键则可以终止该命令的执行。或者对于大文件，干脆用more命令吧！</p><p><strong>语法格式：</strong>cat [参数] [文件]</p><p>常用参数：</p><p>-n显示行数（空行也编号）<br>-s显示行数（多个空行算一个编号）<br>-b显示行数（空行不编号）<br>-E每行结束处显示$符号<br>-T将TAB字符显示为 ^I符号<br>-v使用 ^ 和 M- 引用，除了 LFD 和 TAB 之外<br>-e等价于”-vE”组合<br>-t等价于”-vT”组合<br>-A等价于 -vET组合<br>–help显示帮助信息<br>–version显示版本信息<br>参考实例</p><p>查看文件的内容：</p><p>[root@jubot ~]# cat filename.txt<br>1<br>查看文件的内容，并显示行数编号：</p><p>[root@jubot ~]# cat -n filename.txt<br>1<br>查看文件的内容，并添加行数编号后输出到另外一个文件中：</p><p>[root@jubot ~]# cat -n jubot.log &gt; linuxprobe.log<br>1<br>清空文件的内容：</p><p>[root@jubot ~]# cat &#x2F;dev&#x2F;null &gt; &#x2F;root&#x2F;filename.txt<br>1<br>持续写入文件内容，碰到EOF符后结束并保存：</p><p>[root@jubot ~]# cat &gt; filename.txt &lt;&lt;EOF</p><blockquote><p>Hello, World<br>Linux!<br>EOF<br>1<br>2<br>3<br>4<br>将软盘设备制作成镜像文件：</p></blockquote><p>[root@jubot ~]# cat &#x2F;dev&#x2F;fd0 &gt; fdisk.iso<br>1<br>6 cp命令<br>cp命令可以理解为英文单词copy的缩写，其功能为复制文件或目录。</p><p>cp命令可以将多个文件复制到一个具体的文件名或一个已经存在的目录下，也可以同时复制多个文件到一个指定的目录中。</p><p><strong>语法格式：</strong>cp [参数] [文件]</p><p>常用参数：</p><p>-f若目标文件已存在，则会直接覆盖原文件<br>-i若目标文件已存在，则会询问是否覆盖<br>-p保留源文件或目录的所有属性<br>-r递归复制文件和目录<br>-d当复制符号连接时，把目标文件或目录也建立为符号连接，并指向与源文件或目录连接的原始文件或目录<br>-l对源文件建立硬连接，而非复制文件<br>-s对源文件建立符号连接，而非复制文件<br>-b覆盖已存在的文件目标前将目标文件备份<br>-v详细显示cp命令执行的操作过程<br>-a等价于“dpr”选项<br>参考实例</p><p>复制目录：</p><p>[root@jubot ~]# cp -R dir1 dir2&#x2F;<br>1<br>将文件test1改名为test2：</p><p>[root@jubot ~]# cp -f test1 test2<br>1<br>复制多个文件：</p><p>[root@jubot ~]# cp -r file1 file2 file3 dir<br>1<br>交互式地将目录 &#x2F;usr&#x2F;jubot 中的所有.c文件复制到目录 dir 中：</p><p>[root@jubot ~]# cp -r &#x2F;usr&#x2F;jubot&#x2F;*.c dir<br>1<br>7 mv命令<br>mv命令是“move”单词的缩写，其功能大致和英文含义一样，可以移动文件或对其改名。</p><p>这是一个使用频率超高的文件管理命令，我们需要特别留意它与复制的区别：mv与cp的结果不同。mv命令好像文件“搬家”，文件名称发生改变，但个数并未增加。而cp命令是对文件进行复制操作，文件个数是有增加的。</p><p><strong>语法格式：</strong>mv [参数]</p><p>常用参数：</p><p>-i若存在同名文件，则向用户询问是否覆盖<br>-f覆盖已有文件时，不进行任何提示<br>-b当文件存在时，覆盖前为其创建一个备份<br>-u当源文件比目标文件新，或者目标文件不存在时，才执行移动此操作<br>参考实例</p><p>将文件file_1重命名为file_2：</p><p>[root@jubot ~]# mv file_1 file_2<br>1<br>将文件file移动到目录dir中 ：</p><p>[root@jubot ~]# mv file &#x2F;dir<br>1<br>将目录dir1移动目录dir2中（前提是目录dir2已存在，若不存在则改名)：</p><p>[root@jubot ~]# mv &#x2F;dir1 &#x2F;dir2<br>1<br>将目录dir1下的文件移动到当前目录下：</p><p>[root@jubot ~]# mv &#x2F;dir1&#x2F;* .<br>1<br>8 rm命令<br>rm是常用的命令，该命令的功能为删除一个目录中的一个或多个文件或目录，它也可以将某个目录及其下的所有文件及子目录均删除。对于链接文件，只是删除了链接，原有文件均保持不变。 rm也是一个危险的命令，使用的时候要特别当心，尤其对于新手，否则整个系统就会毁在这个命令（比如在&#x2F;（根目录）下执行rm * -rf）。所以，我们在执行rm之前最好先确认一下在哪个目录，到底要删除什么东西，操作时保持高度清醒的头脑。</p><p><strong>语法格式：</strong>rm [参数] [文件]</p><p>常用参数：</p><p>-f忽略不存在的文件，不会出现警告信息<br>-i删除前会询问用户是否操作<br>-r&#x2F;R递归删除<br>-v显示指令的详细执行过程<br>参考实例</p><p>删除前逐一询问确认：</p><p>[root@jubot ~]# rm -i test.txt.bz2<br>rm: remove regular file &#96;test.txt.bz2’?<br>1<br>2<br>直接删除，不会有任何提示：</p><p>[root@jubot ~]# rm -f test.txt.bz2<br>1<br>递归删除目录及目录下所有文件：</p><p>[root@jubot ~]# mkdir &#x2F;data&#x2F;log<br>[root@jubot ~]# rm -rf &#x2F;data&#x2F;log<br>1<br>2<br>删除当前目录下所有文件：</p><p>[root@jubot ~]# rm -rf *<br>1<br>清空系统中所有的文件（谨慎）：</p><p>[root@jubot ~]# rm -rf &#x2F;*<br>1<br>9 find命令<br>find命令可以根据给定的路径和表达式查找的文件或目录。find参数选项很多，并且支持正则，功能强大。和管道结合使用可以实现复杂的功能，是系统管理者和普通用户必须掌握的命令。</p><p>find如不加任何参数，表示查找当前路径下的所有文件和目录，如果服务器负载比较高尽量不要在高峰期使用find命令，find命令模糊搜索还是比较消耗系统资源的。</p><p>语法格式：find [参数] [路径] [查找和搜索范围]</p><p>常用参数：</p><p>-name按名称查找<br>-size按大小查找<br>-user按属性查找<br>-type按类型查找<br>-iname忽略大小写<br>参考实例</p><p>使用-name参数查看&#x2F;etc目录下面所有的.conf结尾的配置文件：</p><p>[root@jubot ~]# find &#x2F;etc -name “*.conf<br>1<br>使用-size参数查看&#x2F;etc目录下面大于1M的文件：</p><p>[root@jubot ~]# find &#x2F;etc -size +1M<br>1<br>查找当前用户主目录下的所有文件：</p><p>[root@jubot ~]# find $HOME -print<br>1<br>列出当前目录及子目录下所有文件和文件夹：</p><p>[root@jubot ~]# find .<br>1<br>在&#x2F;home目录下查找以.txt结尾的文件名：</p><p>[root@jubot ~]# find &#x2F;home -name “*.txt”<br>1<br>在&#x2F;var&#x2F;log目录下忽略大小写查找以.log结尾的文件名：</p><p>[root@jubot ~]# find &#x2F;var&#x2F;log -iname “*.log”<br>1<br>搜索超过七天内被访问过的所有文件：</p><p>[root@jubot ~]# find . -type f -atime +7<br>1<br>搜索访问时间超过10分钟的所有文件：</p><p>[root@jubot ~]# find . -type f -amin +10<br>1<br>找出&#x2F;home下不是以.txt结尾的文件：</p><p>[root@jubot ~]# find &#x2F;home ! -name “*.txt”<br>1<br>10 grep命令<br>grep是“global search regular expression and print out the line”的简称，意思是全面搜索正则表达式，并将其打印出来。这个命令可以结合正则表达式使用，它也是linux使用最为广泛的命令。</p><p>grep命令的选项用于对搜索过程的补充，而其命令的模式十分灵活，可以是变量、字符串、正则表达式。需要注意的是：一当模式中包含了空格，务必要用双引号将其引起来。</p><p>linux系统支持三种形式的grep命令，第一种：grep，标准，模仿的代表。第二种：egrep，简称扩展grep命令，其实和grep -E等价，支持基本和扩展的正则表达式。第三种：fgrep，简称快速grep命令，其实和grep -F等价，不支持正则表达式，按照字符串表面意思进行匹配。</p><p>语法格式： grep [参数]</p><p>常用参数：</p><p>-i搜索时，忽略大小写<br>-c只输出匹配行的数量<br>-l只列出符合匹配的文件名，不列出具体的匹配行<br>-n列出所有的匹配行，显示行号<br>-h查询多文件时不显示文件名<br>-s不显示不存在、没有匹配文本的错误信息<br>-v显示不包含匹配文本的所有行<br>-w匹配整词<br>-x匹配整行<br>-r递归搜索<br>-q禁止输出任何结果，已退出状态表示搜索是否成功<br>-b打印匹配行距文件头部的偏移量，以字节为单位<br>-o与-b结合使用，打印匹配的词据文件头部的偏移量，以字节为单位<br>参考实例</p><p>支持多文件查询并支持使用通配符：</p><p>[root@jubot ~]# grep zwx file_* &#x2F;etc&#x2F;hosts<br>file_1:zwx<br>file_1:zwx<br>file_1:zwxddkjflkdjfdlkfjlsdkj<br>file_2:zwx<br>file_4:dkfjlzwxejfkje<br>file_4:zwx djfkdjf<br>file_4:zwxedkfgj<br>输出匹配字符串行的数量：</p><p>[root@jubot ~]$ grep -c zwx file_*<br> file_1:2<br> file_2:1<br> file_3:0</p><p>列出所有的匹配行，并显示行号：</p><p>[root@jubot ~]# grep -n zwx file_*<br>file_1:1:zwx<br>file_1:4:zwx<br>file_1:10:zwxddkjflkdjfdlkfjlsdkj<br>file_2:2:zwx<br>file_4:3:dkfjlzwxejfkje<br>file_4:4:zwx djfkdjf<br>file_4:5:zwxedkfgj</p><p>显示不包含模式的所有行：</p><p>[root@jubot ~]# grep -vc zwx file_*<br>file_1:7<br>file_2:4<br>file_3:5<br>file_4:2<br>1<br>2<br>3<br>4<br>5<br>不再显示文件名：</p><p>[root@jubot ~]# grep -h zwx file_*<br>zwx<br>zwx<br>zwxddkjflkdjfdlkfjlsdkj<br>zwx<br>dkfjlzwxejfkje</p><p>只列出符合匹配的文件名，不列出具体匹配的行：</p><p>[root@jubot ~]# grep -l zwx file_*<br>file_1<br>file_2<br>file_4</p><p>不显示不存在或无匹配的文本信息：</p><p>[root@jubot ~]# grep  -s zwx file1 file_1<br>file_1:zwx<br>file_1:zwx<br>file_1:zwxddkjflkdjfdlkfjlsdkj<br>[root@jubot ~]# grep zwx file1 file_1<br>grep: file1: No such file or directory<br>file_1:zwx<br>file_1:zwx<br>file_1:zwxddkjflkdjfdlkfjlsdkj</p><p>递归搜索，不仅搜索当前目录，还搜索子目录：</p><p>[root@jubot ~]# grep -r zwx file_2 *<br>file_2:zwx<br>anaconda-ks.cfg:user –name&#x3D;zwx –gecos&#x3D;”zwx”<br>file_1:zwx<br>file_1:zwx<br>file_1:zwxddkjflkdjfdlkfjlsdkj<br>file_2:zwx<br>file_4:dkfjlzwxejfkje<br>file_4:zwx djfkdjf<br>file_4:zwxedkfgj<br>initial-setup-ks.cfg:user –name&#x3D;zwx –gecos&#x3D;”zwx”</p><p>匹配整词，以字面意思去解释他，相当于精确匹配：</p><p>[root@jubot ~]# grep zw* file_1<br>zwx<br>zwx<br>zdkfjeld<br>zw<br>ze<br>zwxddkjflkdjfdlkfjlsdkj<br>[root@jubot ~]# grep -w zw* file_1<br>zw                         </p><p>匹配整行，文件中的整行与模式匹配时，才打印出来：</p><p>[root@jubot ~]# grep -x zwx file_*<br>file_1:zwx<br>file_1:zwx<br>file_2:zwx<br>1<br>2<br>3<br>4<br>不输出任何结果，已退出状态表示结果：</p><p> [root@jubot ~]# grep -q zwx file_1<br> [root@jubot ~]# echo $?<br> 0<br> [root@jubot ~]# grep -q zwx file_5<br> [root@jubot ~]# echo $?<br> 1<br> [root@jubot ~]# grep -q zwx file5<br> grep: file5: No such file or directory<br> [root@jubot ~]# echo $?<br> 2<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>查找一个文件中的空行和非空行：</p><p>[root@jubot ~]# grep -c ^$ file_1<br> 4<br> [root@jubot ~]# grep -c ^[^$] file_1<br> 15<br>1<br>2<br>3<br>4<br>匹配任意或重复字符用“.”或“*”符号来实现：</p><p>[root@jubot ~]# grep ^z.x file_1<br>zwx<br>zwx<br>zwxddkjflkdjfdlkfjlsdkj<br>[root@jubot ~]# grep ^z* file_6<br>zwx<br>dfkjd<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>11 pwd命令<br>pwd命令是“print working directory”中每个单词的首字母缩写，其功能正如所示单词一样，为打印工作目录，即显示当前工作目录的绝对路径。</p><p>在实际工作中，我们经常会在不同目录之间进行切换，为了防止“迷路”，我们可以使用pwd命令快速查看当前我们所在的目录路径。</p><p>语法格式: pwd [参数]</p><p>常用参数：</p><p>-L显示逻辑路径<br>参考实例</p><p>查看当前工作目录路径：</p><p>[root@jubot ~]# pwd<br>&#x2F;home&#x2F;jubot<br>1<br>2<br>12 ln命令<br>ln命令是linux系统中一个非常重要命令，英文全称是“link”，即链接的意思，它的功能是为某一个文件在另外一个位置建立一个同步的链接。 一种是hard link，又称为硬链接；另一种是symbolic link，又称为符号链接。</p><p>通俗一点理解，可以把硬链接当成源文件的副本，他和源文件一样的大小，但是事实上却不占任何空间。符号链接可以理解为类似windows一样的快捷方式。</p><p>符号链接 ：</p><p>\1. 符号链接以路径的形式存在，类似于Windows操作系统中的快捷方式。<br>\2. 符号链接可以跨文件系统 ，硬链接不可以。<br>\3. 符号链接可以对一个不存在的文件名进行链接，硬链接不可以。<br>\4. 符号链接可以对目录进行链接，硬链接不可以。<br>硬链接：</p><p>1.硬链接以文件副本的形式存在，但不占用实际空间。<br>\2. 硬链接不允许给目录创建硬链接。<br>3.硬链接只有在同一个文件系统中才能创建。<br>语法格式： ln [参数] [源文件或目录] [目标文件或目录]</p><p>常用参数：</p><p>-b为每个已存在的目标文件创建备份文件<br>-d此选项允许“root”用户建立目录的硬链接<br>-f强制创建链接，即使目标文件已经存在<br>-n把指向目录的符号链接视为一个普通文件<br>-i交互模式，若目标文件已经存在，则提示用户确认进行覆盖<br>-s对源文件建立符号链接，而非硬链接<br>-v详细信息模式，输出指令的详细执行过程<br>参考实例</p><p>为源文件file.txt创建硬链接file_1：</p><p>[root@jubot ~ ]# ln &#x2F;root&#x2F;dir&#x2F;file.txt .&#x2F;file_1<br>1<br>使用ln命令的“-s”参数来创建目录的符号链接，并使用ls命令来查看链接文件的详细信息：</p><p>[root@jubot ~]# ln -s dir file<br>[root@jubot ~]# ls -l<br>总用量 4<br>-rw——-. 1 root root 1138 3月  11 14:48 anaconda-ks.cfg<br>drwxr-xr-x. 2 root root   36 4月   3 08:47 test<br>lrwxrwxrwx. 1 root root    4 4月   3 08:54 file -&gt; dir<br>1<br>2<br>3<br>4<br>5<br>6<br>使用ln命令的“-v”参数来输出命令的详细执行过程：</p><p>[root@jubot ~]# ln -v &#x2F;root&#x2F;dir&#x2F;file.txt .&#x2F;file_1<br> ‘.&#x2F;file_1’ &#x3D;&gt; ‘&#x2F;root&#x2F;dir&#x2F;file.txt’<br>1<br>2<br>使用ln命令的“-b”命令来创建目标文件的备份文件，并使用ls命令来查看：</p><p>[root@jubot <del>]# ln -b &#x2F;root&#x2F;dir&#x2F;file.txt .&#x2F;file_1<br>[root@jubot ~]# ls<br> anaconda-ks.cfg  file_1  file_1</del>  dir<br>1<br>2<br>3<br>13 tar命令<br>tar命令可以为linux的文件和目录创建档案。利用tar，可以为某一特定文件创建档案（备份文件），也可以在档案中改变文件，或者向档案中加入新的文件。</p><p>tar最初被用来在磁带上创建档案，现在，用户可以在任何设备上创建档案。利用tar命令，可以把一大堆的文件和目录全部打包成一个文件，这对于备份文件或将几个文件组合成为一个文件以便于网络传输是非常有用的。</p><p><strong>语法格式：</strong>tar [参数] [文件或目录]</p><p>常用参数：</p><p>-A新增文件到以存在的备份文件<br>-B设置区块大小<br>-c建立新的备份文件<br>-C &lt;目录&gt;切换工作目录，先进入指定目录再执行压缩&#x2F;解压缩操作，可用于仅压缩特定目录里的内容或解压缩到特定目录<br>-d记录文件的差别<br>-x从归档文件中提取文件<br>-t列出备份文件的内容<br>-z通过gzip指令压缩&#x2F;解压缩文件，文件名最好为*.tar.gz<br>-Z通过compress指令处理备份文件<br>-f&lt;备份文件&gt;指定备份文件<br>-v显示指令执行过程<br>-r添加文件到已经压缩的文件<br>-u添加改变了和现有的文件到已经存在的压缩文件<br>-j通过bzip2指令压缩&#x2F;解压缩文件，文件名最好为*.tar.bz2<br>-v显示操作过程<br>-l文件系统边界设置<br>-k保留原有文件不覆盖<br>-m保留文件不被覆盖<br>-w确认压缩文件的正确性<br>-p保留原来的文件权限与属性<br>-P使用文件名的绝对路径，不移除文件名称前的“&#x2F;”号<br>-N &lt;日期格式&gt;只将较指定日期更新的文件保存到备份文件里<br>– -exclude&#x3D;&lt;范本样式&gt;排除符合范本样式的文件<br>– -remove-files归档&#x2F;压缩之后删除源文件<br>参考实例</p><p>将所有.jpg的文件打成一个名为all.tar的包：</p><p>[root@jubot ~]# tar -cf all.tar *.jpg<br>1<br>打包文件之后删除源文件：</p><p>[root@jubot ~]# tar -cvf jubot.tar jubot –remove-files<br>1<br>打包文件以后，以 gzip 压缩：</p><p>[root@jubot ~]# tar -zcvf log.tar.gz jubot.log<br>1<br>14 apt-get命令<br>apt-get命令是Debian Linux发行版中的APT软件包管理工具。所有基于Debian的发行都使用这个包管理系统。deb包可以把一个应用的文件包在一起，大体就如同Windows上的安装文件。</p><p><strong>语法格式：</strong>apt-get [参数]</p><p>常用参数：</p><p>-c指定配置文件<br>参考实例</p><p>更新软件：</p><p>[root@jubot ~]# apt-get update<br>1<br>安装vim：</p><p>[root@jubot ~]# apt-get install vim<br>1<br>安装nginx：</p><p>[root@jubot ~]# apt-get install nginx<br>1<br>卸载vim：</p><p>[root@jubot ~]# apt-get remove vim<br>1<br>卸载软件（删除配置文件）：</p><p>[root@jubot ~]# apt-get –purge remove packagename<br>1<br>15 df命令<br>df命令的英文全称即“Disk Free”，顾名思义功能是用于显示系统上可使用的磁盘空间。默认显示单位为KB，建议使用“df -h”的参数组合，根据磁盘容量自动变换合适的单位，更利于阅读。</p><p>日常普遍用该命令可以查看磁盘被占用了多少空间、还剩多少空间等信息。</p><p>语法格式： df [参数] [指定文件]</p><p>常用参数：</p><p>-a显示所有系统文件<br>-B &lt;块大小&gt;指定显示时的块大小<br>-h以容易阅读的方式显示<br>-H以1000字节为换算单位来显示<br>-i显示索引字节信息<br>-k指定块大小为1KB<br>-l只显示本地文件系统<br>-t &lt;文件系统类型&gt;只显示指定类型的文件系统<br>-T输出时显示文件系统类型<br>– -sync在取得磁盘使用信息前，先执行sync命令<br>参考实例</p><p>显示磁盘分区使用情况：</p><p>[root@jubot ~]# df<br>文件系统                             1K-块    已用     可用   已用% 挂载点<br>devtmpfs                           1980612       0  1980612    0% &#x2F;dev<br>tmpfs                              1994756       0  1994756    0% &#x2F;dev&#x2F;shm<br>tmpfs                              1994756    1040  1993716    1% &#x2F;run<br>tmpfs                              1994756       0  1994756    0% &#x2F;sys&#x2F;fs&#x2F;cgroup<br>&#x2F;dev&#x2F;mapper&#x2F;fedora_linuxhell-root 15718400 2040836 13677564   13% &#x2F;<br>tmpfs                              1994756       4  1994752    1% &#x2F;tmp<br>&#x2F;dev&#x2F;sda1                           999320  128264   802244   14% &#x2F;boot<br>tmpfs                               398948       0   398948   0% &#x2F;run&#x2F;user&#x2F;0</p><p>以容易阅读的方式显示磁盘分区使用情况：</p><p>[root@jubot ~]# df -h<br> 文件系统                           容量   已用   可用  已用% 挂载点<br> devtmpfs                           1.9G     0  1.9G    0% &#x2F;dev<br> tmpfs                              2.0G     0  2.0G    0% &#x2F;dev&#x2F;shm<br> tmpfs                              2.0G  1.1M  2.0G    1% &#x2F;run<br> tmpfs                              2.0G     0  2.0G    0% &#x2F;sys&#x2F;fs&#x2F;cgroup<br> &#x2F;dev&#x2F;mapper&#x2F;fedora_linuxhell-root   15G  2.0G   14G   13% &#x2F;<br> tmpfs                              2.0G  4.0K  2.0G    1% &#x2F;tmp<br> &#x2F;dev&#x2F;sda1                          976M  126M  784M   14% &#x2F;boot<br> tmpfs                              390M     0  390M    0% &#x2F;run&#x2F;user&#x2F;0</p><p>显示指定文件所在分区的磁盘使用情况：</p><p>[root@jubot ~]# df &#x2F;etc&#x2F;dhcp<br>文件系统                             1K-块    已用     可用   已用% 挂载点<br>&#x2F;dev&#x2F;mapper&#x2F;fedora_jubot-root 15718400 2040836 13677564   13% &#x2F;<br>1<br>2<br>3<br>显示文件类型为ext4的磁盘使用情况：</p><p>[root@jubot ~]# df -t ext4<br>文件系统        1K-块   已用   可用    已用% 挂载点<br>&#x2F;dev&#x2F;sda1      999320 128264 802244   14% &#x2F;boot<br>1<br>2<br>3<br>16 zip命令<br>zip程序将一个或多个压缩文件与有关文件的信息(名称、路径、日期、上次修改的时间、保护和检查信息以验证文件完整性)一起放入一个压缩存档中。可以使用一个命令将整个目录结构打包到zip存档中。</p><p>对于文本文件来说，压缩比为2：1和3：1是常见的。zip只有一种压缩方法(通缩)，并且可以在不压缩的情况下存储文件。(如果添加了bzip 2支持，zip也可以使用bzip 2压缩，但这些条目需要一个合理的现代解压缩来解压缩。当选择bzip 2压缩时，它将通货紧缩替换为默认方法。)zip会自动为每个要压缩的文件选择更好的两个文件(通缩或存储，如果选择bzip2，则选择bzip2或Store)。</p><p><strong>语法格式：</strong>zip [参数] [文件]</p><p>常用参数：</p><p>-q不显示指令执行过程<br>-r递归处理，将指定目录下的所有文件和子目录一并处理<br>-z替压缩文件加上注释<br>-v显示指令执行过程或显示版本信息<br>-n&lt;字尾字符串&gt;不压缩具有特定字尾字符串的文件<br>参考实例</p><p>将 &#x2F;home&#x2F;html&#x2F; 这个目录下所有文件和文件夹打包为当前目录下的 html.zip：</p><p>[root@jubot ~]# zip -q -r html.zip &#x2F;home&#x2F;html<br>1<br>压缩文件 cp.zip 中删除文件 a.c：</p><p>[root@jubot ~]# zip -dv cp.zip a.c<br>1<br>把&#x2F;home目录下面的mydata目录压缩为mydata.zip：</p><p>[root@jubot ~]# zip -r mydata.zip mydata<br>1<br>把&#x2F;home目录下面的abc文件夹和123.txt压缩成为abc123.zip：</p><p>[root@jubot ~]# zip -r abc123.zip abc 123.txt<br>1<br>将 logs目录打包成 log.zip：</p><p>[root@jubot ~]# zip -r log.zip .&#x2F;logs<br>1<br>17 ping命令<br>ping命令主要用来测试主机之间网络的连通性，也可以用于。执行ping指令会使用ICMP传输协议，发出要求回应的信息，若远端主机的网络功能没有问题，就会回应该信息，因而得知该主机运作正常。</p><p>不过值得我们注意的是：Linux系统下的ping命令与Windows系统下的ping命令稍有不同。Windows下运行ping命令一般会发出4个请求就结束运行该命令；而Linux下不会自动终止，此时需要我们按CTR+C终止或者使用-c参数为ping命令指定发送的请求数目。</p><p><strong>语法格式：</strong>ping [参数] [目标主机]</p><p>常用参数：</p><p>-d使用Socket的SO_DEBUG功能<br>-c指定发送报文的次数<br>-i指定收发信息的间隔时间<br>-I使用指定的网络接口送出数据包<br>-l设置在送出要求信息之前，先行发出的数据包<br>-n只输出数值<br>-p设置填满数据包的范本样式<br>-q不显示指令执行过程<br>-R记录路由过程<br>-s设置数据包的大小<br>-t设置存活数值TTL的大小<br>-v详细显示指令的执行过程<br>参考实例</p><p>检测与jujon网站的连通性：</p><p>[root@jubot ~]# ping <a href="http://www.jujon.com/">www.jujon.com</a><br>1<br>连续ping4次：</p><p>[root@jubot ~]# ping -c 4 <a href="http://www.jujon.com/">www.jujon.com</a><br>1<br>设置次数为4，时间间隔为3秒：</p><p>[root@jubot ~]# ping -c 4 -i 3 <a href="http://www.jujon.com/">www.jujon.com</a><br>1<br>利用ping命令获取指定网站的IP地址：</p><p>[root@jubot ~]# ping -c 1 jujon.com | grep from | cut -d “ “ -f 4<br>220.181.57.216<br>1<br>2<br>18 curl命令<br>curl命令是一个利用URL规则在shell终端命令行下工作的文件传输工具；它支持文件的上传和下载，所以是综合传输工具，但按传统，习惯称curl为下载工具。</p><p>作为一款强力工具，curl支持包括HTTP、HTTPS、ftp等众多协议，还支持POST、cookies、认证、从指定偏移处下载部分文件、用户代理字符串、限速、文件大小、进度条等特征；做网页处理流程和数据检索自动化。</p><p><strong>语法格式：</strong>curl [参数] [网址]</p><p>常用参数：</p><p>-O把输出写到该文件中，保留远程文件的文件名<br>-u通过服务端配置的用户名和密码授权访问<br>参考实例</p><p>将下载的数据写入到文件，必须使用文件的绝对地址：</p><p>[root@jubot ~]# curl <a href="https://www.jujon.com/abc.txt">https://www.jujon.com/abc.txt</a> –silent -O<br>1<br>访问需要授权的页面时，可通过-u选项提供用户名和密码进行授权：</p><p>[root@jubot ~]# curl -u root <a href="https://www.jujon.com/">https://www.jujon.com/</a> Enter host password for user ‘root’:<br>1<br>19 ifconfig命令<br>ifconfig命令的英文全称是“network interfaces configuring”，即用于配置和显示Linux内核中网络接口的网络参数。用ifconfig命令配置的网卡信息，在网卡重启后机器重启后，配置就不存在。要想将上述的配置信息永远的存的电脑里，那就要修改网卡的配置文件了。</p><p><strong>语法格式：</strong>ifconfig [参数]</p><p>常用参数：</p><p>add&lt;地址&gt;设置网络设备IPv6的IP地址<br>del&lt;地址&gt;删除网络设备IPv6的IP地址<br>down关闭指定的网络设备<br>up启动指定的网络设备<br>IP地址指定网络设备的IP地址<br>参考实例</p><p>显示网络设备信息：</p><p>[root@jujon ~]# ifconfig<br>eth0   Link encap:Ethernet HWaddr 00:50:56:0A:0B:0C<br>       inet addr:192.168.0.3 Bcast:192.168.0.255 Mask:255.255.255.0<br>       inet6 addr: fe80::250:56ff:fe0a:b0c&#x2F;64 Scope:Link<br>       UP BROADCAST RUNNING MULTICAST MTU:1500 Metric:1<br>       RX packets:172220 errors:0 dropped:0 overruns:0 frame:0<br>       TX packets:132379 errors:0 dropped:0 overruns:0 carrier:0<br>       collisions:0 txqueuelen:1000<br>       RX bytes:87101880 (83.0 MiB) TX bytes:41576123 (39.6 MiB)<br>       Interrupt:185 Base address:0x2024<br>lo    Link encap:Local Loopback<br>      inet addr:127.0.0.1 Mask:255.0.0.0<br>      inet6 addr: ::1&#x2F;128 Scope:Host<br>      UP LOOPBACK RUNNING MTU:16436 Metric:1<br>      RX packets:2022 errors:0 dropped:0 overruns:0 frame:0<br>      TX packets:2022 errors:0 dropped:0 overruns:0 carrier:0<br>      collisions:0 txqueuelen:0<br>      RX bytes:2459063 (2.3 MiB)<br>      TX bytes:2459063 (2.3 MiB)</p><p>启动关闭指定网卡：</p><p>[root@jujon ~]# ifconfig eth0 down<br>[root@jujon ~]# ifconfig eth0 up<br>1<br>2<br>为网卡配置和删除IPv6地址：</p><p>[root@jujon ~]# ifconfig eth0 add 33ffe:3240:800:1005::2&#x2F;64<br>[root@jujon ~]# ifconfig eth0 del 33ffe:3240:800:1005::2&#x2F;64<br>1<br>2<br>用ifconfig修改MAC地址：</p><p>[root@jujon ~]# ifconfig eth0 down<br>[root@jujon ~]# ifconfig eth0 hw ether 00:AA:BB:CC:DD:EE<br>[root@jujon ~]# ifconfig eth0 up<br>[root@jujon ~]# ifconfig eth1 hw ether 00:1D:1C:1D:1E<br>[root@jujon ~]# ifconfig eth1 up</p><p>配置IP地址：</p><p>[root@jujon ~]# ifconfig eth0 192.168.1.56<br>[root@jujon ~]# ifconfig eth0 192.168.1.56 netmask 255.255.255.0<br>[root@jujon ~]# ifconfig eth0 192.168.1.56 netmask 255.255.255.0 broadcast 192.168.1.255<br>1<br>2<br>3<br>20 dd命令<br>dd命令用指定大小的块拷贝一个文件，并在拷贝的同时进行指定的转换。</p><p>注意：指定数字的地方若以下列字符结尾则乘以相应的数字：b&#x3D;512；c&#x3D;1；k&#x3D;1024；w&#x3D;2</p><p><strong>语法格式：</strong>dd [参数]</p><p>常用参数：</p><p>-v显示版本信息<br>-h显示帮助信息<br>参考实例</p><p>将本地的&#x2F;dev&#x2F;hdb整盘备份到&#x2F;dev&#x2F;hdd：</p><p>[root@jubot ~]# dd if&#x3D;&#x2F;dev&#x2F;hdb of&#x3D;&#x2F;dev&#x2F;hdd<br>1<br>将压缩的备份文件恢复到指定盘：</p><p>[root@jubot ~]# gzip -dc &#x2F;root&#x2F;image.gz | dd of&#x3D;&#x2F;dev&#x2F;hdb<br>1<br>由标准输入设备读入字符串，并将字符串转换成大写后，再输出到标准输出设备：</p><p>[root@jubot ~]# dd conv&#x3D;ucase<br>1<br>将testfile文件中的所有英文字母转换为大写，然后转成为testfile_1文件：</p><p>[root@jubot ~]# dd if&#x3D;testfile_2 of&#x3D;testfile_1 conv&#x3D;ucase<br>1<br>修复硬盘：</p><p>[root@jubot ~]# dd if&#x3D;&#x2F;dev&#x2F;sda of&#x3D;&#x2F;dev&#x2F;sda<br>1<br>第四章 Vim使用指南<br>Vim是从 vi 发展出来的一个文本编辑器。代码补完、编译及错误跳转等方便编程的功能特别丰富，在程序员中被广泛使用。</p><p>简单的来说， vi 是老式的字处理器，不过功能已经很齐全了，但是还是有可以进步的地方。 vim 则可以说是程序开发者的一项很好用的工具。</p><p>基本上 vi&#x2F;vim 共分为三种模式，分别是命令模式（Command mode），输入模式（Insert mode）和底线命令模式（Last line mode）。 这三种模式的作用分别是：</p><p>1 命令模式<br>用户刚刚启动 vi&#x2F;vim，便进入了命令模式。</p><p>此状态下敲击键盘动作会被Vim识别为命令，而非输入字符。比如我们此时按下i，并不会输入一个字符，i被当作了一个命令。</p><p>以下是常用的几个命令：</p><dl><dt>i 切换到输入模式，以输入字符。<br>x 删除当前光标所在处的字符。</dt><dd>切换到底线命令模式，以在最底一行输入命令。<br>若想要编辑文本：启动Vim，进入了命令模式，按下i，切换到输入模式。</dd></dl><p>命令模式只有一些最基本的命令，因此仍要依靠底线命令模式输入更多命令。</p><p>2 输入模式<br>在命令模式下按下i就进入了输入模式。</p><p>在输入模式中，可以使用以下按键：</p><p>字符按键以及Shift组合，输入字符<br>ENTER，回车键，换行<br>BACK SPACE，退格键，删除光标前一个字符<br>DEL，删除键，删除光标后一个字符<br>方向键，在文本中移动光标<br>HOME&#x2F;END，移动光标到行首&#x2F;行尾<br>Page Up&#x2F;Page Down，上&#x2F;下翻页<br>Insert，切换光标为输入&#x2F;替换模式，光标将变成竖线&#x2F;下划线<br>ESC，退出输入模式，切换到命令模式<br>3 底线命令模式<br>在命令模式下按下:（英文冒号）就进入了底线命令模式。</p><p>底线命令模式可以输入单个或多个字符的命令，可用的命令非常多。</p><p>在底线命令模式中，基本的命令有（已经省略了冒号）：</p><p>q 退出程序<br>w 保存文件<br>按ESC键可随时退出底线命令模式。</p><p>4 vi&#x2F;vim键盘图</p><p>5 vi&#x2F;vim 按键说明<br>除了上面简易范例的 i, Esc, :wq 之外，其实 vim 还有非常多的按键可以使用。</p><p>第一部分：一般模式可用的光标移动、复制粘贴、搜索替换等</p><p>移动光标的方法<br>h 或 向左箭头键(←)光标向左移动一个字符<br>j 或 向下箭头键(↓)光标向下移动一个字符<br>k 或 向上箭头键(↑)光标向上移动一个字符<br>l 或 向右箭头键(→)光标向右移动一个字符<br>如果你将右手放在键盘上的话，你会发现 hjkl 是排列在一起的，因此可以使用这四个按钮来移动光标。 如果想要进行多次移动的话，例如向下移动 30 行，可以使用 “30j” 或 “30↓” 的组合按键， 亦即加上想要进行的次数(数字)后，按下动作即可！<br>[Ctrl] + [f]屏幕『向下』移动一页，相当于 [Page Down]按键 (常用)<br>[Ctrl] + [b]屏幕『向上』移动一页，相当于 [Page Up] 按键 (常用)<br>[Ctrl] + [d]屏幕『向下』移动半页<br>[Ctrl] + [u]屏幕『向上』移动半页<br>+光标移动到非空格符的下一行<br>-光标移动到非空格符的上一行<br>n那个 n 表示『数字』，例如 20 。按下数字后再按空格键，光标会向右移动这一行的 n 个字符。例如 20 则光标会向后面移动 20 个字符距离。<br>0 或功能键[Home]这是数字『 0 』：移动到这一行的最前面字符处 (常用)<br>$ 或功能键[End]移动到这一行的最后面字符处(常用)<br>H光标移动到这个屏幕的最上方那一行的第一个字符<br>M光标移动到这个屏幕的中央那一行的第一个字符<br>L光标移动到这个屏幕的最下方那一行的第一个字符<br>G移动到这个档案的最后一行(常用)<br>nGn 为数字。移动到这个档案的第 n 行。例如 20G 则会移动到这个档案的第 20 行(可配合 :set nu)<br>gg移动到这个档案的第一行，相当于 1G 啊！ (常用)<br>nn 为数字。光标向下移动 n 行(常用)<br>搜索替换<br>&#x2F;word向光标之下寻找一个名称为 word 的字符串。例如要在档案内搜寻 vbird 这个字符串，就输入 &#x2F;vbird 即可！ (常用)<br>?word向光标之上寻找一个字符串名称为 word 的字符串。<br>n这个 n 是英文按键。代表重复前一个搜寻的动作。举例来说， 如果刚刚我们执行 &#x2F;vbird 去向下搜寻 vbird 这个字符串，则按下 n 后，会向下继续搜寻下一个名称为 vbird 的字符串。如果是执行 ?vbird 的话，那么按下 n 则会向上继续搜寻名称为 vbird 的字符串！<br>N这个 N 是英文按键。与 n 刚好相反，为『反向』进行前一个搜寻动作。 例如 &#x2F;vbird 后，按下 N 则表示『向上』搜寻 vbird 。<br>使用 &#x2F;word 配合 n 及 N 是非常有帮助的！可以让你重复的找到一些你搜寻的关键词！<br>:n1,n2s&#x2F;word1&#x2F;word2&#x2F;gn1 与 n2 为数字。在第 n1 与 n2 行之间寻找 word1 这个字符串，并将该字符串取代为 word2 ！举例来说，在 100 到 200 行之间搜寻 vbird 并取代为 VBIRD 则： 『:100,200s&#x2F;vbird&#x2F;VBIRD&#x2F;g』。(常用)<br>:1,$s&#x2F;word1&#x2F;word2&#x2F;g 或 :%s&#x2F;word1&#x2F;word2&#x2F;g从第一行到最后一行寻找 word1 字符串，并将该字符串取代为 word2 ！(常用)<br>:1,$s&#x2F;word1&#x2F;word2&#x2F;gc 或 :%s&#x2F;word1&#x2F;word2&#x2F;gc从第一行到最后一行寻找 word1 字符串，并将该字符串取代为 word2 ！且在取代前显示提示字符给用户确认 (confirm) 是否需要取代！(常用)<br>删除、复制与贴上<br>x, X在一行字当中，x 为向后删除一个字符 (相当于 [del] 按键)， X 为向前删除一个字符(相当于 [backspace] 亦即是退格键) (常用)<br>nxn 为数字，连续向后删除 n 个字符。举例来说，我要连续删除 10 个字符， 『10x』。<br>dd删除游标所在的那一整行(常用)<br>nddn 为数字。删除光标所在的向下 n 行，例如 20dd 则是删除 20 行 (常用)<br>d1G删除光标所在到第一行的所有数据<br>dG删除光标所在到最后一行的所有数据<br>d$删除游标所在处，到该行的最后一个字符<br>d0那个是数字的 0 ，删除游标所在处，到该行的最前面一个字符<br>yy复制游标所在的那一行(常用)<br>nyyn 为数字。复制光标所在的向下 n 行，例如 20yy 则是复制 20 行(常用)<br>y1G复制游标所在行到第一行的所有数据<br>yG复制游标所在行到最后一行的所有数据<br>y0复制光标所在的那个字符到该行行首的所有数据<br>y$复制光标所在的那个字符到该行行尾的所有数据<br>p, Pp 为将已复制的数据在光标下一行贴上，P 则为贴在游标上一行！ 举例来说，我目前光标在第 20 行，且已经复制了 10 行数据。则按下 p 后， 那 10 行数据会贴在原本的 20 行之后，亦即由 21 行开始贴。但如果是按下 P 呢？ 那么原本的第 20 行会被推到变成 30 行。 (常用)<br>J将光标所在行与下一行的数据结合成同一行<br>c重复删除多个数据，例如向下删除 10 行，[ 10cj ]<br>u复原前一个动作。(常用)<br>[Ctrl]+r重做上一个动作。(常用)<br>这个 u 与 [Ctrl]+r 是很常用的指令！一个是复原，另一个则是重做一次～ 利用这两个功能按键，你的编辑，嘿嘿！很快乐的啦！<br>.不要怀疑！这就是小数点！意思是重复前一个动作的意思。 如果你想要重复删除、重复贴上等等动作，按下小数点『.』就好了！ (常用)<br>第二部分：一般模式切换到编辑模式的可用的按钮说明</p><p>进入输入或取代的编辑模式<br>i, I进入输入模式(Insert mode)： i 为『从目前光标所在处输入』， I 为『在目前所在行的第一个非空格符处开始输入』。 (常用)<br>a, A进入输入模式(Insert mode)： a 为『从目前光标所在的下一个字符处开始输入』， A 为『从光标所在行的最后一个字符处开始输入』。(常用)<br>o, O进入输入模式(Insert mode)： 这是英文字母 o 的大小写。o 为『在目前光标所在的下一行处输入新的一行』； O 为在目前光标所在处的上一行输入新的一行！(常用)<br>r, R进入取代模式(Replace mode)： r 只会取代光标所在的那一个字符一次；R会一直取代光标所在的文字，直到按下 ESC 为止；(常用)<br>上面这些按键中，在 vi 画面的左下角处会出现『–INSERT–』或『–REPLACE–』的字样。 由名称就知道该动作了吧！！特别注意的是，我们上面也提过了，你想要在档案里面输入字符时， 一定要在左下角处看到 INSERT 或 REPLACE 才能输入喔！<br>[Esc]退出编辑模式，回到一般模式中(常用)<br>第三部分：一般模式切换到指令行模式的可用的按钮说明</p><p>指令行的储存、离开等指令<br>:w将编辑的数据写入硬盘档案中(常用)<br>:w!若文件属性为『只读』时，强制写入该档案。不过，到底能不能写入， 还是跟你对该档案的档案权限有关啊！<br>:q离开 vi (常用)<br>:q!若曾修改过档案，又不想储存，使用 ! 为强制离开不储存档案。<br>注意一下啊，那个惊叹号 (!) 在 vi 当中，常常具有『强制』的意思～<br>:wq储存后离开，若为 :wq! 则为强制储存后离开 (常用)<br>ZZ这是大写的 Z 喔！若档案没有更动，则不储存离开，若档案已经被更动过，则储存后离开！<br>:w [filename]将编辑的数据储存成另一个档案（类似另存新档）<br>:r [filename]在编辑的数据中，读入另一个档案的数据。亦即将 『filename』 这个档案内容加到游标所在行后面<br>:n1,n2 w [filename]将 n1 到 n2 的内容储存成 filename 这个档案。<br>:! command暂时离开 vi 到指令行模式下执行 command 的显示结果！例如 『:! ls &#x2F;home』即可在 vi 当中察看 &#x2F;home 底下以 ls 输出的档案信息！<br>vim 环境的变更<br>:set nu显示行号，设定之后，会在每一行的前缀显示该行的行号<br>:set nonu与 set nu 相反，为取消行号！<br>特别注意，在 vi&#x2F;vim 中，数字是很有意义的！数字通常代表重复做几次的意思！ 也有可能是代表去到第几个什么什么的意思。</p><p>举例来说，要删除 50 行，则是用 『50dd』 对吧！ 数字加在动作之前，如我要向下移动 20 行呢？那就是『20j』或者是『20↓』即可。</p><p>第五章 Linux常用快捷键<br>1 常用快捷键和命令结构图</p><p>如下为基本命令行提示符的样子，其中root为用户名，代表超级用户，oldbodyedu代表主机名，~代表当前目录，即家目录，#是超级用户提示符，如果是普通用户使用$。</p><p>2 基本快捷键的使用<br>（1）Tab，补充命令</p><p>不用输入完整的命令，输入命令前几个字母后Tab键，会自动补全命令提示。<br>（2）移动光标命令</p><p>Ctrl+A：移动光标到开头</p><p>Ctrl+E：移动光标到结尾</p><p>Ctrl+F：往光标后面移动一个字符</p><p>Ctrl+B：往光标前面移动一个字符</p><p>（3）剪切字符</p><p>Ctrl+K：剪切光标处到行尾的字符</p><p>Ctrl+U：剪切光标处到行首的字符</p><p>Ctrl+Y：将剪切的字符进行粘贴</p><p>（4）复制粘贴</p><p>Ctrl+Ins：复制</p><p>Shift+Ins：粘贴</p><p>（5）中断正在运行的命令行</p><p>Ctrl+C<br>（6）退出当前Xshell</p><p>Ctrl+D<br>（7）搜索命令行使用过的历史命令记录</p><p>Ctrl+R</p><p>（8）获取上一条命令的最后部分，用空格分隔开来的部分</p><p>ESC+.</p><p>（9）清屏命令</p><p>Ctrl+L</p><p>（10）暂停命令</p><p>Ctrl+Z</p><p>如上面sleep 40命令执行后一直动不了，光标一直在闪，按Ctrl+Z后就可以重新回到命令行</p><p>（11）锁屏</p><p>Ctrl+S<br>（12）解除锁屏</p><p>Ctrl+Q<br>（13） ！+命令 执行上一条命令，!! 执行上两条命令</p><p>3 快捷键集合<br>1、tab &#x2F;&#x2F;命令或路径等的补全键，linux用的最多的一个快捷键 ⭐️</p><p>2、ctrl+a &#x2F;&#x2F;光标迅速回到行首 ⭐️</p><p>3、ctrl+e &#x2F;&#x2F;光标迅速回到行尾 ⭐️</p><p>4、ctrl+f &#x2F;&#x2F;光标向右移动一个字符</p><p>5、ctrl+b &#x2F;&#x2F;光标向左移动一个字符</p><p>6、ctrl+insert &#x2F;&#x2F;复制命令行内容（mac系统不能使用）</p><p>7、shift+insert &#x2F;&#x2F;粘贴命令行内容（mac系统不能使用）</p><p>8、ctrl+k &#x2F;&#x2F;剪切（删除）光标处到行尾的所有字符 ⭐️</p><p>9、ctrl+u &#x2F;&#x2F;剪切（删除）光标处到行首的所有字符 ⭐️</p><p>10、ctrl+w &#x2F;&#x2F;剪切（删除）光标前的一个字符</p><p>11、ctrl+y &#x2F;&#x2F;粘贴 ctrl+k、ctrl+u、ctrl+w删除的字符 ⭐️</p><p>12、ctrl+c &#x2F;&#x2F;中断终端正在执行的任务并开启一个新的一行 ⭐️</p><p>13、ctrl+h &#x2F;&#x2F;删除光标前的一个字符（相当于退格键）</p><p>14、ctrl+d &#x2F;&#x2F;退出当前shell命令行，如果是切换过来的用户，则执行这个命令回退到原用户 ⭐️</p><p>15、ctrl+r &#x2F;&#x2F;搜索命令行使用过的历史命令记录 ⭐️</p><p>16、ctrl+g &#x2F;&#x2F;从ctrl+r的搜索历史命令模式中退出</p><p>17、ctrl+l &#x2F;&#x2F;清楚屏幕所有的内容，并开启一个新的一行 ⭐️</p><p>18、ctrl+s &#x2F;&#x2F;锁定终端，使之任何人无法输入</p><p>19、ctrl+q &#x2F;&#x2F;解锁ctrl+s的锁定状态</p><p>20、ctrl+z &#x2F;&#x2F;暂停在终端运行的任务,使用”fg”命令可以使暂停恢复 ⭐️</p><p>21、!! &#x2F;&#x2F;执行上一条命令 ⭐️</p><p>22、!pw &#x2F;&#x2F;这是一个例子，是执行以pw开头的命令，这里的pw可以换成任何已经执行过的字符 ⭐️</p><p>23、!pw:p &#x2F;&#x2F;这是一个例子，是仅打印以pw开头的命令，但不执行，最后的那个“p”是命令固定字符 ⭐️</p><p>24、!num &#x2F;&#x2F;执行历史命令列表的第num条命令，num代指任何数字（前提是历史命令里必须存在）⭐️</p><p>25、!$ &#x2F;&#x2F;代指上一条命令的最后一个参数，该命令常用于shell脚本中 ⭐️</p><p>26、esc+. &#x2F;&#x2F;注意那个”.“ 意思是获取上一条命令的(以空格为分隔符)最后的部分 ⭐️</p><p>27、esc+b &#x2F;&#x2F;移动到当前单词的开头</p><p>28、esc+f &#x2F;&#x2F;移动到当前单词的结尾</p><p>附录<br>linux的命令是众多的，想要更多的学习linux的命令需要长时间的积累以及参考一些命令手册。这里给出一个常用的linux手册：<br>————————————————<br>版权声明：本文为CSDN博主「冷色调的夏天」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/qq_40695642/article/details/120943341">https://blog.csdn.net/qq_40695642/article/details/120943341</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>基础篇】搭建hexo博客（一）</title>
      <link href="/2023/01/29/post-%E5%9F%BA%E7%A1%80%E7%AF%87%E6%90%AD%E5%BB%BAhexo%E5%8D%9A%E5%AE%A2/"/>
      <url>/2023/01/29/post-%E5%9F%BA%E7%A1%80%E7%AF%87%E6%90%AD%E5%BB%BAhexo%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<p>*<strong>1*</strong>|***0***<strong>【基础篇】搭建hexo博客（一）</strong></p><p>作者：dreamsdrny</p><p>*<strong>2*</strong>|***0***<strong>前言</strong></p><p>你是否想拥有属于自己的博客？你是否无奈与自己不会写网站而烦恼？</p><p>不要担心，本系列教程将会实现你白嫖的愿望，连服务器都不需要买，就算没有任何编程基础也可以学会的搭建博客教程</p><p>下面来看看这些好看的个人博客：</p><p><a href="http://fech.in/">http://fech.in/</a></p><p><a href="https://xaoxuu.com/">https://xaoxuu.com/</a></p><p><a href="https://nexmoe.com/">https://nexmoe.com/</a></p><p><a href="https://sakura.hojun.cn/">https://sakura.hojun.cn/</a></p><p>以上的博客你是否都心动了呢？我想说的是，它们都是由hexo搭建的，等你学完了基础和进阶篇，上面展示的博客你都可以实现，就让我们一步步来吧！</p><p>这是一个系列教程，有基础篇和进阶篇，让我们看看这两个教程实现的效果</p><ul><li>【基础篇】</li></ul><ol><li>学会安装相应需要的依赖软件</li><li>学会更换主题</li><li>学会基本的站点配置</li><li>知道怎么生成文章并编辑</li><li>上传你的博客并拥有一个可以访问的地址</li></ol><hr><ul><li>进阶篇</li></ul><ol><li>学会用markdown基本语法编写你的文章</li><li>学会如何搭建一个免费的图床并使用</li><li>学会进一步配置主题并了解所有主题的基本功能</li><li>拥有自己的域名并绑定</li><li>使用一些插件让自己博客更完美</li><li>备份</li></ol><hr><p>*<strong>3*</strong>|***0***<strong>搭建之前的准备</strong><br>*<strong>3*</strong>|***1***<strong>安装nodejs</strong></p><blockquote><p>下载地址： <a href="http://nodejs.cn/download/">http://nodejs.cn/download/</a></p></blockquote><p>选择windows安装包.msi安装</p><p><a href="https://cdn.jsdelivr.net/gh/kjhuanhao/blogcdn/gtd/Snipaste_2020-02-29_08-54-53.png"><img src="https://cdn.jsdelivr.net/gh/kjhuanhao/blogcdn/gtd/Snipaste_2020-02-29_08-54-53.png" alt="img"></a></p><p>运行安装包，我们默认选择c盘</p><p><a href="https://cdn.jsdelivr.net/gh/kjhuanhao/blogcdn/gtd/Snipaste_2020-02-29_08-49-21.png"><img src="https://cdn.jsdelivr.net/gh/kjhuanhao/blogcdn/gtd/Snipaste_2020-02-29_08-49-21.png" alt="img"></a></p><p>在这里选择Add to PATH然后点Next继续就行了</p><p><a href="https://cdn.jsdelivr.net/gh/kjhuanhao/blogcdn/gtd/Snipaste_2020-02-29_08-49-39.png"><img src="https://cdn.jsdelivr.net/gh/kjhuanhao/blogcdn/gtd/Snipaste_2020-02-29_08-49-39.png" alt="img"></a></p><hr><p>*<strong>3*</strong>|***2***<strong>安装Git</strong></p><blockquote><p>下载地址：<a href="https://git-scm.com/">https://git-scm.com/</a></p></blockquote><p>点这里即可下载最新版本，如果你的下载速度比较慢可以选择下面的链接下载</p><blockquote><p><a href="https://www.lanzous.com/i9s7tib">https://www.lanzous.com/i9s7tib</a></p></blockquote><p><a href="https://cdn.jsdelivr.net/gh/kjhuanhao/blogcdn/gtd/Snipaste_2020-02-29_08-57-32.png"><img src="https://cdn.jsdelivr.net/gh/kjhuanhao/blogcdn/gtd/Snipaste_2020-02-29_08-57-32.png" alt="img"></a></p><p>运行安装包，选择合适的安装位置，然后点Next</p><p><a href="https://cdn.jsdelivr.net/gh/kjhuanhao/blogcdn/gtd/Snipaste_2020-02-29_09-01-49.png"><img src="https://cdn.jsdelivr.net/gh/kjhuanhao/blogcdn/gtd/Snipaste_2020-02-29_09-01-49.png" alt="img"></a></p><p>后面的安装步骤全部只要点Next就行了，不需要我们多余配置</p><p><a href="https://i.loli.net/2020/02/29/jqTCDk6YSbwQOVz.png"><img src="https://i.loli.net/2020/02/29/jqTCDk6YSbwQOVz.png" alt="Snipaste_2020-02-29_09-02-25.png"></a></p><hr><p>*<strong>3*</strong>|***3***<strong>验证nodejs是否安装配置成功</strong></p><p>我们安装完Git后，在桌面右键会有Git Bash Here，我们直接点开</p><p><a href="https://i.loli.net/2020/02/29/s1YhxtEILOlk4Xz.png"><img src="https://i.loli.net/2020/02/29/s1YhxtEILOlk4Xz.png" alt="Snipaste_2020-02-29_09-05-54.png"></a></p><p>会出来一个终端，我们分别执行下面的命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ node -v</span><br><span class="line">$ npm -v</span><br></pre></td></tr></table></figure><p>如果输出了版本号，那么证明配置成功，如果没有版本号，请重新安装nodejs（检查是否勾选Add to Path），或者手动为nodejs添加环境变量</p><p><a href="https://cdn.jsdelivr.net/gh/kjhuanhao/blogcdn/img/213.ophl1x6e4sp.png"><img src="https://cdn.jsdelivr.net/gh/kjhuanhao/blogcdn/img/213.ophl1x6e4sp.png" alt="image"></a></p><hr><p>*<strong>3*</strong>|***4***<strong>安装cnpm</strong></p><p>在git bash里面执行下面的命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p><strong>检查cnpm是否安装成功</strong></p><p>执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cnpm -v </span><br></pre></td></tr></table></figure><p>如果输出版本号就是安装成功了</p><hr><p>*<strong>4*</strong>|***0***<strong>安装hexo和初始化博客</strong><br>*<strong>4*</strong>|***1***<strong>安装hexo</strong></p><p>在git bash执行下面的命令安装hexo</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cnpm install hexo-cli -g</span><br></pre></td></tr></table></figure><p>*<strong>4*</strong>|***2***<strong>初始化博客</strong></p><p>选择一个文件夹，然后右键打开git bash</p><p>例如：我在F盘新建了一个blog文件夹，就在blog文件夹下打开git bash</p><p><a href="https://cdn.jsdelivr.net/gh/kjhuanhao/blogcdn/img/Snipaste_2020-02-29_09-23-38.xgw9p9u10qr.png"><img src="https://cdn.jsdelivr.net/gh/kjhuanhao/blogcdn/img/Snipaste_2020-02-29_09-23-38.xgw9p9u10qr.png" alt="image"></a></p><p>然后这里会显示你当前目录</p><p><a href="https://cdn.jsdelivr.net/gh/kjhuanhao/blogcdn/img/Snipaste_2020-02-29_09-25-37.w75xfc7uqwj.png"><img src="https://cdn.jsdelivr.net/gh/kjhuanhao/blogcdn/img/Snipaste_2020-02-29_09-25-37.w75xfc7uqwj.png" alt="image"></a></p><p>然后执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init</span><br></pre></td></tr></table></figure><p>到<code>Install dependencies</code>的时候你可能会卡住，这是大多数人基本都会遇到的</p><p>我们只需要在这里的时候结束命令，按<code>Ctrl + c</code>就可以结束命令</p><p><a href="https://cdn.jsdelivr.net/gh/kjhuanhao/blogcdn/img/Snipaste_2020-02-29_09-27-37.79mebxnx3oa.png"><img src="https://cdn.jsdelivr.net/gh/kjhuanhao/blogcdn/img/Snipaste_2020-02-29_09-27-37.79mebxnx3oa.png" alt="image"></a></p><p>然后执行下面这个命令，就可以使用国内的镜像为你完成博客的初始化工作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cnpm install</span><br></pre></td></tr></table></figure><blockquote><p>其他方法：</p><p>git clone <a href="https://e.coding.net/huanhao/hexoblog.git">https://e.coding.net/huanhao/hexoblog.git</a></p><p>cnpm install</p></blockquote><p>然后继续下面的步骤</p><p>等待命令完成后，就完成了初始化，现在就可以预览我们的博客了</p><p>执行下面这个命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">注意：请不要结束命令或者关闭终端</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo s</span><br></pre></td></tr></table></figure><p><a href="https://cdn.jsdelivr.net/gh/kjhuanhao/blogcdn/img/Snipaste_2020-02-29_09-31-47.jmi628mj35e.png"><img src="https://cdn.jsdelivr.net/gh/kjhuanhao/blogcdn/img/Snipaste_2020-02-29_09-31-47.jmi628mj35e.png" alt="image"></a></p><p>然后会出来一段http开头的网址，我们复制下来然后在浏览器打开</p><p>就会出现这么一个页面了</p><p><a href="https://cdn.jsdelivr.net/gh/kjhuanhao/blogcdn/img/Snipaste_2020-02-29_09-33-55.tyszma65r9.png"><img src="https://cdn.jsdelivr.net/gh/kjhuanhao/blogcdn/img/Snipaste_2020-02-29_09-33-55.tyszma65r9.png" alt="image"></a></p><hr><p>*<strong>5*</strong>|***0***<strong>更换主题</strong></p><p>你是否觉得上面的默认主题有点不好看呢？现在教你如何替换主题</p><p>hexo的所有主题都在下面这个地址：</p><blockquote><p><a href="https://hexo.io/themes/">https://hexo.io/themes/</a></p></blockquote><p>你可能会在这个地址看到很多好看的主题，但是我们要慢慢来，有些主题的配置难度还是很高的</p><p>我们要找一个功能齐全，配置简单的主题练练手</p><p>就是这个新手入门hexo必备的Next主题</p><blockquote><p>预览效果：<a href="https://theme-next.org/">https://theme-next.org/</a></p><p>项目地址：<a href="https://github.com/theme-next/hexo-theme-next">https://github.com/theme-next/hexo-theme-next</a></p><p>配置文档：<a href="https://theme-next.org/docs/getting-started/">https://theme-next.org/docs/getting-started/</a></p></blockquote><p>如你所见，其实每个主题都会包含这个三个东西</p><ul><li>预览效果</li><li>项目地址</li><li>配置文档</li></ul><p>点击主题的图片可以打开预览地址，点击主题的标题可以打开项目地址</p><p>配置文档我们需要自己去项目地址找，大多数主题的项目地址都是英文，大家可以开翻译找一下</p><p><a href="https://cdn.jsdelivr.net/gh/kjhuanhao/blogcdn/img/Snipaste_2020-02-29_09-40-40.h10pzhd3ikj.png"><img src="https://cdn.jsdelivr.net/gh/kjhuanhao/blogcdn/img/Snipaste_2020-02-29_09-40-40.h10pzhd3ikj.png" alt="image"></a></p><hr><p>*<strong>5*</strong>|***1***<strong>如何下载主题</strong></p><h3 id="方法1"><a href="#方法1" class="headerlink" title="方法1"></a>方法1</h3><p>打开主题的项目地址后，点击<code>Clone or download</code></p><p>然后复制https开头的地址</p><p><a href="https://cdn.jsdelivr.net/gh/kjhuanhao/blogcdn/img/Snipaste_2020-02-29_09-46-02.gnmyl5b7s2.png"><img src="https://cdn.jsdelivr.net/gh/kjhuanhao/blogcdn/img/Snipaste_2020-02-29_09-46-02.gnmyl5b7s2.png" alt="image"></a></p><p>然后在你的博客文件夹下面打开git bash</p><p>执行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone 复制的地址 themes/主题名字</span><br></pre></td></tr></table></figure><p>如图：</p><p><a href="https://cdn.jsdelivr.net/gh/kjhuanhao/blogcdn/img/Snipaste_2020-02-29_09-50-23.o7ukcdqwa8e.png"><img src="https://cdn.jsdelivr.net/gh/kjhuanhao/blogcdn/img/Snipaste_2020-02-29_09-50-23.o7ukcdqwa8e.png" alt="image"></a></p><p>现在给你解释一下这个命令</p><p>git clone 代表克隆，后面接上一串下载地址，最后面的themes&#x2F;next是把文件夹下载到主题目录下，并把主题文件命名为next</p><hr><h3 id="方法2"><a href="#方法2" class="headerlink" title="方法2"></a>方法2</h3><p>如果你觉得比较麻烦，还有第二个办法</p><p>打开主题项目地址，然后点击<code>Clone or download</code>，然后点击Download ZIP</p><p>这样可以下载主题文件压缩包，前提是你已经登入了github（没有账号的，请自己注册一下）</p><p><a href="https://cdn.jsdelivr.net/gh/kjhuanhao/blogcdn/img/Snipaste_2020-02-29_09-53-14.hd54gibpilh.png"><img src="https://cdn.jsdelivr.net/gh/kjhuanhao/blogcdn/img/Snipaste_2020-02-29_09-53-14.hd54gibpilh.png" alt="image"></a></p><p>然后解压压缩包，把文件夹放在博客目录下的themes目录，并把文件夹命名为主题的名字</p><p><a href="https://cdn.jsdelivr.net/gh/kjhuanhao/blogcdn/img/Snipaste_2020-02-29_09-56-33.xhx8o5z5d9.png"><img src="https://cdn.jsdelivr.net/gh/kjhuanhao/blogcdn/img/Snipaste_2020-02-29_09-56-33.xhx8o5z5d9.png" alt="image"></a></p><hr><p>*<strong>5*</strong>|***2***<strong>修改配置文件</strong></p><p>在博客的目录下有一个叫<code>_config.yml</code>的文件</p><p>将它打开</p><p><a href="https://cdn.jsdelivr.net/gh/kjhuanhao/blogcdn/img/Snipaste_2020-02-29_10-01-51.gwst228nama.png"><img src="https://cdn.jsdelivr.net/gh/kjhuanhao/blogcdn/img/Snipaste_2020-02-29_10-01-51.gwst228nama.png" alt="image"></a></p><p>找到<code>themes</code>这一行，然后将主题名字修改为next</p><p><a href="https://cdn.jsdelivr.net/gh/kjhuanhao/blogcdn/img/Snipaste_2020-02-29_10-02-23.58o49hkjdki.png"><img src="https://cdn.jsdelivr.net/gh/kjhuanhao/blogcdn/img/Snipaste_2020-02-29_10-02-23.58o49hkjdki.png" alt="image"></a></p><p>这样的话，主题就成功更换了</p><hr><p>*<strong>5*</strong>|***3***<strong>预览主题</strong></p><p>在博客目录打开git bash</p><p>执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>还是会出现一段浏览地址，我们在浏览器打开就行了</p><p><a href="https://cdn.jsdelivr.net/gh/kjhuanhao/blogcdn/img/Snipaste_2020-02-29_10-04-16.2dvd68y21dm.png"><img src="https://cdn.jsdelivr.net/gh/kjhuanhao/blogcdn/img/Snipaste_2020-02-29_10-04-16.2dvd68y21dm.png" alt="image"></a></p><blockquote><p>注意：有些主题你更换之后是暂时无法预览的，因为有的主题还需要安装它需要的依赖，这一般都会在主题的文档里面提到，只有安装它的依赖之后才可以正常预览，这里暂时不做说明，会在hexo教程进阶篇说到</p></blockquote><hr><p>*<strong>6*</strong>|***0***<strong>配置主题</strong></p><p>这里不会做详细的配置介绍，在进阶篇会完整说明</p><p>我们需要认识两个文件</p><ul><li>站点配置文件</li></ul><p>指的是博客根目录下的<code>_config.yml</code></p><p><a href="https://cdn.jsdelivr.net/gh/kjhuanhao/blogcdn/img/Snipaste_2020-02-29_10-01-51.gwst228nama.png"><img src="https://cdn.jsdelivr.net/gh/kjhuanhao/blogcdn/img/Snipaste_2020-02-29_10-01-51.gwst228nama.png" alt="image"></a></p><ul><li>主题配置文件</li></ul><p>指的是某个主题下的<code>_config.yml</code></p><p>它们的名字都叫<code>_config.yml</code>但是你不能弄混淆</p><p><a href="https://cdn.jsdelivr.net/gh/kjhuanhao/blogcdn/img/Snipaste_2020-02-29_10-11-13.qayjeoclrer.png"><img src="https://cdn.jsdelivr.net/gh/kjhuanhao/blogcdn/img/Snipaste_2020-02-29_10-11-13.qayjeoclrer.png" alt="image"></a></p><p>在我们看主题文档配置的时候，是必须要分清这两个概念的，不然会报错</p><p>我们先来几个基本的配置</p><p>*<strong>6*</strong>|***1***<strong>设置语言</strong></p><p>在Next主题的文档里面提到了如何更换语言</p><p><a href="https://cdn.jsdelivr.net/gh/kjhuanhao/blogcdn/img/Snipaste_2020-02-29_10-45-34.i8xhol7d05.png"><img src="https://cdn.jsdelivr.net/gh/kjhuanhao/blogcdn/img/Snipaste_2020-02-29_10-45-34.i8xhol7d05.png" alt="image"></a></p><p>它要求我们更改的是站点配置文件，并且给出了代码示范</p><p>我们打开站点配置文件</p><p>按照要求，将language的配置改成zh-CN，然后保存文件</p><p><a href="https://cdn.jsdelivr.net/gh/kjhuanhao/blogcdn/img/Snipaste_2020-02-29_10-46-29.tuonuuuk6mm.png"><img src="https://cdn.jsdelivr.net/gh/kjhuanhao/blogcdn/img/Snipaste_2020-02-29_10-46-29.tuonuuuk6mm.png" alt="image"></a></p><p>*<strong>6*</strong>|***2***<strong>其他设置</strong></p><p>现在再来尝试一个</p><p>Next主题里面有个Scheme选项，可以更改主题的外观</p><p>根据要求，我们需要更改的是主题配置文件</p><p><a href="https://cdn.jsdelivr.net/gh/kjhuanhao/blogcdn/img/Snipaste_2020-02-29_10-47-13.9mpo8qnzty.png"><img src="https://cdn.jsdelivr.net/gh/kjhuanhao/blogcdn/img/Snipaste_2020-02-29_10-47-13.9mpo8qnzty.png" alt="image"></a></p><p>打开主题配置文件，我们尝试scheme改成双栏，也就是需要修改成Pisces</p><p><a href="https://cdn.jsdelivr.net/gh/kjhuanhao/blogcdn/img/Snipaste_2020-02-29_10-22-06.eq6mi8hrlka.png"><img src="https://cdn.jsdelivr.net/gh/kjhuanhao/blogcdn/img/Snipaste_2020-02-29_10-22-06.eq6mi8hrlka.png" alt="image"></a></p><p>现在已经修改过两个配置了，为了检验是否修改成功，我们需要预览一下主题</p><p>在博客根目录下执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>然后打开链接</p><p><a href="https://cdn.jsdelivr.net/gh/kjhuanhao/blogcdn/img/Snipaste_2020-02-29_10-49-17.j0ojrtmb8xm.png"><img src="https://cdn.jsdelivr.net/gh/kjhuanhao/blogcdn/img/Snipaste_2020-02-29_10-49-17.j0ojrtmb8xm.png" alt="image"></a></p><p>可以看到都设置成功了</p><p>因为这个主题的主题文档是英文的，所以可能配置起来不太方便，我这里有一个中文的</p><p>是别人翻译的，不过现在不是最新版本的翻译</p><blockquote><p><a href="http://theme-next.iissnan.com/">http://theme-next.iissnan.com/</a></p></blockquote><p>如果你有能力，可以自己挑一个主题进行简单配置，在进阶篇中会使用其他主题为你展示更详细的配置教程</p><hr><p>*<strong>7*</strong>|***0***<strong>生成文章的编辑工具</strong></p><p>在博客根目录下面执行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new &quot;文章链接&quot;</span><br></pre></td></tr></table></figure><p>例如：你想创建一个名为”我的第一个博客“的文章</p><p>可以执行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new &quot;my-first-blog&quot;</span><br></pre></td></tr></table></figure><p>文章链接建议是英文，然后会显示你的文章生成的目录，每次生成的文章都固定在你的博客根目录下面的source&#x2F;_posts下</p><p><a href="https://cdn.jsdelivr.net/gh/kjhuanhao/blogcdn/img/Snipaste_2020-02-29_12-10-30.ybyovivc8lp.png"><img src="https://cdn.jsdelivr.net/gh/kjhuanhao/blogcdn/img/Snipaste_2020-02-29_12-10-30.ybyovivc8lp.png" alt="image"></a></p><p>可以看到是一个后缀为.md的文件，这个其实是一个markdown文件，如果你不知道markdown是什么，在进阶篇会告诉你，就算你不会markdown，你可以暂时把这个当成txt文件</p><p>我建议你安装Typora编辑.md文件</p><blockquote><p><a href="https://www.typora.io/">https://www.typora.io/</a></p></blockquote><p>按照目录打开my-firsy-blog.md文件，可以看到一个横线上面有一段信息</p><p>这里面是存放你博客信息的地方</p><p><a href="https://cdn.jsdelivr.net/gh/kjhuanhao/blogcdn/img/Snipaste_2020-02-29_12-16-37.oun3i88bw.png"><img src="https://cdn.jsdelivr.net/gh/kjhuanhao/blogcdn/img/Snipaste_2020-02-29_12-16-37.oun3i88bw.png" alt="image"></a></p><ul><li>title 文章标题</li><li>date 文章日期</li><li>tag 文章标签 （暂时不说明如何配置，进阶篇会讲到）</li></ul><p>然后这时候你可以修改文章标题，并且在横线下面输入你文章的内容</p><p><a href="https://cdn.jsdelivr.net/gh/kjhuanhao/blogcdn/img/Snipaste_2020-02-29_12-17-14.7x7sfa9t9m8.png"><img src="https://cdn.jsdelivr.net/gh/kjhuanhao/blogcdn/img/Snipaste_2020-02-29_12-17-14.7x7sfa9t9m8.png" alt="image"></a></p><p>保存之后，你可以在博客根目录打开git bash</p><p>执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo s</span><br></pre></td></tr></table></figure><p>记得：预览博客都是这个命令</p><p><a href="https://cdn.jsdelivr.net/gh/kjhuanhao/blogcdn/img/Snipaste_2020-02-29_12-22-11.eoh9owyqu4j.png"><img src="https://cdn.jsdelivr.net/gh/kjhuanhao/blogcdn/img/Snipaste_2020-02-29_12-22-11.eoh9owyqu4j.png" alt="image"></a></p><hr><p>*<strong>8*</strong>|***0***<strong>部署你的博客</strong></p><p>现在我们的博客都是只能本地预览，如何将我们的上传到一个地方，然后通过域名访问呢？</p><p>你可能觉得需要一个服务器再买个域名绑定，我可以告诉你都不需要</p><p>下面介绍两种部署方法</p><p>先来个对比</p><p><strong>github：</strong></p><ul><li>国外网站，是英文</li><li>访问速度较慢</li><li>不需要实名认证</li><li>域名形式可以自定义</li></ul><p><strong>coding：</strong></p><ul><li>国内的平台，网站是中文</li><li>访问速度快</li><li>部署网站需要实名认证，只需要填写身份证号即可</li><li>域名是随机给的，所以很长而且不能自定义</li></ul><p>如果你有自己的域名，github和coding都可以绑定域名</p><p>*<strong>8*</strong>|***1***<strong>coding</strong></p><blockquote><p><a href="https://coding.net/user">https://coding.net/user</a></p></blockquote><p>注册一个coding的账号，这里不做演示</p><p>然后按照图片新建一个项目</p><p><a href="https://cdn.jsdelivr.net/gh/kjhuanhao/blogcdn/img/Snipaste_2020-02-29_12-25-47.8py42ifi1g3.png"><img src="https://cdn.jsdelivr.net/gh/kjhuanhao/blogcdn/img/Snipaste_2020-02-29_12-25-47.8py42ifi1g3.png" alt="image"></a></p><p>选择devops</p><p><a href="https://cdn.jsdelivr.net/gh/kjhuanhao/blogcdn/img/Snipaste_2020-02-29_12-25-58.sm3tn54wui.png"><img src="https://cdn.jsdelivr.net/gh/kjhuanhao/blogcdn/img/Snipaste_2020-02-29_12-25-58.sm3tn54wui.png" alt="image"></a></p><p>填入相关信息，记得勾选**<code>启用README.cd文件初始化项目</code>**</p><p><a href="https://cdn.jsdelivr.net/gh/kjhuanhao/blogcdn/img/Snipaste_2020-02-29_12-26-29.u2pyq6c928.png"><img src="https://cdn.jsdelivr.net/gh/kjhuanhao/blogcdn/img/Snipaste_2020-02-29_12-26-29.u2pyq6c928.png" alt="image"></a></p><p>然后完成创建</p><hr><blockquote><p>我们暂时不能直接上传，需要进行一些配置，如下：</p></blockquote><p>接下来需要我们创建一个git秘钥</p><p>打开git bash（不要求在哪个目录）</p><p>执行： “这里面是你的邮箱”</p><p>不管出现什么信息，你只需要回车就可以了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C “your_email@youremail.com“</span><br></pre></td></tr></table></figure><p>然后执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cat ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure><p>会输出你的秘钥，我们复制输出信息就行了</p><p>然后点击头像，打开个人设置–选择SSH公钥–新增公钥</p><p><a href="https://cdn.jsdelivr.net/gh/kjhuanhao/blogcdn/img/Snipaste_2020-02-29_12-33-54.hlvuud9w9ns.png"><img src="https://cdn.jsdelivr.net/gh/kjhuanhao/blogcdn/img/Snipaste_2020-02-29_12-33-54.hlvuud9w9ns.png" alt="image"></a></p><p>然后将你复制的秘钥粘贴进去，记得勾选永久有效</p><p><a href="https://cdn.jsdelivr.net/gh/kjhuanhao/blogcdn/img/Snipaste_2020-02-29_12-34-42.zd3za7e4a6e.png"><img src="https://cdn.jsdelivr.net/gh/kjhuanhao/blogcdn/img/Snipaste_2020-02-29_12-34-42.zd3za7e4a6e.png" alt="image"></a></p><hr><p>然后打开git bash</p><p>执行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$  ssh -T git@git.coding.net</span><br></pre></td></tr></table></figure><p>会提示你下面这个，输入yes回车就行了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Are you sure you want to continue connecting (yes/no/[fingerprint])? </span><br></pre></td></tr></table></figure><hr><p>接下来打开你的项目选择SSH，然后复制右边git开头的地址</p><p><a href="https://cdn.jsdelivr.net/gh/kjhuanhao/blogcdn/img/Snipaste_2020-02-29_12-38-33.r8subsc5h7k.png"><img src="https://cdn.jsdelivr.net/gh/kjhuanhao/blogcdn/img/Snipaste_2020-02-29_12-38-33.r8subsc5h7k.png" alt="image"></a></p><p>打开站点配置文件</p><p>修改deploy信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: 你复制的地址</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>例如：</p><p><a href="https://cdn.jsdelivr.net/gh/kjhuanhao/blogcdn/img/Snipaste_2020-02-29_12-44-14.it2uh45m4jq.png"><img src="https://cdn.jsdelivr.net/gh/kjhuanhao/blogcdn/img/Snipaste_2020-02-29_12-44-14.it2uh45m4jq.png" alt="image"></a></p><p>在博客根目录下打开git bash</p><p>分别执行下面的命令：</p><p>yourname是你的名字</p><p>youremail是你的邮箱</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name &quot;yourname&quot;</span><br><span class="line">$ git config --global user.email &quot;youremail&quot;</span><br></pre></td></tr></table></figure><p>然后安装上传插件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><hr><h3 id="上传"><a href="#上传" class="headerlink" title="上传"></a>上传</h3><blockquote><p>以上的配置完成之后，就可以上传了</p></blockquote><p>在博客根目录下打开git bash，执行下面的命令就可以上传了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g -d</span><br></pre></td></tr></table></figure><p><a href="https://cdn.jsdelivr.net/gh/kjhuanhao/blogcdn/img/Snipaste_2020-02-29_12-49-05.lkmgvzcdzwh.png"><img src="https://cdn.jsdelivr.net/gh/kjhuanhao/blogcdn/img/Snipaste_2020-02-29_12-49-05.lkmgvzcdzwh.png" alt="image"></a></p><p>然后打开项目，打开构建与部署–静态网站–立即发布静态网站</p><blockquote><p>注意：coding需要实名认证，只需要你输入身份证号就可以了，不用担心泄露隐私，因为coding现在是腾讯的</p></blockquote><p><a href="https://cdn.jsdelivr.net/gh/kjhuanhao/blogcdn/img/Snipaste_2020-02-29_12-50-05.b57ma6w5win.png"><img src="https://cdn.jsdelivr.net/gh/kjhuanhao/blogcdn/img/Snipaste_2020-02-29_12-50-05.b57ma6w5win.png" alt="image"></a></p><p>我们只要填写网站名称就行了，然后保存</p><p><a href="https://cdn.jsdelivr.net/gh/kjhuanhao/blogcdn/img/Snipaste_2020-02-29_12-50-36.6fwfau0xu0w.png"><img src="https://cdn.jsdelivr.net/gh/kjhuanhao/blogcdn/img/Snipaste_2020-02-29_12-50-36.6fwfau0xu0w.png" alt="image"></a></p><p>因为是刚构建的网站，所以要手动部署一下，以后上传就不需要手动部署</p><p><a href="https://cdn.jsdelivr.net/gh/kjhuanhao/blogcdn/img/Snipaste_2020-02-29_12-55-02.ki4y7hiyo2b.png"><img src="https://cdn.jsdelivr.net/gh/kjhuanhao/blogcdn/img/Snipaste_2020-02-29_12-55-02.ki4y7hiyo2b.png" alt="image"></a></p><p>然后访问所给的地址，那个就是我们网站的地址了</p><p><a href="https://cdn.jsdelivr.net/gh/kjhuanhao/blogcdn/img/Snipaste_2020-02-29_12-56-21.b5y903lp4hk.png"><img src="https://cdn.jsdelivr.net/gh/kjhuanhao/blogcdn/img/Snipaste_2020-02-29_12-56-21.b5y903lp4hk.png" alt="image"></a></p><p>之后每次修改完博客要上传的时候，只需执行上传命令</p><p>*<strong>8*</strong>|***2***<strong>github部署</strong></p><p>你还可以使用github部署你的博客</p><p>这里不演示如何注册账号</p><p>创建一个仓库</p><p><a href="https://cdn.jsdelivr.net/gh/kjhuanhao/blogcdn/img/Snipaste_2020-02-29_14-49-41.bjily8bk23.png"><img src="https://cdn.jsdelivr.net/gh/kjhuanhao/blogcdn/img/Snipaste_2020-02-29_14-49-41.bjily8bk23.png" alt="image"></a></p><p>仓库名必须是用户名 + .github.io</p><p>然后勾选初始化README</p><p><a href="https://cdn.jsdelivr.net/gh/kjhuanhao/blogcdn/img/Snipaste_2020-02-29_14-51-22.58hhw0be4f9.png"><img src="https://cdn.jsdelivr.net/gh/kjhuanhao/blogcdn/img/Snipaste_2020-02-29_14-51-22.58hhw0be4f9.png" alt="image"></a></p><blockquote><p>我们暂时不能直接上传，需要进行一些配置，如下：</p></blockquote><p>接下来需要我们创建一个git秘钥</p><p>打开git bash（不要求在哪个目录）</p><p>执行： “这里面是你的邮箱”</p><p>不管出现什么信息，你只需要回车就可以了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C “your_email@youremail.com“</span><br></pre></td></tr></table></figure><p>然后执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cat ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure><p>会输出你的秘钥，我们复制输出信息就行了</p><p>然后点击头像，点击Settings–SSH·····–New SSH Key</p><p><a href="https://cdn.jsdelivr.net/gh/kjhuanhao/blogcdn/img/Snipaste_2020-02-29_14-53-12.bnffwtcf66a.png"><img src="https://cdn.jsdelivr.net/gh/kjhuanhao/blogcdn/img/Snipaste_2020-02-29_14-53-12.bnffwtcf66a.png" alt="image"></a></p><p>粘贴你复制的秘钥</p><p><a href="https://cdn.jsdelivr.net/gh/kjhuanhao/blogcdn/img/Snipaste_2020-02-29_14-55-05.lakxr64606k.png"><img src="https://cdn.jsdelivr.net/gh/kjhuanhao/blogcdn/img/Snipaste_2020-02-29_14-55-05.lakxr64606k.png" alt="image"></a></p><p>然后打开git bash</p><p>执行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$  ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>会提示你下面这个，输入yes回车就行了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Are you sure you want to continue connecting (yes/no/[fingerprint])? </span><br></pre></td></tr></table></figure><p>打开项目，点击绿色按钮，点击Use SSH</p><p><a href="https://cdn.jsdelivr.net/gh/kjhuanhao/blogcdn/img/Snipaste_2020-02-29_15-01-31.omf9nqgs46i.png"><img src="https://cdn.jsdelivr.net/gh/kjhuanhao/blogcdn/img/Snipaste_2020-02-29_15-01-31.omf9nqgs46i.png" alt="image"></a></p><p>复制git开头的地址</p><p><a href="https://cdn.jsdelivr.net/gh/kjhuanhao/blogcdn/img/Snipaste_2020-02-29_15-01-38.kjtg51f14z.png"><img src="https://cdn.jsdelivr.net/gh/kjhuanhao/blogcdn/img/Snipaste_2020-02-29_15-01-38.kjtg51f14z.png" alt="image"></a></p><p>打开站点配置文件</p><p>修改deploy信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: 你复制的地址</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>例如：</p><p><a href="https://cdn.jsdelivr.net/gh/kjhuanhao/blogcdn/img/Snipaste_2020-02-29_15-01-58.3dtw3iersue.png"><img src="https://cdn.jsdelivr.net/gh/kjhuanhao/blogcdn/img/Snipaste_2020-02-29_15-01-58.3dtw3iersue.png" alt="image"></a></p><p>在博客根目录下打开git bash</p><p>分别执行下面的命令：</p><p>yourname是你的名字</p><p>youremail是你的邮箱</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name &quot;yourname&quot;</span><br><span class="line">$ git config --global user.email &quot;youremail&quot;</span><br></pre></td></tr></table></figure><p>然后安装上传插件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><hr><h3 id="上传-1"><a href="#上传-1" class="headerlink" title="上传"></a>上传</h3><blockquote><p>以上的配置完成之后，就可以上传了</p></blockquote><p>在博客根目录下打开git bash，执行下面的命令就可以上传了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g -d</span><br></pre></td></tr></table></figure><p><a href="https://cdn.jsdelivr.net/gh/kjhuanhao/blogcdn/img/Snipaste_2020-02-29_12-49-05.lkmgvzcdzwh.png"><img src="https://cdn.jsdelivr.net/gh/kjhuanhao/blogcdn/img/Snipaste_2020-02-29_12-49-05.lkmgvzcdzwh.png" alt="image"></a></p><p>然后打开项目，点击Settings</p><p><a href="https://cdn.jsdelivr.net/gh/kjhuanhao/blogcdn/img/Snipaste_2020-02-29_15-07-19.prpi9gjzgvn.png"><img src="https://cdn.jsdelivr.net/gh/kjhuanhao/blogcdn/img/Snipaste_2020-02-29_15-07-19.prpi9gjzgvn.png" alt="image"></a></p><p>往下滑找到Github pages</p><p>点击none 选择master branch</p><p><a href="https://cdn.jsdelivr.net/gh/kjhuanhao/blogcdn/img/Snipaste_2020-02-29_15-11-58.91hsb6n2sg.png"><img src="https://cdn.jsdelivr.net/gh/kjhuanhao/blogcdn/img/Snipaste_2020-02-29_15-11-58.91hsb6n2sg.png" alt="image"></a></p><p>之后你会得到一个地址，这个就是你的网站地址了</p><p><a href="https://cdn.jsdelivr.net/gh/kjhuanhao/blogcdn/img/Snipaste_2020-02-29_15-06-38.5i4rmc7ha2g.png"><img src="https://cdn.jsdelivr.net/gh/kjhuanhao/blogcdn/img/Snipaste_2020-02-29_15-06-38.5i4rmc7ha2g.png" alt="image"></a></p><p><strong>教程结束，进阶篇请期待</strong></p><p>我的同步更新博客: <a href="https://mrhuanhao.cn/">https://mrhuanhao.cn/</a></p><p><strong>EOF</strong></p><p><img src="https://cdn.jsdelivr.net/gh/kjhuanhao/cdn/blog/huanhao.jpg" alt="img"></p><p><strong>本文作者</strong>：**<a href="https://www.cnblogs.com/huanhao/p/hexobase.html">HuanHao</a>**<br><strong>本文链接</strong>：<a href="https://www.cnblogs.com/huanhao/p/hexobase.html">https://www.cnblogs.com/huanhao/p/hexobase.html</a><br><strong>关于博主</strong>：评论和私信会在第一时间回复。或者<a href="https://msg.cnblogs.com/msg/send/huanhao">直接私信</a>我。<br><strong>版权声明</strong>：本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-nd/4.0/">BY-NC-SA</a> 许可协议。转载请注明出处！<br><strong>声援博主</strong>：如果您觉得文章对您有帮助，可以点击文章右下角<strong>【<a href="javascript:void(0);">推荐</a>】</strong>一下。您的鼓励是博主的最大动力！</p><p>如果你喜欢我的文章，可以关注一下我的博客，或者关注我的bilibili：<a href="https://space.bilibili.com/67268239">https://space.bilibili.com/67268239</a></p><p>分类: <a href="https://www.cnblogs.com/huanhao/category/1651577.html">网站搭建</a></p><p>标签: <a href="https://www.cnblogs.com/huanhao/tag/%E5%85%8D%E8%B4%B9%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/">免费博客搭建</a>, <a href="https://www.cnblogs.com/huanhao/tag/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/">博客搭建</a>, <a href="https://www.cnblogs.com/huanhao/tag/Hexo/">Hexo</a></p><p><a href="javascript:void(0);">好文要顶</a> <a href="javascript:void(0);">关注我</a> <a href="javascript:void(0);">收藏该文</a> <a href="javascript:void(0);"><img src="https://common.cnblogs.com/images/icon_weibo_24.png" alt="img"></a> <a href="javascript:void(0);"><img src="https://common.cnblogs.com/images/wechat.png" alt="img"></a></p><p><a href="https://home.cnblogs.com/u/huanhao/"><img src="https://pic.cnblogs.com/face/sample_face.gif" alt="img"></a></p><p><a href="https://home.cnblogs.com/u/huanhao/">huanhao</a><br><a href="https://home.cnblogs.com/u/huanhao/followers/">粉丝 - 19</a> <a href="https://home.cnblogs.com/u/huanhao/followees/">关注 - 1</a></p><p><a href="javascript:void(0);">+加关注</a></p><p>9</p><p>0</p><p><a href="https://www.cnblogs.com/huanhao/p/newweb.html">« </a>上一篇： <a href="https://www.cnblogs.com/huanhao/p/newweb.html">新网址,之后将同步更新，博客园可能会更新较慢</a><br><a href="https://www.cnblogs.com/huanhao/p/prettykde.html">» </a>下一篇： <a href="https://www.cnblogs.com/huanhao/p/prettykde.html">【kde美化】ArchLinux</a></p><p>posted @ 2020-02-29 15:16 <a href="https://www.cnblogs.com/huanhao/">huanhao</a> 阅读(11350) 评论(5) <a href="https://i.cnblogs.com/EditPosts.aspx?postid=12383083">编辑</a> <a href="javascript:void(0)">收藏</a> <a href="javascript:void(0)">举报</a></p><p><a href="javascript:void(0);">刷新评论</a><a href="https://www.cnblogs.com/huanhao/p/hexobase.html#">刷新页面</a><a href="https://www.cnblogs.com/huanhao/p/hexobase.html#top">返回顶部</a></p><p>登录后才能查看或发表评论，立即 <a href="javascript:void(0);">登录</a> 或者 <a href="https://www.cnblogs.com/">逛逛</a> 博客园首页</p><p><a href="https://click.aliyun.com/m/1000365553/">【推荐】阿里云新人特惠，爆款云服务器2核4G低至0.46元&#x2F;天</a><br><a href="https://cloud.tencent.com/act/cps/redirect?redirect=3274&cps_key=6a15b90f1178f38fb09b07f16943cf3e&from=console">【推荐】腾讯云云产品年终特惠，轻量应用服务器6.58元&#x2F;月起</a></p><p><strong>编辑推荐：</strong><br>· <a href="https://www.cnblogs.com/huangxincheng/p/17069686.html">SQLSERVER 事务日志的 LSN 到底是什么？</a><br>· <a href="https://www.cnblogs.com/jiujuan/p/17066590.html">微服务架构学习与思考：从单体架构到微服务架构的演进历程</a><br>· <a href="https://www.cnblogs.com/wzh2010/p/15888525.html">MQ 系列11：如何保证消息可靠性传输</a><br>· <a href="https://www.cnblogs.com/makemylife/p/17063284.html">聊聊我与流式计算的故事</a><br>· <a href="https://www.cnblogs.com/tcjiaan/p/17065118.html">［ASP.NET Core］用配置文件来设置授权角色</a></p><p><strong>阅读排行：</strong><br>· <a href="https://www.cnblogs.com/smartloli/p/17069184.html">ChatGPT开发实战</a><br>· <a href="https://www.cnblogs.com/nezhaSoft/p/17068767.html">自从学习了MongoDB高可用，慢慢的喜欢上了它，之前确实冷落了</a><br>· <a href="https://www.cnblogs.com/nullnuo/p/17068843.html">windows11预览版装WSA心得</a><br>· <a href="https://www.cnblogs.com/xueweihan/p/17069622.html">《HelloGitHub》第 82 期</a><br>· <a href="https://www.cnblogs.com/whuanle/p/17069128.html">1.5万字长文：从 C# 入门 Kafka</a></p><p>MENU</p><h1 id="【基础篇】hexo博客搭建教程"><a href="#【基础篇】hexo博客搭建教程" class="headerlink" title="【基础篇】hexo博客搭建教程"></a>【基础篇】hexo博客搭建教程</h1><p>发表于 2020-02-29 15:16阅读次数：11350评论次数：5</p><p><a href="https://www.cnblogs.com/huanhao/category/1651577.html">网站搭建</a><a href="https://www.cnblogs.com/huanhao/tag/%E5%85%8D%E8%B4%B9%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/">免费博客搭建</a><a href="https://www.cnblogs.com/huanhao/tag/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/">博客搭建</a><a href="https://www.cnblogs.com/huanhao/tag/Hexo/">HEXO</a></p><p>This blog has running : 1076 d 2 h 40 m 44 sღゝ◡╹)ノ♡</p><p>友情链接：<a href="https://msg.cnblogs.com/send/huanhao">申请坑位</a>&#x2F;<a href="https://msg.cnblogs.com/send/huanhao">申请坑位</a>&#x2F;<a href="https://msg.cnblogs.com/send/huanhao">申请坑位</a>&#x2F;<a href="https://msg.cnblogs.com/send/huanhao">申请坑位</a>&#x2F;<a href="https://msg.cnblogs.com/send/huanhao">申请坑位</a></p><p>Copyright © 2023 huanhao Powered by .NET 7.0 on Kubernetes</p><p>Theme version: <a href="https://github.com/BNDong/Cnblogs-Theme-SimpleMemory/tree/v1.2.6">v1.2.6</a> &#x2F; Loading theme version: <a href="https://github.com/BNDong/Cnblogs-Theme-SimpleMemory/tree/v1.2.6">v1.2.6</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JavaGuide</title>
      <link href="/2023/01/26/post-hexo%E4%BF%AE%E5%A4%8D%E5%91%BD%E4%BB%A4%E8%A1%8C/"/>
      <url>/2023/01/26/post-hexo%E4%BF%AE%E5%A4%8D%E5%91%BD%E4%BB%A4%E8%A1%8C/</url>
      
        <content type="html"><![CDATA[<p>推荐你通过在线阅读网站进行阅读，体验更好，速度更快！</p><ul><li><strong><a href="https://javaguide.cn/">JavaGuide 在线阅读网站（新版，推荐👍）</a></strong></li><li><a href="https://snailclimb.gitee.io/javaguide/#/">JavaGuide 在线阅读版（老版）</a></li></ul><div align="center">    <p>        <a href="https://www.yuque.com/docs/share/8a30ffb5-83f3-40f9-baf9-38de68b906dc">            <img src="https://guide-blog-images.oss-cn-shenzhen.aliyuncs.com/xingqiu/xingqiu.png" style="margin: 0 auto; width: 850px;" />        </a>    </p>    <p>        <a href="https://github.com/Snailclimb/JavaGuide" target="_blank">            <img src="https://img-blog.csdnimg.cn/img_convert/1c00413c65d1995993bf2b0daf7b4f03.png#pic_center" width="" />        </a>    </p>    <p>        <a href="https://javaguide.cn/"><img src="https://img.shields.io/badge/阅读-read-brightgreen.svg" alt="阅读" /></a>        <img src="https://img.shields.io/github/stars/Snailclimb/JavaGuide" alt="stars" />        <img src="https://img.shields.io/github/forks/Snailclimb/JavaGuide" alt="forks" />        <img src="https://img.shields.io/github/issues/Snailclimb/JavaGuide" alt="issues" />    </p>    <p>        <a href="https://github.com/Snailclimb/JavaGuide">Github</a> |        <a href="https://gitee.com/SnailClimb/JavaGuide">Gitee</a>    </p>  </div><blockquote><ol><li><strong>面试专版</strong> ：准备面试的小伙伴可以考虑面试专版：<a href="https://www.yuque.com/docs/share/f37fc804-bfe6-4b0d-b373-9c462188fec7">《Java 面试进阶指北 》</a> (质量很高，专为面试打造，配合 JavaGuide 食用)。</li><li><strong>知识星球</strong> ：专属面试小册&#x2F;一对一交流&#x2F;简历修改&#x2F;专属求职指南，欢迎加入 <a href="https://www.yuque.com/docs/share/8a30ffb5-83f3-40f9-baf9-38de68b906dc">JavaGuide 知识星球</a>（点击链接即可查看星球的详细介绍，一定一定一定确定自己真的需要再加入，一定一定要看完详细介绍之后再加我）。</li><li><strong>转载须知</strong> ：以下所有文章如非文首说明为转载皆为我（Guide 哥）的原创，转载在文首注明出处，如发现恶意抄袭&#x2F;搬运，会动用法律武器维护自己的权益。让我们一起维护一个良好的技术创作</li></ol></blockquote><h2 id="项目相关"><a href="#项目相关" class="headerlink" title="项目相关"></a>项目相关</h2><ul><li><a href="./docs/javaguide/intro.md">项目介绍</a></li><li><a href="./docs/javaguide/contribution-guideline.md">贡献指南</a></li><li><a href="./docs/javaguide/faq.md">常见问题</a></li><li><a href="./docs/javaguide/todo.md">项目代办</a></li></ul><h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h3><p><strong>知识点&#x2F;面试题总结</strong> : (必看:+1: )：</p><ul><li><a href="./docs/java/basis/java-basic-questions-01.md">Java 基础常见知识点&amp;面试题总结(上)</a></li><li><a href="./docs/java/basis/java-basic-questions-02.md">Java 基础常见知识点&amp;面试题总结(中)</a></li><li><a href="./docs/java/basis/java-basic-questions-03.md">Java 基础常见知识点&amp;面试题总结(下)</a></li></ul><p><strong>重要知识点详解</strong> ：</p><ul><li><a href="./docs/java/basis/why-there-only-value-passing-in-java.md">为什么 Java 中只有值传递？</a></li><li><a href="./docs/java/basis/serialization.md">Java 序列化详解</a></li><li><a href="./docs/java/basis/generics-and-wildcards.md">泛型&amp;通配符详解</a></li><li><a href="./docs/java/basis/reflection.md">Java 反射机制详解</a></li><li><a href="./docs/java/basis/proxy.md">Java 代理模式详解</a></li><li><a href="./docs/java/basis/bigdecimal.md">BigDecimal 详解</a></li><li><a href="./docs/java/basis/unsafe.md">Java 魔法类 Unsafe 详解</a></li><li><a href="./docs/java/basis/spi.md">Java SPI 机制详解</a></li><li><a href="./docs/java/basis/syntactic-sugar.md">Java 语法糖详解</a></li></ul><h3 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h3><p><strong>知识点&#x2F;面试题总结</strong> ：</p><ul><li><a href="./docs/java/collection/java-collection-questions-01.md">Java 集合常见知识点&amp;面试题总结(上)</a> (必看 :+1:)</li><li><a href="./docs/java/collection/java-collection-questions-02.md">Java 集合常见知识点&amp;面试题总结(下)</a> (必看 :+1:)</li><li><a href="./docs/java/collection/java-collection-precautions-for-use.md">Java 容器使用注意事项总结</a></li></ul><p><strong>源码分析</strong> ：</p><ul><li><a href="./docs/java/collection/arraylist-source-code.md">ArrayList 源码+扩容机制分析</a></li><li><a href="./docs/java/collection/hashmap-source-code.md">HashMap(JDK1.8)源码+底层数据结构分析</a></li><li><a href="./docs/java/collection/concurrent-hash-map-source-code.md">ConcurrentHashMap 源码+底层数据结构分析</a></li></ul><h3 id="IO"><a href="#IO" class="headerlink" title="IO"></a>IO</h3><ul><li><a href="./docs/java/io/io-basis.md">IO 基础知识总结</a></li><li><a href="./docs/java/io/io-design-patterns.md">IO 设计模式总结</a></li><li><a href="./docs/java/io/io-model.md">IO 模型详解</a></li></ul><h3 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h3><p><strong>知识点&#x2F;面试题总结</strong> : (必看 :+1:)</p><ul><li><a href="./docs/java/concurrent/java-concurrent-questions-01.md">Java 并发常见知识点&amp;面试题总结（上）</a></li><li><a href="./docs/java/concurrent/java-concurrent-questions-02.md">Java 并发常见知识点&amp;面试题总结（中）</a></li><li><a href="./docs/java/concurrent/java-concurrent-questions-03.md">Java 并发常见知识点&amp;面试题总结（下）</a></li></ul><p><strong>重要知识点详解</strong> ：</p><ul><li><a href="./docs/java/concurrent/jmm.md">JMM（Java 内存模型）详解</a></li><li><strong>线程池</strong> ：<a href="./docs/java/concurrent/java-thread-pool-summary.md">Java 线程池详解</a>、<a href="./docs/java/concurrent/java-thread-pool-best-practices.md">Java 线程池最佳实践</a></li><li><a href="./docs/java/concurrent/threadlocal.md">ThreadLocal 详解</a></li><li><a href="./docs/java/concurrent/java-concurrent-collections.md">Java 并发容器总结</a></li><li><a href="./docs/java/concurrent/atomic-classes.md">Atomic 原子类总结</a></li><li><a href="./docs/java/concurrent/aqs.md">AQS 详解</a></li><li><a href="./docs/java/concurrent/completablefuture-intro.md">CompletableFuture入门</a></li></ul><h3 id="JVM-必看-1"><a href="#JVM-必看-1" class="headerlink" title="JVM (必看 :+1:)"></a>JVM (必看 :+1:)</h3><p>JVM 这部分内容主要参考 <a href="https://docs.oracle.com/javase/specs/jvms/se8/html/index.html">JVM 虚拟机规范-Java8 </a> 和周志明老师的<a href="https://book.douban.com/subject/34907497/">《深入理解Java虚拟机（第3版）》</a> （强烈建议阅读多遍！）。</p><ul><li><strong><a href="./docs/java/jvm/memory-area.md">Java 内存区域</a></strong></li><li><strong><a href="./docs/java/jvm/jvm-garbage-collection.md">JVM 垃圾回收</a></strong></li><li><a href="./docs/java/jvm/class-file-structure.md">类文件结构</a></li><li><strong><a href="./docs/java/jvm/class-loading-process.md">类加载过程</a></strong></li><li><a href="./docs/java/jvm/classloader.md">类加载器</a></li><li><a href="./docs/java/jvm/jvm-parameters-intro.md">【待完成】最重要的 JVM 参数总结（翻译完善了一半）</a></li><li><a href="./docs/java/jvm/jvm-intro.md">【加餐】大白话带你认识 JVM</a></li><li><a href="./docs/java/jvm/jdk-monitoring-and-troubleshooting-tools.md">JDK 监控和故障处理工具</a></li></ul><h3 id="新特性"><a href="#新特性" class="headerlink" title="新特性"></a>新特性</h3><ul><li><strong>Java 8</strong> ：<a href="./docs/java/new-features/java8-tutorial-translate.md">Java 8 新特性总结（翻译）</a>、<a href="./docs/java/new-features/java8-common-new-features.md">Java8常用新特性总结</a></li><li><a href="./docs/java/new-features/java9.md">Java 9 新特性概览</a></li><li><a href="./docs/java/new-features/java10.md">Java 10 新特性概览</a></li><li><a href="./docs/java/new-features/java11.md">Java 11 新特性概览</a></li><li><a href="./docs/java/new-features/java12-13.md">Java 12~13 新特性概览</a></li><li><a href="./docs/java/new-features/java14.md">Java 14 新特性概览</a></li><li><a href="./docs/java/new-features/java15.md">Java 15 新特性概览</a></li><li><a href="./docs/java/new-features/java16.md">Java 16 新特性概览</a></li><li><a href="./docs/java/new-features/java18.md">Java 18 新特性概览</a></li><li><a href="./docs/java/new-features/java19.md">Java 19 新特性概览</a></li></ul><h2 id="计算机基础"><a href="#计算机基础" class="headerlink" title="计算机基础"></a>计算机基础</h2><h3 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h3><ul><li><a href="./docs/cs-basics/operating-system/operating-system-basic-questions-01.md">操作系统常见问题总结！</a></li><li><a href="./docs/cs-basics/operating-system/linux-intro.md">后端程序员必备的 Linux 基础知识总结</a></li><li><a href="./docs/cs-basics/operating-system/shell-intro.md">Shell 编程基础知识总结</a></li></ul><h3 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h3><p><strong>知识点&#x2F;面试题总结</strong> ：</p><ul><li><a href="./docs/cs-basics/network/other-network-questions.md">计算机网络常见知识点&amp;面试题总结</a></li><li><a href="./docs/cs-basics/network/computer-network-xiexiren-summary.md">谢希仁老师的《计算机网络》内容总结（补充）</a></li></ul><p><strong>重要知识点详解</strong> ：</p><ul><li><a href="./docs/cs-basics/network/osi&tcp-ip-model.md">OSI 和 TCP&#x2F;IP 网络分层模型详解（基础）</a></li><li><a href="./docs/cs-basics/network/application-layer-protocol.md">应用层常见协议总结（应用层）</a></li><li><a href="./docs/cs-basics/network/http&https.md">HTTP vs HTTPS（应用层）</a></li><li><a href="./docs/cs-basics/network/http1.0&http1.1.md">HTTP 1.0 vs HTTP 1.1（应用层）</a></li><li><a href="./docs/cs-basics/network/http-status-codes.md">HTTP 常见状态码（应用层）</a></li><li><a href="./docs/cs-basics/network/tcp-connection-and-disconnection.md">TCP 三次握手和四次挥手（传输层）</a></li><li><a href="./docs/cs-basics/network/tcp-reliability-guarantee.md">TCP 传输可靠性保障（传输层）</a></li><li><a href="./docs/cs-basics/network/arp.md">ARP 协议详解(网络层)</a></li></ul><h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><p><strong>图解数据结构：</strong></p><ul><li><a href="./docs/cs-basics/data-structure/linear-data-structure.md">线性数据结构 :数组、链表、栈、队列</a></li><li><a href="./docs/cs-basics/data-structure/graph.md">图</a></li><li><a href="./docs/cs-basics/data-structure/heap.md">堆</a></li><li><a href="./docs/cs-basics/data-structure/tree.md">树</a> ：重点关注<a href="./docs/cs-basics/data-structure/red-black-tree.md">红黑树</a>、B-，B+，B*树、LSM树</li></ul><p>其他常用数据结构 ：</p><ul><li><a href="./docs/cs-basics/data-structure/bloom-filter.md">布隆过滤器</a></li></ul><h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h3><p>算法这部分内容非常重要，如果你不知道如何学习算法的话，可以看下我写的：</p><ul><li><a href="https://www.zhihu.com/question/323359308/answer/1545320858">算法学习书籍+资源推荐</a> 。</li><li><a href="https://www.zhihu.com/question/31092580/answer/1534887374">如何刷Leetcode?</a></li></ul><p><strong>常见算法问题总结</strong> ：</p><ul><li><a href="./docs/cs-basics/algorithms/string-algorithm-problems.md">几道常见的字符串算法题总结 </a></li><li><a href="./docs/cs-basics/algorithms/linkedlist-algorithm-problems.md">几道常见的链表算法题总结 </a></li><li><a href="./docs/cs-basics/algorithms/the-sword-refers-to-offer.md">剑指 offer 部分编程题</a></li><li><a href="./docs/cs-basics/algorithms/10-classical-sorting-algorithms.md">十大经典排序算法</a></li></ul><p>另外，<a href="https://www.geeksforgeeks.org/fundamentals-of-algorithms/">GeeksforGeeks</a> 这个网站总结了常见的算法 ，比较全面系统。</p><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><h3 id="基础-1"><a href="#基础-1" class="headerlink" title="基础"></a>基础</h3><ul><li><a href="./docs/database/basis.md">数据库基础知识总结</a></li><li><a href="./docs/database/character-set.md">字符集详解</a></li></ul><h3 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h3><p><strong>知识点&#x2F;面试题总结：</strong></p><ul><li><strong><a href="./docs/database/mysql/mysql-questions-01.md">MySQL知识点总结</a></strong> (必看 :+1:)</li><li><a href="./docs/database/mysql/mysql-high-performance-optimization-specification-recommendations.md">MySQL 高性能优化规范建议总结</a></li></ul><p><strong>重要知识点：</strong></p><ul><li><a href="./docs/database/mysql/mysql-index.md">MySQL数据库索引总结</a></li><li><a href="./docs/database/mysql/transaction-isolation-level.md">事务隔离级别(图文详解)</a></li><li><a href="./docs/database/mysql/mysql-logs.md">MySQL三大日志(binlog、redo log和undo log)详解</a></li><li><a href="./docs/database/mysql/innodb-implementation-of-mvcc.md">InnoDB存储引擎对MVCC的实现</a></li><li><a href="./docs/database/mysql/how-sql-executed-in-mysql.md">SQL语句在MySQL中的执行过程</a></li><li><a href="./docs/database/mysql/some-thoughts-on-database-storage-time.md">关于数据库中如何存储时间的一点思考</a></li><li><a href="./docs/database/mysql/index-invalidation-caused-by-implicit-conversion.md">MySQL中的隐式转换造成的索引失效</a></li></ul><h3 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h3><p><strong>知识点&#x2F;面试题总结</strong> : (必看:+1: )：</p><ul><li><a href="./docs/database/redis/redis-questions-01.md">Redis 常见问题总结(上)</a></li><li><a href="./docs/database/redis/redis-questions-02.md">Redis 常见问题总结(下)</a></li></ul><p><strong>重要知识点：</strong></p><ul><li><a href="./docs/database/redis/3-commonly-used-cache-read-and-write-strategies.md">3种常用的缓存读写策略详解</a></li><li><a href="./docs/database/redis/redis-data-structures-01.md">Redis 5 种基本数据结构详解</a></li><li><a href="./docs/database/redis/redis-data-structures-02.md">Redis 3 种特殊数据结构详解</a></li><li><a href="./docs/database/redis/redis-memory-fragmentation.md">Redis 内存碎片详解</a></li><li><a href="./docs/database/redis/redis-cluster.md">Redis 集群详解</a></li></ul><h2 id="搜索引擎"><a href="#搜索引擎" class="headerlink" title="搜索引擎"></a>搜索引擎</h2><p>用于提高搜索效率，功能和浏览器搜索引擎类似。比较常见的搜索引擎是 Elasticsearch（推荐） 和 Solr。</p><p><img src="https://guide-blog-images.oss-cn-shenzhen.aliyuncs.com/github/javaguide/gongzhonghaoxuanchuan.png" alt="JavaGuide 官方公众号"></p><h2 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h2><h3 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h3><ul><li><a href="./docs/tools/docker/docker-intro.md">Docker 基本概念解读</a></li><li><a href="./docs/tools/docker/docker-in-action.md">Docker从入门到上手干事</a></li></ul><h3 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h3><ul><li><a href="./docs/tools/git/git-intro.md">Git 入门</a></li><li><a href="./docs/tools/git/github-tips.md">Github 小技巧</a></li></ul><h2 id="系统设计"><a href="#系统设计" class="headerlink" title="系统设计"></a>系统设计</h2><ul><li><a href="./docs/system-design/system-design-questions.md">系统设计常见面试题总结</a></li><li><a href="./docs/system-design/design-pattern.md">设计模式常见面试题总结</a></li></ul><h3 id="基础-2"><a href="#基础-2" class="headerlink" title="基础"></a>基础</h3><ul><li><a href="./docs/system-design/basis/RESTfulAPI.md">RestFul API 简明教程</a></li><li><a href="./docs/system-design/basis/naming.md">Java 编码命名之道</a> </li><li><a href="./docs/system-design/basis/refactoring.md">代码重构指南</a></li><li><a href="./docs/system-design/basis/unit-test.md">单元测试指南</a></li></ul><h3 id="常用框架"><a href="#常用框架" class="headerlink" title="常用框架"></a>常用框架</h3><h4 id="Spring-x2F-SpringBoot-必看-1"><a href="#Spring-x2F-SpringBoot-必看-1" class="headerlink" title="Spring&#x2F;SpringBoot (必看 :+1:)"></a>Spring&#x2F;SpringBoot (必看 :+1:)</h4><p><strong>知识点&#x2F;面试题总结</strong> :</p><ul><li><a href="./docs/system-design/framework/spring/spring-knowledge-and-questions-summary.md">Spring 常见知识点&amp;面试题总结</a></li><li><a href="./docs/system-design/framework/spring/springboot-knowledge-and-questions-summary.md">SpringBoot 常见知识点&amp;面试题总结</a></li><li><a href="./docs/system-design/framework/spring/spring-common-annotations.md">Spring&#x2F;Spring Boot 常用注解总结</a></li><li><a href="https://github.com/Snailclimb/springboot-guide">SpringBoot 入门指南</a></li></ul><p><strong>重要知识点详解</strong> ：</p><ul><li><a href="./docs/system-design/framework/spring/spring-transaction.md">Spring 事务详解</a></li><li><a href="./docs/system-design/framework/spring/spring-design-patterns-summary.md">Spring 中的设计模式详解</a></li><li><a href="./docs/system-design/framework/spring/spring-boot-auto-assembly-principles.md">SpringBoot 自动装配原理详解</a></li></ul><h4 id="MyBatis"><a href="#MyBatis" class="headerlink" title="MyBatis"></a>MyBatis</h4><p><a href="./docs/system-design/framework/mybatis/mybatis-interview.md">MyBatis 常见面试题总结</a></p><h3 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h3><h4 id="认证授权"><a href="#认证授权" class="headerlink" title="认证授权"></a>认证授权</h4><ul><li><a href="./docs/system-design/security/basis-of-authority-certification.md">认证授权基础概念详解</a></li><li><a href="./docs/system-design/security/jwt-intro.md">JWT 基础概念详解</a></li><li><a href="./docs/system-design/security/advantages&disadvantages-of-jwt.md">JWT 优缺点分析以及常见问题解决方案</a></li><li><a href="./docs/system-design/security/sso-intro.md">SSO 单点登录详解</a></li><li><a href="./docs/system-design/security/design-of-authority-system.md">权限系统设计详解</a></li></ul><h4 id="数据脱敏"><a href="#数据脱敏" class="headerlink" title="数据脱敏"></a>数据脱敏</h4><p>数据脱敏说的就是我们根据特定的规则对敏感信息数据进行变形，比如我们把手机号、身份证号某些位数使用 * 来代替。</p><h4 id="敏感词过滤"><a href="#敏感词过滤" class="headerlink" title="敏感词过滤"></a>敏感词过滤</h4><p><a href="./docs/system-design/security/sentive-words-filter.md">敏感词过滤方案总结</a></p><h3 id="定时任务"><a href="#定时任务" class="headerlink" title="定时任务"></a>定时任务</h3><p><a href="./docs/system-design/schedule-task.md">Java 定时任务详解</a></p><h3 id="Web-实时消息推送"><a href="#Web-实时消息推送" class="headerlink" title="Web 实时消息推送"></a>Web 实时消息推送</h3><p><a href="./docs/system-design/web-real-time-message-push.md">Web 实时消息推送详解</a></p><h2 id="分布式"><a href="#分布式" class="headerlink" title="分布式"></a>分布式</h2><h3 id="理论-amp-算法-amp-协议"><a href="#理论-amp-算法-amp-协议" class="headerlink" title="理论&amp;算法&amp;协议"></a>理论&amp;算法&amp;协议</h3><ul><li><a href="./docs/distributed-system/theorem&algorithm&protocol/cap&base-theorem.md">CAP 理论和 BASE 理论解读</a></li><li><a href="./docs/distributed-system/theorem&algorithm&protocol/paxos-algorithm.md">Paxos 算法解读</a></li><li><a href="./docs/distributed-system/theorem&algorithm&protocol/raft-algorithm.md">Raft 算法解读</a></li></ul><h3 id="API-网关"><a href="#API-网关" class="headerlink" title="API 网关"></a>API 网关</h3><p><a href="./docs/distributed-system/api-gateway.md">API 网关详解</a></p><h3 id="分布式-ID"><a href="#分布式-ID" class="headerlink" title="分布式 ID"></a>分布式 ID</h3><p><a href="./docs/distributed-system/distributed-id.md">分布式 ID 详解</a></p><h3 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h3><p><a href="./docs/distributed-system/distributed-lock.md">分布式锁详解</a></p><h3 id="分布式事务"><a href="#分布式事务" class="headerlink" title="分布式事务"></a>分布式事务</h3><p><a href="./docs/distributed-system/distributed-transaction.md">分布式事务详解</a></p><h3 id="分布式配置中心"><a href="#分布式配置中心" class="headerlink" title="分布式配置中心"></a>分布式配置中心</h3><p><a href="./docs/distributed-system/distributed-configuration-center.md">分布式配置中心详解</a></p><h3 id="RPC"><a href="#RPC" class="headerlink" title="RPC"></a>RPC</h3><ul><li><a href="./docs/distributed-system/rpc/rpc-intro.md">RPC 基础常见知识点&amp;面试题总结</a></li><li><a href="./docs/distributed-system/rpc/dubbo.md">Dubbo 常见知识点&amp;面试题总结</a></li></ul><h3 id="ZooKeeper"><a href="#ZooKeeper" class="headerlink" title="ZooKeeper"></a>ZooKeeper</h3><blockquote><p>前两篇文章可能有内容重合部分，推荐都看一遍。</p></blockquote><ul><li><a href="./docs/distributed-system/distributed-process-coordination/zookeeper/zookeeper-intro.md">ZooKeeper 相关概念总结(入门)</a></li><li><a href="./docs/distributed-system/distributed-process-coordination/zookeeper/zookeeper-plus.md">ZooKeeper 相关概念总结(进阶)</a></li><li><a href="./docs/distributed-system/distributed-process-coordination/zookeeper/zookeeper-in-action.md">ZooKeeper 实战</a></li></ul><h2 id="高性能"><a href="#高性能" class="headerlink" title="高性能"></a>高性能</h2><h3 id="数据库读写分离-amp-分库分表"><a href="#数据库读写分离-amp-分库分表" class="headerlink" title="数据库读写分离&amp;分库分表"></a>数据库读写分离&amp;分库分表</h3><p><a href="./docs/high-performance/read-and-write-separation-and-library-subtable.md">数据库读写分离&amp;分库分表详解</a></p><h3 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h3><p><a href="./docs/high-performance/load-balancing.md">负载均衡详解</a></p><h3 id="SQL-优化"><a href="#SQL-优化" class="headerlink" title="SQL 优化"></a>SQL 优化</h3><p><a href="./docs/high-performance/sql-optimization.md">常见 SQL 优化手段总结</a></p><h3 id="CDN"><a href="#CDN" class="headerlink" title="CDN"></a>CDN</h3><p><a href="./docs/high-performance/cdn.md">CDN（内容分发网络）详解</a></p><h3 id="消息队列"><a href="#消息队列" class="headerlink" title="消息队列"></a>消息队列</h3><p>消息队列在分布式系统中主要是为了解耦和削峰。相关阅读： <a href="./docs/high-performance/message-queue/message-queue.md">消息队列常见问题总结</a>。</p><ul><li><strong>RabbitMQ</strong> : <a href="./docs/high-performance/message-queue/rabbitmq-intro.md">RabbitMQ 基础知识总结</a>、<a href="./docs/high-performance/message-queue/rabbitmq-questions.md">RabbitMQ 常见面试题</a></li><li><strong>RocketMQ</strong> : <a href="./docs/high-performance/message-queue/rocketmq-intro.md">RocketMQ 基础知识总结</a>、<a href="./docs/high-performance/message-queue/rocketmq-questions.md">RocketMQ 常见面试题总结</a></li><li><strong>Kafka</strong> ：<a href="./docs/high-performance/message-queue/kafka-questions-01.md">Kafka 常见问题总结</a></li></ul><h2 id="高可用"><a href="#高可用" class="headerlink" title="高可用"></a>高可用</h2><p><a href="./docs/high-availability/high-availability-system-design.md">高可用系统设计指南</a></p><h3 id="冗余设计"><a href="#冗余设计" class="headerlink" title="冗余设计"></a>冗余设计</h3><p><a href="./docs/high-availability/redundancy.md">冗余设计详解</a></p><h3 id="限流"><a href="#限流" class="headerlink" title="限流"></a>限流</h3><p><a href="./docs/high-availability/limit-request.md">服务限流详解</a></p><h3 id="降级-amp-熔断"><a href="#降级-amp-熔断" class="headerlink" title="降级&amp;熔断"></a>降级&amp;熔断</h3><p><a href="./docs/high-availability/fallback&circuit-breaker.md">降级&amp;熔断详解</a></p><h3 id="超时-amp-重试"><a href="#超时-amp-重试" class="headerlink" title="超时&amp;重试"></a>超时&amp;重试</h3><p><a href="./docs/high-availability/timeout-and-retry.md">超时&amp;重试详解</a></p><h3 id="集群"><a href="#集群" class="headerlink" title="集群"></a>集群</h3><p>相同的服务部署多份，避免单点故障。</p><h3 id="灾备设计和异地多活"><a href="#灾备设计和异地多活" class="headerlink" title="灾备设计和异地多活"></a>灾备设计和异地多活</h3><p><strong>灾备</strong>  &#x3D; 容灾+备份。</p><ul><li><strong>备份</strong> ： 将系统所产生的的所有重要数据多备份几份。</li><li><strong>容灾</strong> ： 在异地建立两个完全相同的系统。当某个地方的系统突然挂掉，整个应用系统可以切换到另一个，这样系统就可以正常提供服务了。</li></ul><p><strong>异地多活</strong> 描述的是将服务部署在异地并且服务同时对外提供服务。和传统的灾备设计的最主要区别在于“多活”，即所有站点都是同时在对外提供服务的。异地多活是为了应对突发状况比如火灾、地震等自然或者人为灾害。</p><h2 id="Star-趋势"><a href="#Star-趋势" class="headerlink" title="Star 趋势"></a>Star 趋势</h2><p><img src="https://api.star-history.com/svg?repos=Snailclimb/JavaGuide&type=Date"></p><h2 id="公众号"><a href="#公众号" class="headerlink" title="公众号"></a>公众号</h2><p>如果大家想要实时关注我更新的文章以及分享的干货的话，可以关注我的公众号。</p><p><img src="https://guide-blog-images.oss-cn-shenzhen.aliyuncs.com/github/javaguide/gongzhonghaoxuanchuan.png" alt="JavaGuide 官方公众号"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>计算机理论知识总结</title>
      <link href="/2023/01/25/post-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%90%86%E8%AE%BA%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/"/>
      <url>/2023/01/25/post-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%90%86%E8%AE%BA%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>这个仓库主要用来对计算机学科的基础理论知识和主流编程语言相关内容进行总结，每个目录对应一个大的方向。</p><p>腾讯内推可以发简历到 <a href="mailto:&#x78;&#x75;&#101;&#x7a;&#97;&#x69;&#x67;&#x64;&#115;&#x40;&#103;&#x6d;&#97;&#105;&#x6c;&#x2e;&#99;&#111;&#109;">&#x78;&#x75;&#101;&#x7a;&#97;&#x69;&#x67;&#x64;&#115;&#x40;&#103;&#x6d;&#97;&#105;&#x6c;&#x2e;&#99;&#111;&#109;</a> ，邮件标题：<strong>学校+手机号+岗位</strong>。我会对合适的简历，内推到相应部门，并及时反馈面试进度与结果。关于TX 面试的一些疑问，也可以发邮件到邮箱咨询。</p><h1 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h1><p>主要包含的计算机基础有以下几个大方向：</p><ul><li><a href="DataBase/">DataBase</a></li><li><a href="DataStructure/">DataStructure</a></li><li><a href="Linux_OS/">Linux_OS</a></li><li><a href="Network/">Network</a></li><li><a href="Algorithm/">Algorithm</a></li><li><a href="Math/">Math</a></li></ul><p>编程语言目前有：</p><ul><li><a href="Python/">Python</a></li><li><a href="C++/">C++</a></li></ul><p>此外，还有几个目录：</p><ul><li><a href="Coding/">Coding</a>：一些 C++ 的代码</li><li><a href="OnlineJudge/">OnlineJudge</a>：一些 OJ 的解题代码</li><li><a href="Offer/">Offer</a>：主要分享一些和找工作相关的内容</li><li><a href="Others/">Others</a>：一些无法归类，但是可能有用的东西</li></ul><p>最后，<a href="Questions.md">Questions</a> 文件列出了一些重要的知识点，可以用来自检，看看自己有没有遗漏一些重要知识点。</p><p>问题清单，用以自检！</p><h1 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h1><ul><li><input disabled="" type="checkbox"> 文件共享：软链接，硬链接</li><li><input disabled="" type="checkbox"> 系统调用与标准库函数的区别</li><li><input disabled="" type="checkbox"> 内核态、用户态</li><li><input disabled="" type="checkbox"> 系统如何将信号通知到进程</li></ul><h1 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h1><ul><li><input disabled="" type="checkbox"> <a href="Network/OSI_TCP_IP.md#osi-%E5%8F%82%E8%80%83%E6%A8%A1%E5%9E%8B">OSI 网络参考模型</a></li><li><input disabled="" type="checkbox"> <a href="Network/OSI_TCP_IP.md#tcpip-%E5%8D%8F%E8%AE%AE%E6%A0%88">TCP&#x2F;IP 协议栈</a></li><li><input disabled="" type="checkbox"> <a href="Network/TCP.md#%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E5%BB%BA%E7%AB%8B%E8%BF%9E%E6%8E%A5">TCP 三次握手建立连接</a></li><li><input disabled="" type="checkbox"> <a href="Network/TCP.md#%E5%9B%9B%E6%AC%A1%E6%8F%A1%E6%89%8B%E6%96%AD%E5%BC%80%E8%BF%9E%E6%8E%A5">TCP 四次握手断开连接</a></li><li><input disabled="" type="checkbox"> <a href="Network/TCP.md#tcp-%E9%87%8D%E4%BC%A0%E6%9C%BA%E5%88%B6">TCP 重传机制</a></li><li><input disabled="" type="checkbox"> <a href="Network/TCP.md#tcp-%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3">TCP 滑动窗口</a></li><li><input disabled="" type="checkbox"> <a href="Network/TCP.md#tcp-%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6">TCP 拥塞控制</a></li><li><input disabled="" type="checkbox"> <a href="Network/Socket.md">Socket 套接字编程</a></li><li><input disabled="" type="checkbox"> <a href="Network/HTTP.md#http%E5%8D%8F%E8%AE%AE%E4%B9%8Bget%E5%92%8Cpost">get post 区别</a></li><li><input disabled="" type="checkbox"> <a href="Network/Questions.md#qq-%E4%BC%A0%E8%BE%93%E5%B1%82udp">QQ 传输层UDP</a></li><li><input disabled="" type="checkbox"> <a href="Network/Questions.md#%E8%AE%BF%E9%97%AE%E7%BD%91%E9%A1%B5%E8%BF%87%E7%A8%8B">访问网页背后流程</a></li></ul><h1 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h1><ul><li><input disabled="" type="checkbox"> <a href="DataBase/Concept.md#%E7%A0%81">超码，候选吗，主码</a></li><li><input disabled="" type="checkbox"> <a href="DataBase/Concept.md#%E5%85%B3%E7%B3%BB%E4%BB%A3%E6%95%B0">关系代数运算，各种连接</a></li><li><input disabled="" type="checkbox"> <a href="DataBase/Design.md#%E4%B8%BB%E9%94%AE%E5%A4%96%E9%94%AE">主键、外键</a></li><li><input disabled="" type="checkbox"> <a href="DataBase/Design.md#%E5%8E%9F%E5%AD%90%E5%9F%9F%E5%92%8C%E7%AC%AC%E4%B8%80%E8%8C%83%E5%BC%8F">原子域和第一范式</a></li><li><input disabled="" type="checkbox"> <a href="DataBase/Design.md#%E7%AC%AC%E4%BA%8C%E8%8C%83%E5%BC%8F">第二范式</a></li><li><input disabled="" type="checkbox"> <a href="DataBase/Design.md#%E7%AC%AC%E4%B8%89%E8%8C%83%E5%BC%8F">第三范式</a></li><li><input disabled="" type="checkbox"> <a href="DataBase/Design.md#bcnf-%E8%8C%83%E5%BC%8F">BCNF 范式</a></li><li><input disabled="" type="checkbox"> <a href="DataBase/Design.md#%E8%8C%83%E5%BC%8F%E8%BF%98%E6%98%AF%E5%8F%8D%E8%8C%83%E5%BC%8F">一定要遵守范式吗</a></li><li><input disabled="" type="checkbox"> <a href="DataBase/SQL_Basic.md#sql-dml%E5%A2%9E%E5%88%A0%E6%9F%A5%E6%94%B9">SQL DML：增删查改</a></li><li><input disabled="" type="checkbox"> <a href="DataBase/SQL_Basic.md#sql-%E5%AD%90%E5%8F%A5%E5%87%BD%E6%95%B0">SQL 子句、函数</a></li><li><input disabled="" type="checkbox"> <a href="DataBase/SQL_Basic.md#sql-ddl">SQL DDL：数据表操作</a></li><li><input disabled="" type="checkbox"> <a href="DataBase/SQL_More.md#%E4%BA%8B%E5%8A%A1">事物，隔离级别</a></li><li><input disabled="" type="checkbox"> <a href="DataBase/Engine.md">存储引擎介绍</a></li><li><input disabled="" type="checkbox"> <a href="DataBase/Index.md">索引原理，分类以及策略</a></li><li><input disabled="" type="checkbox"> <a href="DataBase/Mysql.md">Mysql 的简单使用</a></li></ul><h1 id="数据结构、算法"><a href="#数据结构、算法" class="headerlink" title="数据结构、算法"></a>数据结构、算法</h1><ul><li><input disabled="" type="checkbox"> <a href="Algorithm/Sort.md">经典排序算法</a></li><li><input disabled="" type="checkbox"> <a href="http://selfboot.cn/2016/09/01/lost_partition/">partition 算法</a></li><li><input disabled="" type="checkbox"> <a href="https://github.com/xuelangZF/LeetCode/tree/master/BinarySearch">二分查找算法</a></li><li><input disabled="" type="checkbox"> <a href="https://github.com/xuelangZF/LeetCode/tree/master/Recursion">递归，递归，递归！</a></li></ul><h1 id="C-x2F-C"><a href="#C-x2F-C" class="headerlink" title="C&#x2F;C++"></a>C&#x2F;C++</h1><ul><li><input disabled="" type="checkbox"> <a href="C++/Basic.md/#%E5%A3%B0%E6%98%8E%E8%BF%98%E6%98%AF%E5%AE%9A%E4%B9%89">声明还是定义</a></li><li><input disabled="" type="checkbox"> <a href="C++/Basic.md#%E5%B7%A6%E5%80%BC%E8%BF%98%E6%98%AF%E5%8F%B3%E5%80%BC">左值还是右值</a></li><li><input disabled="" type="checkbox"> <a href="C++/Basic.md#%E5%BC%95%E7%94%A8">引用的使用</a></li><li><input disabled="" type="checkbox"> <a href="C++/Keywords.md#const">const 五大类用法</a></li><li><input disabled="" type="checkbox"> <a href="C++/Keywords.md#static">static 五种用途</a></li><li><input disabled="" type="checkbox"> <a href="C++/Keywords.md#extern">extern 作用</a></li><li><input disabled="" type="checkbox"> <a href="C++/Keywords.md#extern-c">extern “C” 函数名修饰机制</a></li><li><input disabled="" type="checkbox"> <a href="C++/Keywords.md#volatile">volatile 稳定访问特殊地址</a></li><li><input disabled="" type="checkbox"> <a href="C++/Keywords.md#register">register 寄存器优化</a></li><li><input disabled="" type="checkbox"> <a href="C++/Keywords.md#final">final 禁止继承或者覆盖</a></li><li><input disabled="" type="checkbox"> <a href="C++/Keywords.md#inline">inline 内联函数</a></li><li><input disabled="" type="checkbox"> <a href="C++/Keywords.md#typedef">typedef 类型别名</a></li><li><input disabled="" type="checkbox"> <a href="C++/Keywords.md#explicit">explicit 避免隐式类型转换</a></li><li><input disabled="" type="checkbox"> <a href="C++/Class.md#%E8%B5%8B%E5%80%BC%E8%BF%98%E6%98%AF%E6%9E%84%E9%80%A0">赋值还是拷贝构造</a></li><li><input disabled="" type="checkbox"> <a href="C++/Class.md#%E7%A6%81%E6%AD%A2%E5%AF%B9%E8%B1%A1%E4%BA%A7%E7%94%9F%E5%9C%A8%E5%A0%86%E6%A0%88%E4%B8%AD">禁止对象产生在堆栈上</a></li><li><input disabled="" type="checkbox"> <a href="C++/Class.md#%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E5%88%9D%E5%A7%8B%E5%80%BC%E5%88%97%E8%A1%A8">类内初始化</a></li><li><input disabled="" type="checkbox"> <a href="C++/Class.md#%E5%A4%9A%E6%80%81">虚函数实现机制</a></li><li><input disabled="" type="checkbox"> <a href="C++/Class.md#%E6%88%90%E5%91%98%E5%87%BD%E6%95%B0">函数重载、覆盖、隐藏区别</a></li><li><input disabled="" type="checkbox"> <a href="C++/README.md#%E6%95%B0%E7%BB%84%E5%BD%A2%E5%8F%82">数组作为形参</a></li><li><input disabled="" type="checkbox"> <a href="C++/Pointer.md#%E6%8C%87%E9%92%88%E4%B8%8E%E5%BC%95%E7%94%A8">指针与引用区别</a></li><li><input disabled="" type="checkbox"> <a href="C++/Pointer.md#%E5%87%BD%E6%95%B0%E6%8C%87%E9%92%88">函数指针</a></li><li><input disabled="" type="checkbox"> <a href="C++/Basic.md#%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90">内存对齐原则</a></li><li><input disabled="" type="checkbox"> <a href="C++/Basic.md#sizeof-%E8%BF%90%E7%AE%97%E7%AC%A6">sizeof 运算符</a></li><li><input disabled="" type="checkbox"> <a href="C++/Basic.md#%E8%81%94%E5%90%88%E4%BD%93cpu%E5%AD%97%E8%8A%82%E5%BA%8F">union 实现 CPU 字节序判定</a></li><li><input disabled="" type="checkbox"> <a href="Linux_OS/StackHeap.md">内存堆栈的区别</a></li><li><input disabled="" type="checkbox"> <a href="C++/Memory.md#%E5%B8%B8%E8%A7%81%E7%9A%84%E5%86%85%E5%AD%98%E9%94%99%E8%AF%AF">常见的内存错误</a></li><li><input disabled="" type="checkbox"> <a href="C++/Memory.md#new-%E5%92%8C-malloc-%E7%9A%84%E5%AF%B9%E6%AF%94">new 和 malloc 区别</a></li><li><input disabled="" type="checkbox"> <a href="C++/Basic.md#%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2">四种类型转换方式</a></li><li><input disabled="" type="checkbox"> <a href="C++/Compiler.md#%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB">include 头文件包含</a></li><li><input disabled="" type="checkbox"> <a href="C++/Function#%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0">按值传递和按引用传递区别</a></li><li><input disabled="" type="checkbox"> <a href="C++/Basic.md#if-%E5%88%A4%E6%96%AD%E8%AF%AD%E5%8F%A5">If 判断规范写法</a></li><li><input disabled="" type="checkbox"> <a href="C++/Basic.md#%E9%80%97%E5%8F%B7%E8%BF%90%E7%AE%97%E7%AC%A6">逗号运算符</a></li><li><input disabled="" type="checkbox"> <a href="C++/11_SmartPoint.md">智能指针</a></li></ul><h1 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h1><ul><li><input disabled="" type="checkbox"> <a href="Python/Class.md#%E6%96%B0%E5%BC%8F%E7%B1%BB%E6%97%A7%E5%BC%8F%E7%B1%BB">新式类、旧式类</a></li><li><input disabled="" type="checkbox"> <a href="Python/Class.md#%E6%96%B9%E6%B3%95">静态方法，类方法，成员方法</a></li><li><input disabled="" type="checkbox"> <a href="Python/Class.md#%E6%95%B0%E6%8D%AE%E5%B1%9E%E6%80%A7">数据属性</a></li><li><input disabled="" type="checkbox"> <a href="Python/Class.md#%E7%B1%BB%E7%9A%84%E7%BB%A7%E6%89%BF">类继承机制</a></li><li><input disabled="" type="checkbox"> <a href="Python/Class.md#%E7%89%B9%E6%AE%8A%E7%9A%84%E7%B1%BB%E6%96%B9%E6%B3%95">特殊的类方法, __call__等</a></li><li><input disabled="" type="checkbox"> <a href="Python/Function.md#%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0">函数参数如何传递</a></li><li><input disabled="" type="checkbox"> <a href="Python/Function.md#lambda-%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0%E6%8D%95%E8%8E%B7%E5%80%BC">lambda 运行时绑定</a></li><li><input disabled="" type="checkbox"> <a href="Python/Function.md#%E9%BB%98%E8%AE%A4%E5%8F%82%E6%95%B0%E5%80%BC">函数默认参数</a></li><li><input disabled="" type="checkbox"> <a href="Python/Function.md#%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0">常用的内置函数</a></li><li><input disabled="" type="checkbox"> <a href="Python/Function.md#sorted">sort 函数用法</a></li><li><input disabled="" type="checkbox"> <a href="Python/Function.md#%E5%87%BD%E6%95%B0%E9%97%AD%E5%8C%85">函数闭包</a></li><li><input disabled="" type="checkbox"> 提高速度的语言上的技巧</li><li><input disabled="" type="checkbox"> 自省机制：type(), dir()…</li><li><input disabled="" type="checkbox"> 列表推导，字典推导式</li><li><input disabled="" type="checkbox"> 函数参数传递</li><li><input disabled="" type="checkbox"> Python 浅拷贝、深拷贝</li><li><input disabled="" type="checkbox"> Python 协程</li><li><input disabled="" type="checkbox"> Python 闭包</li><li><input disabled="" type="checkbox"> Python 实现单例模式</li><li><input disabled="" type="checkbox"> Python 垃圾回收机制</li><li><input disabled="" type="checkbox"> Python 元类</li><li><input disabled="" type="checkbox"> Python 单下划线和双下划线</li><li><input disabled="" type="checkbox"> 新式类和旧式类</li><li><input disabled="" type="checkbox"> yield 关键字</li><li><input disabled="" type="checkbox"> <a href="Python/py2Vs3.md">Python 3 的变换</a></li></ul><h1 id="如何贡献"><a href="#如何贡献" class="headerlink" title="如何贡献"></a>如何贡献</h1><p>大家可以在Issue 里列出一些感兴趣的问题，或者去认领 Issue，提交 Pull Request.</p><p>主要贡献者列表：</p><ul><li><a href="https://github.com/chenyuze">@chenyuze</a></li><li><a href="https://github.com/eligao">@eligao</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>前端的概述</title>
      <link href="/2023/01/25/post-JavaScript%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"/>
      <url>/2023/01/25/post-JavaScript%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="文章目录"><a href="#文章目录" class="headerlink" title="文章目录"></a>文章目录</h1><p>01.JavaScript概述<br>02.HTML中嵌入JavaScript<br>03.JavaScript标识符和变量<br>04.函数的定义和使用<br>05.JS的数据类型<br>1.number数据类型<br>2.boolean数据类型<br>3.String数据类型<br>4.Object数据类型<br>06.在JS当中怎么定义类？怎么new对象？<br>07.null,undefined,NaN的区别</p><p>01.JavaScript概述<br>1.什么是JavaScript?<br>JavaScript是运行在浏览器上的脚本语言。简称JS。<br>JavaScript是网景公司（NetScape)的 布兰登·艾奇 开发的，最初叫做LiveScript。LiveScript的出现让浏览器更加生动，使得页面更具有交互性。<br>JavaScript（简称“JS”） 是一种具有函数优先的轻量级，解释型或即时编译型的编程语言。虽然它是作为开发Web页面的脚本语言而出名的，但是它也被用到了很多非浏览器环境中，JavaScript 基于原型编程、多范式的动态脚本语言，并且支持面向对象、命令式和声明式（如函数式编程）风格。</p><p>JavaScript在1995年由Netscape公司的Brendan Eich，在网景导航者浏览器上首次设计实现而成。因为Netscape与Sun合作，Netscape管理层希望它外观看起来像Java，因此取名为JavaScript。但实际上它的语法风格与Self及Scheme较为接近。</p><p>JavaScript和java没有任何关系，只是语法类似。JavaScript运行在浏览器中，代码由浏览器解释后执行。而Java运行在JVM中。</p><p>JavaScript的“目标程序”以普通文本形式保存，这种语言都叫做”脚本语言“。</p><p>Java的目标程序已.class形式存在，不能使用文本编辑器打开，不是脚本语言。</p><p>1998年网景公司由“美国在线”公司收购。</p><p>王景公司最著名的就是“领航者浏览器”：Navigator浏览器。<br>LiveScript的出现，最初的时候是为Navigator浏览器量身定制一门语言，不支持其他浏览器。</p><p>微软一看不行，研发了只支持IE浏览器的脚本语言。JScript。<br>在两者语言共存的时代，程序员需要写两套程序。这时一个叫做ECMA组织（欧洲计算机协会）根据JavaScript制定了ECMA-262标准，叫做ECMA-Script.</p><p>JavaScript是一种属于网络的脚本语言,已经被广泛用于Web应用开发,常用来为网页添加各式各样的动态功能,为用户提供更流畅美观的浏览效果。通常JavaScript脚本是通过嵌入在HTML中来实现自身的功能的。<br>2.区分JSP和JS<br>JSP：JavaServer Pages（隶属Java）<br>JS: JavaScript.</p><p>02.HTML中嵌入JavaScript<br>1.HTML嵌入JavaScript的第一种方式<br>JS是一门事件驱动型的编程语言，依靠时间去驱动，然后执行对应的程序。在JS中有很多事件，其中一个事件叫做：鼠标单击，单词：click。并且任何事件都会对应一个事件句柄叫做：onclick。【注意：事件和事件句柄的区别是：事件句柄是在事件单词前添加一个on】，而事件是以HTML标签的属性存在的。</p><p>οnclick&#x3D;”js代码“，执行原理是什么？<br>页面打开的时候，js代码并不会执行，只是把这段代码注册到按钮的click事件上了。等这个按钮发生click之后，注册在onclick后面的js代码会被浏览器自动调用。</p><p>*怎么使用JS代码弹出消息框。<br>在JS中有一个内置对象叫做window,全部小写，可以直接拿来使用，window代表的是浏览器对象。</p><p>*window对象有一个函数叫做：alert，用法是：window.alert(“消息”）;这样就可以弹窗了。</p><p>*JS的字符串可以使用双引号，也可以使用单引号。</p><p>*JS的一条语句结束之后可以使用分号“；”,也可以不使用。</p><p>举例：</p><!DOCTYPE html><html lang="en"><head>    <meta charset="UTF-8">    <title>HTML中嵌入JavaScript的第一种方式</title></head><body>    <!--点击按钮弹出消息框-->    <input type="button" value="Hello" onclick="window.alert('Hello JavaScript!')"/>    <input type="button" value="Hello" onclick="window.alert('Hello XingKong!')"/>    <input type="button" value="Hello" onclick="window.alert ('Hello MengYangChen');                                                alert('Hello MengYang')                                                alert('Hello Meng')"/></body></html><p>2.HTML嵌入JavaScript的第二种方式<br>采用脚本块的方式：<br>暴露在脚本块中的程序，在页面打开的时候执行，并且遵守自上而下的顺序依次逐行执行。（不需要事件）</p><p>JavaScript脚本块可以出现在任何位置，并且可以出现多次。<br>aler函数会阻塞整个HTML页面的加载。</p><p>注释语法跟Java一样。</p><!DOCTYPE html><html lang="en"><head>    <meta charset="UTF-8">    <title>HTML嵌入JavaScript的第二种方式</title></head><body>    <input type="button" value="我是一个。。"/>    <script type="text/javascript">        window.alert("hello world!");    </script>    <input type="button" value="我是一个按钮对象"/></body></html><p>3.HTML嵌入JavaScript的第三种方式（推荐）<br>引入外部的js文件。</p><p>引入js脚本文件的语句：<br>同一个脚本文件可以引入多次。<br>脚本文件直接写语句就好了。</p><script type="text/javascript" src="路径和文件名“></script><p>1<br>结束的&lt; &#x2F;script&gt;标签必须有，不能用反斜杠取代，引入文件时，其中间的代码不会执行。</p><!DOCTYPE html><html lang="en"><head>    <meta charset="UTF-8">    <title>HTML中嵌入JavaScript的第三种方式</title></head><body><script type="text/javascript" src="file/JS1.js"></script></body></html><p>03.JavaScript标识符和变量<br>1.标识符的命名规则跟Java相同。</p><p>2.变量：<br>声明变量：<br>var 变量名；</p><p>赋值：<br>变量名&#x3D;值<br>javascript是一种弱类型语言，没有编译阶段，一个变量可以随意给其赋值。什么类型的都可以。</p><p>变量没有手动赋值时，默认赋值为：undefined。<br>未声明变量使用会报错。</p><p>2.局部变量和全局变量<br>类似C语言：</p><p>全局变量在函数体之外声明。浏览器关闭的时候才会销毁。</p><p>局部变量:在函数体内部声明。在函数体执行完后才销毁。</p><p>3.当一个变量声明的时候没有使用var关键字，那么不管这个变量是在哪里声明的，都是全局变量。</p><p>04.函数的定义和使用<br>1.JS中的函数怎么定义呢?<br>语法格式：<br>第一种方式：<br>function 函数名（形式参数列表）{<br>函数体；<br>}<br>第二种方式：<br>函数名&#x3D;function(形式参数列表）{<br>函数体；<br>}</p><p>JS中的函数不需要指定返回值类型，返回什么类型的数据都没问题。</p><p>函数的形参也不需要声明。<br>如：</p><script>function sum (a,b){alert(a+b);}//或者sum=function(a,b){alert(a+b);}</script><p>在调用函数的时候，如果没有传参数的值，或则传了一部分，剩下未传的参数默认赋值undefined。</p><p>NaN是一个具体的值，该值表示不是数字。</p><p>如果实参的数量大于形式参数的个数，默认只取前面两个数据。即没有数量限制（弱类型语言）。因此可以看出，JS不需要重载。<br>2.JS的函数不能重载。<br>如果出现同名函数，后面定义的函数会把前面定义的函数覆盖。<br>因此JS函数不能重名。分辨函数就是根据函数名来分辨。</p><p>05.JS的数据类型<br>1.JS数据类型有:原始类型，引用类型。<br>原始类型：Undefined,Number,String,Boolean,Null<br>引用类型:Object以及子类。</p><p>2.在ES6规范后，又基于以上6种类型添加了一种新的类型：Symbol。</p><p>3.JS中有一个运算符叫做typeof,这个运算符可以在程序的运行阶段动态地获取变量的数据类型。</p><p>typeof运算符的语法格式：<br>typeof 变量名</p><p>typeof运算符的运算结果时以下6个字符串(全小写）结果之一：<br>“undefined”<br>“number”<br>“string”<br>“boolean”<br>“object”<br>“function”</p><p>var d&#x3D;null;<br>alert(typeof d);&#x2F;&#x2F;“object”<br>比较字符串是否相等用双等号。</p><p>4.Undefined数据类型只有一个值。这个值就是undefined，当一个变量没有手动赋值，系统默认赋值为undefined，当然也可以手动赋值为undefined。</p><p>1.number数据类型<br>如：NaN，表示Not a Number不是一个数字，但是属于Number类型。</p><p>Infinity，表示无穷大。</p><p>0,-1,123,…小数，复数，无穷大都是属于number类型。</p><p>除数为0时，结果为无穷大。</p><p>函数isNaN（数据）：结果为true表示不是一个数字。<br>parseInt()函数：可以将字符串自动转换成数字。保留Int<br>parseFloat()函数：将字符串转换成数字。<br>Math.Ceil()函数：向上取整。2.1会变为3。</p><p>2.boolean数据类型<br>在boolean类型中有一个Boolean（）函数，会将非boolean类型，转换成boolean类型。<br>当某个地方一定是boolean类型时，会自动转换成boolean类型。例如if后面的括号。<br>NaN,0,””,null,undefined会自动转换成false.</p><p>3.String数据类型<br>1.在JS当中字符串可以使用单引号和双引号。<br>2.在JS当中，怎么创建字符串对象<br>第一种：var s&#x3D;“sag”;（小String，属于String类型）<br>第二种：var a2&#x3D; new String(“ab”);（大String，属于Object类型）<br>Sting是一个内置的类，可以直接使用。</p><p>3.无论是小String还是大Sting字符串的长度相同。其中又一个length属性求长度(x.length)</p><p>常用函数：<br>indexof: 获取指定字符串在当前字符串中第一次出现的索引<br>lastIndexof<br>replace<br>substr<br>substring<br>toLowerCase<br>toUpperCase<br>spilt 拆分字符串</p><p>例如:alert(“fasdf”.indexof(“sdf”));</p><p>replace只替换最前面一个子字符串<br>如果想全部替换需要使用正则表达式。</p><p>substr和substring的区别。<br>substr(startIndex length)</p><p>substring(startIndex endIndex)左闭右开。</p><p>4.Object数据类型<br>1.首先Object类型是所有类型的超类，自定义的任何类型，默认继承Object。</p><p>2.Object的prototype属性<br>作用：给类动态地扩展属性和函数。</p><p>3.Object类的函数：</p><p>toString()<br>valueof()<br>toLocalString()</p><p>4.在JS中定义的类默认继承Object的属性和函数。</p><p>06.在JS当中怎么定义类？怎么new对象？<br>1.定义类的语法：<br>第一种方式：<br>function 类名（形参）{<br>}<br>第二种方式：<br>类名 function (形参）{<br>}</p><p>小朋友你是不是有很多问号？这不是函数的定义方式么？</p><p>注意：用了new就是把他当作类看，如果没有new则是把它当作普通的函数看待。</p><p>创建对象的语法：<br>new 构造函数名（实参）；&#x2F;&#x2F;构造函数和类名一致</p><p>2.JS中类的定义，同时又是一个构造函数的定义</p><p>在JS中类的定义和构造函数的定义是放在一起来完成的。</p><p>如：<br>function User(a,b,c){<br>this.sno &#x3D;a;<br>this.sname&#x3D;b;<br>this.sage&#x3D;c;<br>}<br>&#x2F;&#x2F;a,b,c是形参，属于局部变量<br>&#x2F;&#x2F;声明属性（this 表示当前对象）<br>&#x2F;&#x2F;User类中有三个属性：sno&#x2F;sname&#x2F;sage</p><p>3.创建对象：<br>var u1 &#x3D; new User(111,“lisi”,30)</p><p>4.访问对象的属性：<br>alert(u1.sno)<br>alert(u1.sname)<br>alert(u1.sage)</p><p>或者用另一种语法访问属性：<br>alert(u1[“sno”]);<br>alert(u1[“sage”]);</p><p>定义类的另一种语法：<br>Emp &#x3D; function (ename ,sal)<br>this.ename &#x3D;ename;<br>this.sal&#x3D;sal;<br>}</p><p>5.在类中如何定义函数:</p><p>Product &#x3D; function(pno,pname,price){<br>&#x2F;&#x2F;属性<br>this.pno&#x3D;pno;<br>this.pname&#x3D;pname;<br>this.price&#x3D;price;<br>&#x2F;&#x2F;函数<br>this.getPrice &#x3D;function(){<br> return this.price<br>}<br>&#x2F;&#x2F;new对象<br>var pro &#x3D; new Product(111,”西瓜”,4.0)<br>&#x2F;&#x2F;调用函数<br>var pri &#x3D; pro.getPrice();<br>alert(pri);&#x2F;&#x2F;4.0</p><p>6.通过prototype这个属性来动态扩展属性以及函数<br>&#x2F;&#x2F;给Product类扩展函数：<br>Product.prototype.getPname&#x3D;function(){<br>return this.pname;<br>}</p><p>&#x2F;&#x2F;给String类扩展函数<br>String.prototype.getPname&#x3D;function(){<br>alert(“Hello”);<br>}</p><p>7.JS与Java的对比：</p><p>07.null,undefined,NaN的区别<br>1.数据类型不一致</p><p>alert(typeof null);&#x2F;&#x2F;Object<br>alert(typeof NaN);&#x2F;&#x2F;number<br>alert(typeof undefined);&#x2F;&#x2F;undefined</p><p>2.null和undefined可以等同</p><p>alert(null&#x3D;NaN);&#x2F;&#x2F;false<br>alert(null&#x3D;undefined);&#x2F;&#x2F;true<br>alert(underfined&#x3D;NaN);false</p><p>在JS当中有两个比较特殊的运算符：</p><p>1.”&#x3D;&#x3D;” :等同运算符：只判断值是否相等（双等号）<br>2.”&#x3D; &#x3D; &#x3D;”：全等运算符：既判断值是否相等，又判断数据类型是否相等。（三等号）</p><p>alert(11 &#x3D;&#x3D; ture);&#x2F;&#x2F;true<br>alert(11&#x3D;&#x3D;&#x3D; ture);&#x2F;&#x2F;false</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Doprax搭建免费的v2ray</title>
      <link href="/2023/01/22/post-%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0%E5%9F%BA%E4%BA%8EDorprax%E6%90%AD%E5%BB%BA%E5%85%8D%E8%B4%B9%E7%9A%84v2ray/"/>
      <url>/2023/01/22/post-%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0%E5%9F%BA%E4%BA%8EDorprax%E6%90%AD%E5%BB%BA%E5%85%8D%E8%B4%B9%E7%9A%84v2ray/</url>
      
        <content type="html"><![CDATA[<h2 id="这是我的第一篇文章"><a href="#这是我的第一篇文章" class="headerlink" title="这是我的第一篇文章"></a>这是我的第一篇文章</h2><p>Doprax搭建免费的v2ray</p><p>Doprax<br>Doprax又是一款可以免费使用的容器类应用，相比于Replit，可以说是各有千秋，原因是Replit虽然速度挺快但是容易出现断开或者停止服务的情况；Doprax的免费用户可以实现永久在线，不过速度明显比repl要慢一些但却可以不限制流量，测试最高33M，youtube能跑1.3万，1080p不太卡。晚高峰速度470k，建议使用优选IP。</p><p>鉴于Doprax稳定的服务，还是有小伙伴愿意尝试的，搭建也非常简单，下面开始：<br>Doprax官网：<a href="https://www.doprax.com/r/proxy/">https://www.doprax.com/r/proxy/</a></p><p>搭建步骤<br>1、作者github： <a href="https://github.com/hiifeng/V2ray-for-Doprax%EF%BC%8C%E5%85%88%E7%82%B9%E4%B8%AAstar%E7%84%B6%E5%90%8Efork%E4%B8%80%E4%B8%8B%EF%BC%9B">https://github.com/hiifeng/V2ray-for-Doprax，先点个star然后fork一下；</a></p><p>2、按照作者提示，需要修改一下dockerfile中的UUID、VMESS_WSPATH、VLESS_WSPATH，UUID生成可用<a href="https://www.v2fly.org/awesome/tools.html">https://www.v2fly.org/awesome/tools.html</a> ，path随便写就行了；部署之后修改也OK！</p><p>3、Doprax创建一个新的app，名称随意，我使用site，然后在site的Main中，选择从github导入，我们选择这个分支，然后导入。<br>导入完成后，是这个样子的：</p><p>截屏2023-01-13 19.06.40.png</p><p>这个步骤也同样可以修改UUID、VMESS_WSPATH、VLESS_WSPATH，保存按钮比较难找哇；</p><p>4、接下来来到Deploy页面，点击启动,然后等待；我这里选择RAM: 256 MB CPU: 1 vCPU，速度稍慢了一些；完全启动后，我们会得到一个URL：<br>截屏2023-01-13 19.10.40.png</p><p>客户端设置方法<br>作者给出的设置参考图片：<br>截屏2023-01-13 19.18.06.png</p><p>我使用小火箭客户端的图片：<br>截屏2023-01-13 19.14.56.png</p><p>vless同理！</p><p>进阶教程<br>套cf cdn加速：<br>1、在app的设置页面，点击Edit domain，把域名解析到URL所在的IP，然后刷新验证，直到显示验证成功！<br>2、cf内开启小云朵。<br>3、在v2客户端当中，把地址和host都改成绑定的域名，然后测速，速度最高可提升10倍。当然了，这也要看网络情况；<br>我本地测速原来570kps，加速后6.7Mbps；<br>4、优选IP工具GitHub地址：<a href="https://github.com/XIU2/CloudflareSpeedTest/">https://github.com/XIU2/CloudflareSpeedTest/</a><br>cf的IP段：<a href="https://github.com/ip-scanner/cloudflare">https://github.com/ip-scanner/cloudflare</a></p><p>但是我发现一个问题，cf真的是用户太多了，连续测试了几个IP效果都不太好！就在刚刚，我又发现cf的小云朵开启以后，Doprax会检测到，庆幸的是，反代还可以用。</p><p>套aws cdn加速：<br>1、aws cdn套餐免费1T流量，所以自己的URL要注意保密，流量还是挺贵的！<br>2、在CloudFront创建cdn，等待地址生效；<br>3、在v2客户端当中，把地址和host都改成CloudFront分配的地址；<br>4、测试一下，效果也是一般般！<br>5、在<a href="https://d7uri8nf7uskq.cloudfront.net/tools/list-cloudfront-ips">https://d7uri8nf7uskq.cloudfront.net/tools/list-cloudfront-ips</a> 找一个非国内IP（或者是使用优选工具），修改客户端的地址（host伪装不修改，仍然使用CloudFront分配的地址），嘿！<br>6、fast测速120Mbps，8K也毫无压力呀！</p><p>问题是我白天测试的效果不敢再鼓吹了，录视频真翻车呀，晚高峰再测试然后更新视频吧。</p><p>参考资料：<a href="https://github.com/hiifeng/V2ray-for-Doprax">https://github.com/hiifeng/V2ray-for-Doprax</a></p><p>Doprax搭建v2的视频教程：<a href="https://www.youtube.com/watch?v=p76SC2GBT0s">https://www.youtube.com/watch?v=p76SC2GBT0s</a><br>对速度不满意吗？ 看看反代+优选IP教程 <a href="https://www.youtube.com/watch?v=4O5k5HVZB_o">https://www.youtube.com/watch?v=4O5k5HVZB_o</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>about</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[<!-- GitCalendar容器 --><div id="gitZone"></div>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>categories</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/universe.css"/>
      <url>/css/universe.css</url>
      
        <content type="html"><![CDATA[/* 背景宇宙星光  */#universe{    display: block;    position: fixed;    margin: 0;    padding: 0;    border: 0;    outline: 0;    left: 0;    top: 0;    width: 100%;    height: 100%;    pointer-events: none;    /* 这个是调置顶的优先级的，-1在文章页下面，背景上面，个人推荐这种 */    z-index: -1;  }  /* 一级菜单居中 */#nav .menus_items {  position: absolute !important;  width: fit-content !important;  left: 50% !important;  transform: translateX(-50%) !important;}/* 子菜单横向展示 */#nav .menus_items .menus_item:hover .menus_item_child {  display: flex !important;}/* 这里的2是代表导航栏的第2个元素，即有子菜单的元素，可以按自己需求修改 */.menus_items .menus_item:nth-child(2) .menus_item_child {  left: -125px;}@font-face {  /* 为载入的字体取名字(随意) */  font-family: 'YSHST';  /* 字体文件地址(相对或者绝对路径都可以) */  src: url(D://xk.PA.png);  /* 定义加粗样式(加粗多少) */  font-weight: normal;  /* 定义字体样式(斜体/非斜体) */  font-style: normal;  /* 定义显示样式 */  font-display: block;}/*#双边框居中修复*//* 翻页按钮居中 */#pagination {  width: 100%;  margin: auto;}/* 侧边栏个人信息卡片动态渐变色 */#aside-content > .card-widget.card-info {  background: linear-gradient(    -45deg,    #e8d8b9,    #eccec5,    #a3e9eb,    #bdbdf0,    #eec1ea  );  box-shadow: 0 0 5px rgb(66, 68, 68);  position: relative;  background-size: 400% 400%;  -webkit-animation: Gradient 10s ease infinite;  -moz-animation: Gradient 10s ease infinite;  animation: Gradient 10s ease infinite !important;}@-webkit-keyframes Gradient {  0% {    background-position: 0% 50%;  }  50% {    background-position: 100% 50%;  }  100% {    background-position: 0% 50%;  }}@-moz-keyframes Gradient {  0% {    background-position: 0% 50%;  }  50% {    background-position: 100% 50%;  }  100% {    background-position: 0% 50%;  }}@keyframes Gradient {  0% {    background-position: 0% 50%;  }  50% {    background-position: 100% 50%;  }  100% {    background-position: 0% 50%;  }}/* 黑夜模式适配 */[data-theme="dark"] #aside-content > .card-widget.card-info {  background: #191919ee;}/* 个人信息Follow me按钮 */#aside-content > .card-widget.card-info > #card-info-btn {  background-color: #3eb8be;  border-radius: 8px;}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>gallery</title>
      <link href="/gallery/index.html"/>
      <url>/gallery/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>galleryGroup</title>
      <link href="/galleryGroup/index.html"/>
      <url>/galleryGroup/index.html</url>
      
        <content type="html"><![CDATA[<div class="gallery-group-main">  <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='https://source.fomal.cc/img/default_cover_61.webp' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">封面专区</div>  <p>本站用作文章封面的图片，不保证分辨率</p>  <a href='/box/Gallery/photo'></a>  </figcaption>  </figure>    <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='https://source.fomal.cc/img/dm11.webp' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">背景专区</div>  <p>收藏的一些的背景与壁纸，分辨率很高</p>  <a href='/box/Gallery/wallpaper'></a>  </figcaption>  </figure>  </div>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/universe.js"/>
      <url>/js/universe.js</url>
      
        <content type="html"><![CDATA[function dark() {window.requestAnimationFrame=window.requestAnimationFrame||window.mozRequestAnimationFrame||window.webkitRequestAnimationFrame||window.msRequestAnimationFrame;var n,e,i,h,t=.05,s=document.getElementById("universe"),o=!0,a="180,184,240",r="226,225,142",d="226,225,224",c=[];function f(){n=window.innerWidth,e=window.innerHeight,i=.216*n,s.setAttribute("width",n),s.setAttribute("height",e)}function u(){h.clearRect(0,0,n,e);for(var t=c.length,i=0;i<t;i++){var s=c[i];s.move(),s.fadeIn(),s.fadeOut(),s.draw()}}function y(){this.reset=function(){this.giant=m(3),this.comet=!this.giant&&!o&&m(10),this.x=l(0,n-10),this.y=l(0,e),this.r=l(1.1,2.6),this.dx=l(t,6*t)+(this.comet+1-1)*t*l(50,120)+2*t,this.dy=-l(t,6*t)-(this.comet+1-1)*t*l(50,120),this.fadingOut=null,this.fadingIn=!0,this.opacity=0,this.opacityTresh=l(.2,1-.4*(this.comet+1-1)),this.do=l(5e-4,.002)+.001*(this.comet+1-1)},this.fadeIn=function(){this.fadingIn&&(this.fadingIn=!(this.opacity>this.opacityTresh),this.opacity+=this.do)},this.fadeOut=function(){this.fadingOut&&(this.fadingOut=!(this.opacity<0),this.opacity-=this.do/2,(this.x>n||this.y<0)&&(this.fadingOut=!1,this.reset()))},this.draw=function(){if(h.beginPath(),this.giant)h.fillStyle="rgba("+a+","+this.opacity+")",h.arc(this.x,this.y,2,0,2*Math.PI,!1);else if(this.comet){h.fillStyle="rgba("+d+","+this.opacity+")",h.arc(this.x,this.y,1.5,0,2*Math.PI,!1);for(var t=0;t<30;t++)h.fillStyle="rgba("+d+","+(this.opacity-this.opacity/20*t)+")",h.rect(this.x-this.dx/4*t,this.y-this.dy/4*t-2,2,2),h.fill()}else h.fillStyle="rgba("+r+","+this.opacity+")",h.rect(this.x,this.y,this.r,this.r);h.closePath(),h.fill()},this.move=function(){this.x+=this.dx,this.y+=this.dy,!1===this.fadingOut&&this.reset(),(this.x>n-n/4||this.y<0)&&(this.fadingOut=!0)},setTimeout(function(){o=!1},50)}function m(t){return Math.floor(1e3*Math.random())+1<10*t}function l(t,i){return Math.random()*(i-t)+t}f(),window.addEventListener("resize",f,!1),function(){h=s.getContext("2d");for(var t=0;t<i;t++)c[t]=new y,c[t].reset();u()}(),function t(){document.getElementsByTagName('html')[0].getAttribute('data-theme')=='dark'&&u(),window.requestAnimationFrame(t)}()};dark()]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>link</title>
      <link href="/link/index.html"/>
      <url>/link/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>电影</title>
      <link href="/moive/index.html"/>
      <url>/moive/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>音乐</title>
      <link href="/music/index.html"/>
      <url>/music/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
